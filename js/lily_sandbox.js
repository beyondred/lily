// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 23888;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([208,72,0,0,0,0,0,0,116,114,117,101,0,0,0,0,72,57,0,0,0,0,0,0,115,101,108,102,0,0,0,0,134,72,0,0,0,0,0,0,117,110,105,116,0,0,0,0,202,72,0,0,0,0,0,0,102,97,108,115,101,0,0,0,185,21,0,0,0,0,0,0,95,95,102,105,108,101,95,95,194,21,0,0,0,0,0,0,95,95,108,105,110,101,95,95,203,21,0,0,0,0,0,0,95,95,102,117,110,99,116,105,216,21,0,0,0,0,0,0,105,102,0,0,0,0,0,0,219,21,0,0,0,0,0,0,100,111,0,0,0,0,0,0,222,21,0,0,0,0,0,0,118,97,114,0,0,0,0,0,226,21,0,0,0,0,0,0,102,111,114,0,0,0,0,0,230,21,0,0,0,0,0,0,116,114,121,0,0,0,0,0,234,21,0,0,0,0,0,0,99,97,115,101,0,0,0,0,239,21,0,0,0,0,0,0,101,108,115,101,0,0,0,0,244,21,0,0,0,0,0,0,101,108,105,102,0,0,0,0,249,21,0,0,0,0,0,0,101,110,117,109,0,0,0,0,254,21,0,0,0,0,0,0,119,104,105,108,101,0,0,0,4,22,0,0,0,0,0,0,114,97,105,115,101,0,0,0,10,22,0,0,0,0,0,0,109,97,116,99,104,0,0,0,16,22,0,0,0,0,0,0,98,114,101,97,107,0,0,0,22,22,0,0,0,0,0,0,99,108,97,115,115,0,0,0,28,22,0,0,0,0,0,0,112,117,98,108,105,99,0,0,35,22,0,0,0,0,0,0,115,116,97,116,105,99,0,0,42,22,0,0,0,0,0,0,115,99,111,112,101,100,0,0,49,22,0,0,0,0,0,0,100,101,102,105,110,101,0,0,56,22,0,0,0,0,0,0,114,101,116,117,114,110,0,0,63,22,0,0,0,0,0,0,101,120,99,101,112,116,0,0,70,22,0,0,0,0,0,0,105,109,112,111,114,116,0,0,77,22,0,0,0,0,0,0,102,111,114,119,97,114,100,0,222,65,0,0,0,0,0,0,112,114,105,118,97,116,101,0,230,65,0,0,0,0,0,0,112,114,111,116,101,99,116,101,85,22,0,0,0,0,0,0,99,111,110,116,105,110,117,101,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,249,255,0,0,32,2,0,0,72,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,26,0,0,0,88,2,0,0,77,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,16,0,250,255,0,0,144,2,0,0,82,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,144,2,0,0,47,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,25,102,169,90,111,2,181,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,77,72,0,0,187,18,0,0,189,18,0,0,191,18,0,0,84,72,0,0,193,18,0,0,171,68,0,0,167,68,0,0,213,68,0,0,169,68,0,0,150,68,0,0,153,68,0,0,190,68,0,0,71,72,0,0,193,68,0,0,155,68,0,0,196,68,0,0,196,64,0,0,184,68,0,0,132,68,0,0,135,68,0,0,187,68,0,0,140,68,0,0,142,68,0,0,157,68,0,0,199,68,0,0,145,68,0,0,147,68,0,0,160,68,0,0,203,68,0,0,182,68,0,0,137,68,0,0,167,72,0,0,195,18,0,0,128,72,0,0,131,72,0,0,86,72,0,0,204,18,0,0,207,18,0,0,215,18,0,0,231,18,0,0,240,18,0,0,253,18,0,0,4,19,0,0,15,19,0,0,24,19,0,0,36,19,0,0,127,75,0,0,163,68,0,0,207,68,0,0,173,68,0,0,165,68,0,0,210,68,0,0,176,68,0,0,53,19,0,0,73,72,0,0,179,68,0,0,153,61,0,0,156,61,0,0,56,19,0,0,70,19,0,0,84,19,0,0,87,19,0,0,57,25,0,0,78,25,0,0,86,25,0,0,95,25,0,0,108,25,0,0,67,25,0,0,37,25,0,0,111,20,0,0,118,20,0,0,126,20,0,0,143,20,0,0,156,20,0,0,178,20,0,0,63,73,0,0,44,85,0,0,229,20,0,0,7,21,0,0,35,21,0,0,67,21,0,0,63,73,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,255,255,255,255,2,0,0,0,0,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,1,0,0,0,255,255,255,255,6,0,0,0,0,0,0,0,255,255,255,255,7,0,0,0,0,0,0,0,16,0,0,0,8,0,0,0,0,0,0,0,33,0,0,0,9,0,0,0,0,0,0,0,255,255,255,255,10,0,0,0,0,0,0,0,8,0,0,0,11,0,0,0,0,0,0,0,9,0,0,0,12,0,0,0,0,0,0,0,26,0,0,0,13,0,0,0,0,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,27,0,0,0,15,0,0,0,0,0,0,0,11,0,0,0,16,0,0,0,0,0,0,0,28,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,24,0,0,0,20,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,0,0,0,0,25,0,0,0,22,0,0,0,0,0,0,0,4,0,0,0,23,0,0,0,0,0,0,0,5,0,0,0,24,0,0,0,0,0,0,0,12,0,0,0,25,0,0,0,0,0,0,0,29,0,0,0,26,0,0,0,0,0,0,0,6,0,0,0,27,0,0,0,0,0,0,0,7,0,0,0,28,0,0,0,0,0,0,0,13,0,0,0,29,0,0,0,0,0,0,0,30,0,0,0,30,0,0,0,0,0,0,0,23,0,0,0,31,0,0,0,0,0,0,0,3,0,0,0,32,0,0,0,0,0,0,0,255,255,255,255,33,0,0,0,1,0,0,0,255,255,255,255,34,0,0,0,0,0,0,0,255,255,255,255,35,0,0,0,0,0,0,0,255,255,255,255,36,0,0,0,0,0,0,0,255,255,255,255,37,0,0,0,0,0,0,0,255,255,255,255,38,0,0,0,1,0,0,0,255,255,255,255,39,0,0,0,1,0,0,0,255,255,255,255,40,0,0,0,1,0,0,0,255,255,255,255,41,0,0,0,1,0,0,0,255,255,255,255,42,0,0,0,1,0,0,0,255,255,255,255,43,0,0,0,0,0,0,0,255,255,255,255,44,0,0,0,0,0,0,0,255,255,255,255,45,0,0,0,0,0,0,0,255,255,255,255,46,0,0,0,0,0,0,0,255,255,255,255,47,0,0,0,0,0,0,0,255,255,255,255,48,0,0,0,0,0,0,0,14,0,0,0,49,0,0,0,0,0,0,0,31,0,0,0,50,0,0,0,0,0,0,0,20,0,0,0,51,0,0,0,0,0,0,0,15,0,0,0,52,0,0,0,0,0,0,0,32,0,0,0,53,0,0,0,0,0,0,0,21,0,0,0,54,0,0,0,0,0,0,0,255,255,255,255,55,0,0,0,1,0,0,0,255,255,255,255,56,0,0,0,0,0,0,0,22,0,0,0,57,0,0,0,0,0,0,0,255,255,255,255,58,0,0,0,0,0,0,0,255,255,255,255,59,0,0,0,0,0,0,0,255,255,255,255,60,0,0,0,1,0,0,0,255,255,255,255,61,0,0,0,1,0,0,0,255,255,255,255,62,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,44,85,0,0,237,42,0,0,248,42,0,0,18,43,0,0,43,43,0,0,51,43,0,0,74,43,0,0,88,43,0,0,128,43,0,0,174,43,0,0,203,43,0,0,254,43,0,0,32,44,0,0,70,44,0,0,80,44,0,0,105,44,0,0,116,44,0,0,140,44,0,0,153,44,0,0,181,44,0,0,198,44,0,0,223,44,0,0,231,44,0,0,246,44,0,0,30,45,0,0,59,45,0,0,79,45,0,0,114,45,0,0,145,45,0,0,165,45,0,0,177,45,0,0,190,45,0,0,215,45,0,0,243,45,0,0,31,46,0,0,61,46,0,0,99,46,0,0,132,46,0,0,190,46,0,0,239,46,0,0,44,47,0,0,105,47,0,0,138,47,0,0,163,47,0,0,192,47,0,0,203,47,0,0,232,47,0,0,2,48,0,0,27,48,0,0,52,48,0,0,74,48,0,0,100,48,0,0,123,48,0,0,150,48,0,0,161,48,0,0,182,48,0,0,233,48,0,0,10,49,0,0,51,49,0,0,104,49,0,0,147,49,0,0,179,49,0,0,215,49,0,0,4,50,0,0,26,50,0,0,48,50,0,0,100,50,0,0,133,50,0,0,185,50,0,0,214,50,0,0,238,50,0,0,30,51,0,0,55,51,0,0,68,51,0,0,112,51,0,0,174,51,0,0,208,51,0,0,242,51,0,0,35,52,0,0,76,52,0,0,134,52,0,0,161,52,0,0,193,52,0,0,242,52,0,0,253,52,0,0,5,53,0,0,20,53,0,0,60,53,0,0,101,53,0,0,142,53,0,0,182,53,0,0,196,53,0,0,210,53,0,0,237,53,0,0,12,54,0,0,22,54,0,0,54,54,0,0,91,54,0,0,140,54,0,0,171,54,0,0,200,54,0,0,229,54,0,0,2,55,0,0,31,55,0,0,56,55,0,0,89,55,0,0,125,55,0,0,166,55,0,0,199,55,0,0,242,55,0,0,25,56,0,0,64,56,0,0,96,56,0,0,133,56,0,0,157,56,0,0,182,56,0,0,191,56,0,0,216,56,0,0,245,56,0,0,4,57,0,0,31,57,0,0,44,57,0,0,58,57,0,0,63,73,0,0,32,2,0,0,88,2,0,0,144,2,0,0,200,2,0,0,196,64,0,0,132,68,0,0,135,68,0,0,137,68,0,0,140,68,0,0,142,68,0,0,145,68,0,0,147,68,0,0,150,68,0,0,153,68,0,0,71,72,0,0,155,68,0,0,157,68,0,0,160,68,0,0,163,68,0,0,165,68,0,0,167,68,0,0,169,68,0,0,135,68,0,0,171,68,0,0,173,68,0,0,176,68,0,0,179,68,0,0,182,68,0,0,184,68,0,0,187,68,0,0,190,68,0,0,193,68,0,0,196,68,0,0,199,68,0,0,203,68,0,0,207,68,0,0,210,68,0,0,213,68,0,0,229,72,0,0,238,72,0,0,248,72,0,0,19,73,0,0,63,73,0,0,11,0,0,0,19,0,0,0,37,0,0,0,67,0,0,0,131,0,0,0,27,1,0,0,9,2,0,0,9,4,0,0,5,8,0,0,3,16,0,0,27,32,0,0,43,64,0,0,3,128,0,0,45,0,1,0,29,0,2,0,3,0,4,0,21,0,8,0,7,0,16,0,17,0,32,0,15,0,64,0,9,0,128,0,43,0,0,1,35,0,0,2,15,0,0,4,29,0,0,8,3,0,0,16,11,0,0,32,85,0,0,64,0,0,0,0,240,10,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,56,85,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,12,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,64,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,12,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,72,89,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,12,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,73,109,112,111,114,116,32,112,97,116,104,32,109,117,115,116,32,110,111,116,32,98,101,32,101,109,112,116,121,46,0,73,109,112,111,114,116,32,112,97,116,104,32,99,97,110,110,111,116,32,98,101,32,97,32,116,114,105,112,108,101,45,113,117,111,116,101,32,115,116,114,105,110,103,46,0,73,109,112,111,114,116,32,112,97,116,104,32,99,97,110,110,111,116,32,98,101,103,105,110,32,111,114,32,101,110,100,32,119,105,116,104,32,39,47,39,46,0,73,109,112,111,114,116,32,112,97,116,104,32,99,97,110,110,111,116,32,99,111,110,116,97,105,110,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,115,46,0,83,105,109,112,108,101,32,105,109,112,111,114,116,32,112,97,116,104,115,32,100,111,32,110,111,116,32,110,101,101,100,32,116,111,32,98,101,32,113,117,111,116,101,100,46,0,39,46,46,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,116,111,107,101,110,32,40,101,120,112,101,99,116,101,100,32,49,32,111,114,32,51,32,100,111,116,115,41,46,0,39,43,43,61,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,116,111,107,101,110,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,108,97,109,98,100,97,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,39,92,37,100,39,0,34,34,34,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,46,0,78,101,119,108,105,110,101,32,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,115,116,114,105,110,103,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,68,111,117,98,108,101,32,118,97,108,117,101,32,119,105,116,104,32,66,121,116,101,32,115,117,102,102,105,120,46,0,66,121,116,101,32,118,97,108,117,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,97,32,115,105,103,110,46,0,66,121,116,101,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,73,110,116,101,103,101,114,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,73,110,116,101,103,101,114,32,118,97,108,117,101,32,105,115,32,116,111,111,32,115,109,97,108,108,46,0,68,111,117,98,108,101,32,118,97,108,117,101,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,69,120,112,101,99,116,101,100,32,97,32,98,97,115,101,32,49,48,32,110,117,109,98,101,114,32,97,102,116,101,114,32,101,120,112,111,110,101,110,116,46,0,69,120,112,111,110,101,110,116,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,77,117,108,116,105,45,99,104,97,114,97,99,116,101,114,32,98,121,116,101,32,108,105,116,101,114,97,108,46,0,68,111,99,115,116,114,105,110,103,32,108,105,110,101,32,100,111,101,115,32,110,111,116,32,115,116,97,114,116,32,119,105,116,104,32,102,117,108,108,32,39,35,35,35,39,46,0,68,111,99,115,116,114,105,110,103,32,104,97,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,105,110,100,101,110,116,97,116,105,111,110,46,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,99,111,109,109,101,110,116,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,0,73,110,118,97,108,105,100,32,117,116,102,45,56,32,115,101,113,117,101,110,99,101,32,111,110,32,108,105,110,101,32,37,100,46,0,60,63,108,105,108,121,0,70,105,108,101,115,32,105,110,32,116,101,109,112,108,97,116,101,32,109,111,100,101,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,39,60,63,108,105,108,121,39,46,0,63,108,105,108,121,0,44,0,123,0,125,0,58,0,97,32,108,97,109,98,100,97,0,61,62,0,97,32,108,97,98,101,108,0,97,32,112,114,111,112,101,114,116,121,32,110,97,109,101,0,97,32,115,116,114,105,110,103,0,97,32,98,121,116,101,115,116,114,105,110,103,0,97,32,98,121,116,101,0,97,110,32,105,110,116,101,103,101,114,0,97,32,100,111,117,98,108,101,0,97,32,100,111,99,115,116,114,105,110,103,0,97,32,110,97,109,101,100,32,97,114,103,117,109,101,110,116,0,64,40,0,105,110,118,97,108,105,100,32,116,111,107,101,110,0,101,110,100,32,111,102,32,108,97,109,98,100,97,0,63,62,0,101,110,100,32,111,102,32,102,105,108,101,0,37,100,58,0,91,67,93,0,37,115,58,37,115,32,102,114,111,109,32,37,115,0,65,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,46,0,102,111,114,32,108,111,111,112,32,115,116,101,112,32,99,97,110,110,111,116,32,98,101,32,48,46,0,83,117,98,115,99,114,105,112,116,32,105,110,100,101,120,32,37,108,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,0,37,108,100,0,70,117,110,99,116,105,111,110,32,99,97,108,108,32,114,101,99,117,114,115,105,111,110,32,108,105,109,105,116,32,114,101,97,99,104,101,100,46,0,73,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,46,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,46,0,73,110,102,105,110,105,116,101,32,108,111,111,112,32,105,110,32,99,111,109,112,97,114,105,115,111,110,46,0,1,84,105,109,101,0,0,67,4,84,105,109,101,0,0,109,0,99,108,111,99,107,0,58,32,68,111,117,98,108,101,0,109,0,110,111,119,0,58,32,84,105,109,101,0,109,0,116,111,95,115,0,40,84,105,109,101,41,58,32,83,116,114,105,110,103,0,109,0,115,105,110,99,101,95,101,112,111,99,104,0,40,84,105,109,101,41,58,32,73,110,116,101,103,101,114,0,37,89,45,37,109,45,37,100,32,37,72,58,37,77,58,37,83,32,37,122,0,70,0,103,101,116,101,110,118,0,40,83,116,114,105,110,103,41,58,32,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,70,0,114,101,99,117,114,115,105,111,110,95,108,105,109,105,116,0,58,32,73,110,116,101,103,101,114,0,70,0,115,101,116,95,114,101,99,117,114,115,105,111,110,95,108,105,109,105,116,0,40,73,110,116,101,103,101,114,41,0,82,0,97,114,103,118,0,76,105,115,116,91,83,116,114,105,110,103,93,0,76,105,109,105,116,32,118,97,108,117,101,32,40,37,108,100,41,32,105,115,32,110,111,116,32,114,101,97,115,111,110,97,98,108,101,46,0,76,105,109,105,116,32,118,97,108,117,101,32,40,37,108,100,41,32,105,115,32,108,111,119,101,114,32,116,104,97,110,32,116,104,101,32,99,117,114,114,101,110,116,32,114,101,99,117,114,115,105,111,110,32,100,101,112,116,104,46,0,95,95,102,105,108,101,95,95,0,95,95,108,105,110,101,95,95,0,95,95,102,117,110,99,116,105,111,110,95,95,0,105,102,0,100,111,0,118,97,114,0,102,111,114,0,116,114,121,0,99,97,115,101,0,101,108,115,101,0,101,108,105,102,0,101,110,117,109,0,119,104,105,108,101,0,114,97,105,115,101,0,109,97,116,99,104,0,98,114,101,97,107,0,99,108,97,115,115,0,112,117,98,108,105,99,0,115,116,97,116,105,99,0,115,99,111,112,101,100,0,100,101,102,105,110,101,0,114,101,116,117,114,110,0,101,120,99,101,112,116,0,105,109,112,111,114,116,0,102,111,114,119,97,114,100,0,99,111,110,116,105,110,117,101,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,37,115,47,37,115,46,108,105,108,121,0,37,115,47,37,115,46,115,111,0,37,115,47,112,97,99,107,97,103,101,115,47,37,115,47,115,114,99,47,37,115,46,108,105,108,121,0,37,115,47,112,97,99,107,97,103,101,115,47,37,115,47,115,114,99,47,37,115,46,115,111,0,108,105,108,121,95,37,115,95,116,97,98,108,101,0,108,105,108,121,95,37,115,95,108,111,97,100,101,114,0,115,121,115,0,114,97,110,100,111,109,0,116,105,109,101,0,95,95,109,97,105,110,95,95,0,69,109,112,116,121,32,40,41,32,102,111,117,110,100,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,105,110,112,117,116,32,97,114,103,117,109,101,110,116,115,46,32,79,109,105,116,32,105,110,115,116,101,97,100,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,41,39,44,32,110,111,116,32,39,37,115,39,46,0,39,115,101,108,102,39,32,114,101,116,117,114,110,32,116,121,112,101,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,32,99,108,97,115,115,32,109,101,116,104,111,100,115,46,0,39,115,101,108,102,39,32,114,101,116,117,114,110,32,116,121,112,101,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,97,32,115,116,97,116,105,99,32,109,101,116,104,111,100,46,0,70,111,114,119,97,114,100,32,100,101,99,108,97,114,97,116,105,111,110,115,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,104,97,118,101,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,46,0,9,0,68,101,99,108,97,114,97,116,105,111,110,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,112,114,105,111,114,32,102,111,114,119,97,114,100,32,100,101,99,108,97,114,97,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,46,10,69,120,112,101,99,116,101,100,58,32,94,84,10,82,101,99,101,105,118,101,100,58,32,94,84,0,69,120,112,101,99,116,101,100,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,100,101,99,108,97,114,97,116,105,111,110,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,93,39,44,32,110,111,116,32,39,37,115,39,46,0,67,108,97,115,115,32,37,115,32,101,120,112,101,99,116,115,32,37,100,32,116,121,112,101,40,115,41,44,32,98,117,116,32,103,111,116,32,37,100,32,116,121,112,101,40,115,41,46,0,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,107,101,121,32,102,111,114,32,72,97,115,104,46,0,67,108,97,115,115,32,39,37,115,39,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,69,120,99,101,112,116,105,111,110,0,73,110,100,101,120,69,114,114,111,114,0,73,79,69,114,114,111,114,0,75,101,121,69,114,114,111,114,0,82,117,110,116,105,109,101,69,114,114,111,114,0,86,97,108,117,101,69,114,114,111,114,0,60,110,101,119,62,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,115,46,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,44,39,46,0,69,120,112,101,99,116,101,100,32,97,32,107,101,121,32,61,62,32,118,97,108,117,101,32,112,97,105,114,32,98,101,102,111,114,101,32,39,44,39,46,0,83,117,98,115,99,114,105,112,116,115,32,99,97,110,110,111,116,32,99,111,110,116,97,105,110,32,39,44,39,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,37,115,39,32,111,114,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,99,108,111,115,105,110,103,32,116,111,107,101,110,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,0,80,114,111,112,101,114,116,105,101,115,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,32,40,39,118,97,114,39,32,107,101,121,119,111,114,100,32,109,105,115,115,105,110,103,63,41,0,80,114,111,112,101,114,116,121,32,37,115,32,105,115,32,110,111,116,32,105,110,32,99,108,97,115,115,32,37,115,46,37,115,0,39,115,101,108,102,39,32,109,117,115,116,32,98,101,32,117,115,101,100,32,119,105,116,104,105,110,32,97,32,99,108,97,115,115,46,0,37,115,32,104,97,115,32,110,111,116,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,67,97,110,110,111,116,32,105,109,112,108,105,99,105,116,108,121,32,117,115,101,32,116,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,111,102,32,97,110,32,101,110,117,109,46,0,67,108,97,115,115,32,37,115,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,67,111,110,115,116,114,117,99,116,111,114,32,102,111,114,32,99,108,97,115,115,32,37,115,32,105,115,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,46,0,37,115,46,37,115,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,0,65,116,116,101,109,112,116,32,116,111,32,117,115,101,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,118,97,108,117,101,32,39,37,115,39,46,0,65,32,109,101,116,104,111,100,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,0,65,32,112,114,111,112,101,114,116,121,32,105,110,32,99,108,97,115,115,32,37,115,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,64,37,115,46,0,78,111,110,45,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,102,111,108,108,111,119,115,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,46,0,78,117,109,101,114,105,99,32,115,99,111,111,112,105,110,103,32,116,121,112,101,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,116,111,32,116,104,101,32,98,97,99,107,101,110,100,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,61,62,39,32,111,114,32,39,41,39,32,97,102,116,101,114,32,118,97,114,97,114,103,115,46,0,37,115,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,84,111,111,32,109,97,110,121,32,103,101,110,101,114,105,99,115,46,0,73,110,118,97,108,105,100,32,103,101,110,101,114,105,99,32,110,97,109,101,32,40,119,97,110,116,101,100,32,37,115,44,32,103,111,116,32,37,115,41,46,0,40,108,97,109,98,100,97,41,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,99,111,110,116,105,110,117,101,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,46,0,39,102,111,114,119,97,114,100,39,32,113,117,97,108,105,102,105,101,114,32,105,115,32,111,110,108,121,32,102,111,114,32,116,111,112,108,101,118,101,108,32,102,117,110,99,116,105,111,110,115,32,97,110,100,32,109,101,116,104,111,100,115,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,46,0,39,102,111,114,119,97,114,100,39,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,99,108,97,115,115,32,115,99,111,112,101,32,104,101,114,101,46,0,39,115,116,97,116,105,99,39,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,39,100,101,102,105,110,101,39,44,32,110,111,116,32,39,37,115,39,46,0,67,97,110,110,111,116,32,117,115,101,32,39,102,111,114,119,97,114,100,39,32,119,105,116,104,32,39,118,97,114,39,46,0,39,100,101,102,105,110,101,39,0,101,105,116,104,101,114,32,39,118,97,114,39,32,111,114,32,39,100,101,102,105,110,101,39,0,69,120,112,101,99,116,101,100,32,37,115,44,32,98,117,116,32,103,111,116,32,39,37,115,39,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,102,117,110,99,116,105,111,110,32,104,101,114,101,46,0,67,108,97,115,115,32,109,101,116,104,111,100,32,100,101,99,108,97,114,97,116,105,111,110,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,115,99,111,112,101,46,0,77,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,32,119,105,116,104,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,37,115,39,46,0,68,111,99,115,116,114,105,110,103,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,102,117,110,99,116,105,111,110,32,111,114,32,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,46,0,40,115,101,108,102,41,0,87,114,111,110,103,32,113,117,97,108,105,102,105,101,114,115,32,105,110,32,114,101,115,111,108,117,116,105,111,110,32,111,102,32,37,115,32,40,101,120,112,101,99,116,101,100,58,32,0,32,115,116,97,116,105,99,0,41,46,0,65,32,102,111,114,119,97,114,100,32,100,101,99,108,97,114,97,116,105,111,110,32,102,111,114,32,37,115,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,67,108,97,115,115,32,118,97,114,32,100,101,99,108,97,114,97,116,105,111,110,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,115,99,111,112,101,46,0,65,110,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,114,101,113,117,105,114,101,100,32,104,101,114,101,46,0,67,108,97,115,115,32,112,114,111,112,101,114,116,105,101,115,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,64,46,0,67,97,110,110,111,116,32,117,115,101,32,97,32,99,108,97,115,115,32,112,114,111,112,101,114,116,121,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,0,100,101,99,108,97,114,101,32,97,32,99,108,97,115,115,32,112,114,111,112,101,114,116,121,0,100,101,99,108,97,114,101,32,97,32,103,108,111,98,97,108,32,118,97,114,0,117,115,101,32,39,105,109,112,111,114,116,39,0,67,97,110,110,111,116,32,37,115,32,119,104,101,110,32,116,104,101,114,101,32,97,114,101,32,117,110,114,101,115,111,108,118,101,100,32,102,111,114,119,97,114,100,40,115,41,58,0,10,42,32,37,115,32,97,116,32,108,105,110,101,32,37,100,0,67,97,110,110,111,116,32,105,109,112,111,114,116,32,97,32,102,105,108,101,32,104,101,114,101,46,0,39,105,109,112,111,114,116,39,32,101,120,112,101,99,116,101,100,32,97,32,112,97,116,104,32,40,105,100,101,110,116,105,102,105,101,114,32,111,114,32,115,116,114,105,110,103,41,44,32,110,111,116,32,37,115,46,0,65,32,109,111,100,117,108,101,32,110,97,109,101,100,32,39,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,105,109,112,111,114,116,101,100,32,104,101,114,101,46,0,97,115,0,67,97,110,110,111,116,32,117,115,101,32,39,97,115,39,32,119,104,101,110,32,111,110,108,121,32,115,112,101,99,105,102,105,99,32,105,116,101,109,115,32,97,114,101,32,98,101,105,110,103,32,105,109,112,111,114,116,101,100,46,0,39,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,67,97,110,110,111,116,32,102,105,110,100,32,115,121,109,98,111,108,32,39,37,115,39,32,105,110,115,105,100,101,32,111,102,32,109,111,100,117,108,101,32,39,37,115,39,46,0,78,111,116,32,97,108,108,111,119,101,100,32,116,111,32,100,105,114,101,99,116,108,121,32,105,109,112,111,114,116,32,109,111,100,117,108,101,115,32,40,39,37,115,39,41,46,0,95,95,105,109,112,111,114,116,95,95,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,39,63,62,39,46,0,109,111,100,117,108,101,0,82,101,97,99,104,101,100,32,101,110,100,32,111,102,32,37,115,32,119,105,116,104,32,117,110,114,101,115,111,108,118,101,100,32,102,111,114,119,97,114,100,40,115,41,58,0,67,97,110,110,111,116,32,105,109,112,111,114,116,32,39,37,115,39,58,10,0,32,32,32,32,110,111,32,112,114,101,108,111,97,100,101,100,32,112,97,99,107,97,103,101,32,39,37,115,39,0,10,32,32,32,32,110,111,32,102,105,108,101,32,39,37,115,39,0,39,101,120,99,101,112,116,39,32,111,117,116,115,105,100,101,32,39,116,114,121,39,46,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,0,39,114,101,116,117,114,110,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,102,117,110,99,116,105,111,110,46,0,32,40,110,111,32,114,101,116,117,114,110,32,116,121,112,101,32,103,105,118,101,110,41,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,114,101,116,117,114,110,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,37,115,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,110,32,101,110,117,109,32,104,101,114,101,46,0,69,120,112,101,99,116,101,100,32,39,101,110,117,109,39,32,97,102,116,101,114,32,39,115,99,111,112,101,100,39,46,0,65,32,99,108,97,115,115,32,119,105,116,104,32,116,104,101,32,110,97,109,101,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,65,110,32,101,110,117,109,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,116,119,111,32,118,97,114,105,97,110,116,115,46,0,69,120,112,101,99,116,101,100,32,39,125,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,110,111,116,32,39,37,115,39,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,108,97,115,115,32,110,97,109,101,32,40,116,111,111,32,115,104,111,114,116,41,46,0,67,97,110,110,111,116,32,100,101,99,108,97,114,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,0,67,108,97,115,115,32,39,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,0,65,32,98,117,105,108,116,45,105,110,32,99,108,97,115,115,32,110,97,109,101,100,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,0,39,115,116,97,116,105,99,39,32,109,117,115,116,32,102,111,108,108,111,119,32,97,32,115,99,111,112,101,32,40,112,117,98,108,105,99,44,32,112,114,111,116,101,99,116,101,100,44,32,111,114,32,112,114,105,118,97,116,101,41,46,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,104,101,114,101,32,102,111,114,32,105,110,104,101,114,105,116,101,100,32,110,101,119,46,0,65,32,99,108,97,115,115,32,99,97,110,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,105,116,115,101,108,102,33,0,39,37,115,39,32,99,97,110,110,111,116,32,98,101,32,105,110,104,101,114,105,116,101,100,32,102,114,111,109,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,98,114,101,97,107,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,46,0,77,97,116,99,104,32,98,108,111,99,107,32,99,97,110,110,111,116,32,98,101,32,105,110,32,97,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,0,39,109,97,116,99,104,39,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,99,97,115,101,46,0,39,99,97,115,101,39,32,105,110,32,101,120,104,97,117,115,116,105,118,101,32,109,97,116,99,104,46,0,39,101,108,115,101,39,32,105,110,32,101,120,104,97,117,115,116,105,118,101,32,109,97,116,99,104,46,0,77,97,116,99,104,32,97,103,97,105,110,115,116,32,97,32,99,108,97,115,115,32,109,117,115,116,32,104,97,118,101,32,97,110,32,39,101,108,115,101,39,32,99,97,115,101,46,0,77,97,116,99,104,32,112,97,116,116,101,114,110,32,110,111,116,32,101,120,104,97,117,115,116,105,118,101,46,32,84,104,101,32,102,111,108,108,111,119,105,110,103,32,99,97,115,101,40,115,41,32,97,114,101,32,109,105,115,115,105,110,103,58,0,10,42,32,37,115,0,67,108,97,115,115,32,37,115,32,100,111,101,115,32,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,109,97,116,99,104,105,110,103,32,99,108,97,115,115,32,37,115,46,0,65,108,114,101,97,100,121,32,104,97,118,101,32,97,32,99,97,115,101,32,102,111,114,32,99,108,97,115,115,32,37,115,46,0,67,108,97,115,115,32,109,97,116,99,104,105,110,103,32,111,110,108,121,32,119,111,114,107,115,32,102,111,114,32,116,121,112,101,115,32,119,105,116,104,111,117,116,32,103,101,110,101,114,105,99,115,46,0,95,0,69,120,112,101,99,116,101,100,32,39,37,115,46,60,118,97,114,105,97,110,116,62,39,44,32,110,111,116,32,39,37,115,39,32,98,101,99,97,117,115,101,32,39,37,115,39,32,105,115,32,97,32,115,99,111,112,101,100,32,101,110,117,109,46,0,37,115,32,105,115,32,110,111,116,32,97,32,109,101,109,98,101,114,32,111,102,32,101,110,117,109,32,37,115,46,0,65,108,114,101,97,100,121,32,104,97,118,101,32,97,32,99,97,115,101,32,102,111,114,32,118,97,114,105,97,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([116,32,37,115,46,0,39,114,97,105,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,114,97,105,115,101,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,46,0,39,101,108,105,102,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,0,39,101,108,115,101,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,0,39,99,97,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,111,117,116,115,105,100,101,32,111,102,32,39,109,97,116,99,104,39,46,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,46,0,39,101,120,99,101,112,116,39,32,116,121,112,101,32,99,97,110,110,111,116,32,104,97,118,101,32,115,117,98,116,121,112,101,115,46,0,69,120,112,101,99,116,101,100,32,39,97,115,39,44,32,110,111,116,32,39,37,115,39,46,0,76,111,111,112,32,118,97,114,32,109,117,115,116,32,98,101,32,116,121,112,101,32,73,110,116,101,103,101,114,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,0,105,110,0,69,120,112,101,99,116,101,100,32,39,105,110,39,44,32,110,111,116,32,39,37,115,39,46,0,40,102,111,114,32,115,116,97,114,116,41,0,40,102,111,114,32,101,110,100,41,0,98,121,0,69,120,112,101,99,116,101,100,32,39,98,121,39,44,32,110,111,116,32,39,37,115,39,46,0,40,102,111,114,32,115,116,101,112,41,0,70,111,114,32,114,97,110,103,101,32,118,97,108,117,101,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,97,110,32,97,115,115,105,103,110,109,101,110,116,46,0,69,120,112,101,99,116,101,100,32,39,119,104,105,108,101,39,44,32,110,111,116,32,39,37,115,39,46,0,37,115,32,97,102,116,101,114,32,101,108,115,101,32,105,110,32,109,117,108,116,105,45,108,105,110,101,32,105,102,32,98,108,111,99,107,46,0,67,97,110,110,111,116,32,105,110,102,101,114,32,116,121,112,101,32,111,102,32,39,37,115,39,46,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,124,39,44,32,110,111,116,32,39,37,115,39,46,0,79,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,117,115,101,32,108,97,109,98,100,97,115,46,0,115,116,100,111,117,116,0,112,114,105,110,116,0,58,32,37,115,10,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,58,10,0,84,114,97,99,101,98,97,99,107,58,10,0,32,32,32,32,102,114,111,109,32,91,67,93,58,32,105,110,32,37,115,10,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,58,32,105,110,32,37,115,10,0,69,114,114,111,114,0,83,121,110,116,97,120,69,114,114,111,114,0,78,2,66,111,111,108,101,97,110,0,0,109,0,116,111,95,105,0,40,66,111,111,108,101,97,110,41,58,32,73,110,116,101,103,101,114,0,109,0,116,111,95,115,0,40,66,111,111,108,101,97,110,41,58,32,83,116,114,105,110,103,0,78,1,66,121,116,101,0,0,109,0,116,111,95,105,0,40,66,121,116,101,41,58,32,73,110,116,101,103,101,114,0,78,4,66,121,116,101,83,116,114,105,110,103,0,0,109,0,101,97,99,104,95,98,121,116,101,0,40,66,121,116,101,83,116,114,105,110,103,44,70,117,110,99,116,105,111,110,40,66,121,116,101,41,41,0,109,0,101,110,99,111,100,101,0,40,66,121,116,101,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,32,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,109,0,115,105,122,101,0,40,66,121,116,101,83,116,114,105,110,103,41,58,32,73,110,116,101,103,101,114,0,109,0,115,108,105,99,101,0,40,66,121,116,101,83,116,114,105,110,103,44,42,73,110,116,101,103,101,114,44,42,73,110,116,101,103,101,114,41,58,32,66,121,116,101,83,116,114,105,110,103,0,78,1,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,78,1,68,111,117,98,108,101,0,0,109,0,116,111,95,105,0,40,68,111,117,98,108,101,41,58,32,73,110,116,101,103,101,114,0,78,1,68,121,110,97,109,105,99,0,0,109,0,60,110,101,119,62,0,91,65,93,40,65,41,58,32,68,121,110,97,109,105,99,0,78,3,69,120,99,101,112,116,105,111,110,0,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,69,120,99,101,112,116,105,111,110,0,51,0,109,101,115,115,97,103,101,0,83,116,114,105,110,103,0,51,0,116,114,97,99,101,98,97,99,107,0,76,105,115,116,91,83,116,114,105,110,103,93,0,78,7,70,105,108,101,0,0,109,0,99,108,111,115,101,0,40,70,105,108,101,41,0,109,0,101,97,99,104,95,108,105,110,101,0,40,70,105,108,101,44,70,117,110,99,116,105,111,110,40,66,121,116,101,83,116,114,105,110,103,41,41,0,109,0,111,112,101,110,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,70,105,108,101,0,109,0,112,114,105,110,116,0,91,65,93,40,70,105,108,101,44,65,41,0,109,0,114,101,97,100,0,40,70,105,108,101,44,42,73,110,116,101,103,101,114,41,58,32,66,121,116,101,83,116,114,105,110,103,0,109,0,114,101,97,100,95,108,105,110,101,0,40,70,105,108,101,41,58,32,66,121,116,101,83,116,114,105,110,103,0,109,0,119,114,105,116,101,0,91,65,93,40,70,105,108,101,44,65,41,0,78,0,70,117,110,99,116,105,111,110,0,0,78,11,72,97,115,104,0,91,65,44,66,93,0,109,0,99,108,101,97,114,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,0,109,0,100,101,108,101,116,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,41,0,109,0,101,97,99,104,95,112,97,105,114,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,32,66,41,41,0,109,0,103,101,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,44,66,41,58,32,66,0,109,0,104,97,115,95,107,101,121,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,65,41,58,32,66,111,111,108,101,97,110,0,109,0,107,101,121,115,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,58,32,76,105,115,116,91,65,93,0,109,0,109,97,112,95,118,97,108,117,101,115,0,91,65,44,66,44,67,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,66,61,62,67,41,41,58,32,72,97,115,104,91,65,44,67,93,0,109,0,109,101,114,103,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,72,97,115,104,91,65,44,66,93,46,46,46,41,58,32,72,97,115,104,91,65,44,66,93,0,109,0,114,101,106,101,99,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,32,66,61,62,66,111,111,108,101,97,110,41,41,58,32,72,97,115,104,91,65,44,66,93,0,109,0,115,101,108,101,99,116,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,44,70,117,110,99,116,105,111,110,40,65,44,32,66,61,62,66,111,111,108,101,97,110,41,41,58,32,72,97,115,104,91,65,44,66,93,0,109,0,115,105,122,101,0,91,65,44,66,93,40,72,97,115,104,91,65,44,66,93,41,58,32,73,110,116,101,103,101,114,0,78,1,73,110,100,101,120,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,73,110,100,101,120,69,114,114,111,114,0,78,4,73,110,116,101,103,101,114,0,0,109,0,116,111,95,98,111,111,108,0,40,73,110,116,101,103,101,114,41,58,32,66,111,111,108,101,97,110,0,109,0,116,111,95,98,121,116,101,0,40,73,110,116,101,103,101,114,41,58,32,66,121,116,101,0,109,0,116,111,95,100,0,40,73,110,116,101,103,101,114,41,58,32,68,111,117,98,108,101,0,109,0,116,111,95,115,0,40,73,110,116,101,103,101,114,41,58,32,83,116,114,105,110,103,0,78,1,73,79,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,73,79,69,114,114,111,114,0,78,1,75,101,121,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,75,101,121,69,114,114,111,114,0,78,18,76,105,115,116,0,91,65,93,0,109,0,99,108,101,97,114,0,91,65,93,40,76,105,115,116,91,65,93,41,0,109,0,99,111,117,110,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,32,73,110,116,101,103,101,114,0,109,0,100,101,108,101,116,101,95,97,116,0,91,65,93,40,76,105,115,116,91,65,93,44,73,110,116,101,103,101,114,41,0,109,0,101,97,99,104,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,41,41,58,32,76,105,115,116,91,65,93,0,109,0,101,97,99,104,95,105,110,100,101,120,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,73,110,116,101,103,101,114,41,41,58,32,76,105,115,116,91,65,93,0,109,0,102,111,108,100,0,91,65,93,40,76,105,115,116,91,65,93,44,65,44,70,117,110,99,116,105,111,110,40,65,44,32,65,61,62,65,41,41,58,32,65,0,109,0,105,110,115,101,114,116,0,91,65,93,40,76,105,115,116,91,65,93,44,73,110,116,101,103,101,114,44,65,41,0,109,0,106,111,105,110,0,91,65,93,40,76,105,115,116,91,65,93,44,42,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,109,97,112,0,91,65,44,66,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,32,76,105,115,116,91,66,93,0,109,0,112,111,112,0,91,65,93,40,76,105,115,116,91,65,93,41,58,32,65,0,109,0,112,117,115,104,0,91,65,93,40,76,105,115,116,91,65,93,44,65,41,0,109,0,114,101,106,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,32,76,105,115,116,91,65,93,0,109,0,114,101,112,101,97,116,0,91,65,93,40,73,110,116,101,103,101,114,44,65,41,58,32,76,105,115,116,91,65,93,0,109,0,115,101,108,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,111,111,108,101,97,110,41,41,58,32,76,105,115,116,91,65,93,0,109,0,115,105,122,101,0,91,65,93,40,76,105,115,116,91,65,93,41,58,32,73,110,116,101,103,101,114,0,109,0,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,41,58,32,65,0,109,0,115,108,105,99,101,0,91,65,93,40,76,105,115,116,91,65,93,44,42,73,110,116,101,103,101,114,44,42,73,110,116,101,103,101,114,41,58,32,76,105,115,116,91,65,93,0,109,0,117,110,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,44,65,41,0,69,10,79,112,116,105,111,110,0,91,65,93,0,109,0,97,110,100,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,66,93,41,58,32,79,112,116,105,111,110,91,66,93,0,109,0,97,110,100,95,116,104,101,110,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,79,112,116,105,111,110,91,66,93,41,41,58,32,79,112,116,105,111,110,91,66,93,0,109,0,105,115,95,110,111,110,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,32,66,111,111,108,101,97,110,0,109,0,105,115,95,115,111,109,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,32,66,111,111,108,101,97,110,0,109,0,109,97,112,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,61,62,66,41,41,58,32,79,112,116,105,111,110,91,66,93,0,109,0,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,65,93,41,58,32,79,112,116,105,111,110,91,65,93,0,109,0,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,61,62,79,112,116,105,111,110,91,65,93,41,41,58,32,79,112,116,105,111,110,91,65,93,0,109,0,117,110,119,114,97,112,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,32,65,0,109,0,117,110,119,114,97,112,95,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,65,41,58,32,65,0,109,0,117,110,119,114,97,112,95,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,61,62,65,41,41,58,32,65,0,86,0,83,111,109,101,0,40,65,41,0,86,0,78,111,110,101,0,0,69,4,82,101,115,117,108,116,0,91,65,44,66,93,0,109,0,102,97,105,108,117,114,101,0,91,65,44,66,93,40,82,101,115,117,108,116,91,65,44,66,93,41,58,32,79,112,116,105,111,110,91,65,93,0,109,0,105,115,95,102,97,105,108,117,114,101,0,91,65,44,66,93,40,82,101,115,117,108,116,91,65,44,66,93,41,58,32,66,111,111,108,101,97,110,0,109,0,105,115,95,115,117,99,99,101,115,115,0,91,65,44,66,93,40,82,101,115,117,108,116,91,65,44,66,93,41,58,32,66,111,111,108,101,97,110,0,109,0,115,117,99,99,101,115,115,0,91,65,44,66,93,40,82,101,115,117,108,116,91,65,44,66,93,41,58,32,79,112,116,105,111,110,91,66,93,0,86,0,70,97,105,108,117,114,101,0,40,65,41,0,86,0,83,117,99,99,101,115,115,0,40,66,41,0,78,1,82,117,110,116,105,109,101,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,82,117,110,116,105,109,101,69,114,114,111,114,0,78,20,83,116,114,105,110,103,0,0,109,0,102,111,114,109,97,116,0,40,83,116,114,105,110,103,44,36,49,46,46,46,41,58,32,83,116,114,105,110,103,0,109,0,101,110,100,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,66,111,111,108,101,97,110,0,109,0,102,105,110,100,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,44,42,73,110,116,101,103,101,114,41,58,32,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,109,0,104,116,109,108,95,101,110,99,111,100,101,0,40,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,105,115,95,97,108,110,117,109,0,40,83,116,114,105,110,103,41,58,32,66,111,111,108,101,97,110,0,109,0,105,115,95,97,108,112,104,97,0,40,83,116,114,105,110,103,41,58,32,66,111,111,108,101,97,110,0,109,0,105,115,95,100,105,103,105,116,0,40,83,116,114,105,110,103,41,58,32,66,111,111,108,101,97,110,0,109,0,105,115,95,115,112,97,99,101,0,40,83,116,114,105,110,103,41,58,32,66,111,111,108,101,97,110,0,109,0,108,111,119,101,114,0,40,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,108,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,112,97,114,115,101,95,105,0,40,83,116,114,105,110,103,41,58,32,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,109,0,114,101,112,108,97,99,101,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,114,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,115,108,105,99,101,0,40,83,116,114,105,110,103,44,42,73,110,116,101,103,101,114,44,42,73,110,116,101,103,101,114,41,58,32,83,116,114,105,110,103,0,109,0,115,112,108,105,116,0,40,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,32,76,105,115,116,91,83,116,114,105,110,103,93,0,109,0,115,116,97,114,116,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,66,111,111,108,101,97,110,0,109,0,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,116,111,95,98,121,116,101,115,116,114,105,110,103,0,40,83,116,114,105,110,103,41,58,32,66,121,116,101,83,116,114,105,110,103,0,109,0,116,114,105,109,0,40,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,109,0,117,112,112,101,114,0,40,83,116,114,105,110,103,41,58,32,83,116,114,105,110,103,0,78,0,84,117,112,108,101,0,0,78,1,86,97,108,117,101,69,114,114,111,114,0,60,32,69,120,99,101,112,116,105,111,110,0,109,0,60,110,101,119,62,0,40,83,116,114,105,110,103,41,58,32,86,97,108,117,101,69,114,114,111,114,0,70,0,112,114,105,110,116,0,91,65,93,40,65,41,0,70,0,99,97,108,108,116,114,97,99,101,0,58,32,76,105,115,116,91,83,116,114,105,110,103,93,0,82,0,115,116,100,105,110,0,70,105,108,101,0,82,0,115,116,100,101,114,114,0,70,105,108,101,0,82,0,115,116,100,111,117,116,0,70,105,108,101,0,115,101,108,102,0,85,110,105,116,0,63,0,101,114,114,111,114,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,255,255,255,255,255,255,255,255,255,255,255,73,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,32,103,105,118,101,110,46,0,69,114,114,110,111,32,37,100,58,32,37,115,32,40,37,115,41,46,0,67,97,110,110,111,116,32,114,101,109,111,118,101,32,107,101,121,32,102,114,111,109,32,104,97,115,104,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,46,0,67,97,110,110,111,116,32,100,101,108,101,116,101,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,73,110,100,101,120,32,37,108,100,32,105,115,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,108,105,115,116,32,40,109,105,110,105,109,117,109,58,32,37,108,100,41,0,73,110,100,101,120,32,37,108,100,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,115,116,32,40,109,97,120,105,109,117,109,58,32,37,108,100,41,0,80,111,112,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,82,101,112,101,97,116,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,62,61,32,48,32,40,37,108,100,32,103,105,118,101,110,41,46,0,83,104,105,102,116,32,111,110,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,0,117,110,119,114,97,112,32,99,97,108,108,101,100,32,111,110,32,78,111,110,101,46,0,70,111,114,109,97,116,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,46,46,46,57,57,46,0,70,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,115,32,101,109,112,116,121,46,0,70,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,115,32,110,111,116,32,110,117,109,101,114,105,99,46,0,70,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,115,32,116,111,111,32,108,97,114,103,101,46,0,67,97,110,110,111,116,32,115,112,108,105,116,32,98,121,32,101,109,112,116,121,32,115,116,114,105,110,103,46,0,32,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,32,9,13,10,0,119,0,114,0,73,110,116,101,103,101,114,0,68,111,117,98,108,101,0,83,116,114,105,110,103,0,66,121,116,101,0,66,121,116,101,83,116,114,105,110,103,0,66,111,111,108,101,97,110,0,70,117,110,99,116,105,111,110,0,68,121,110,97,109,105,99,0,76,105,115,116,0,72,97,115,104,0,84,117,112,108,101,0,70,105,108,101,0,36,49,0,36,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,0,1,2,3,5,8,7,1,1,1,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,65,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,0,32,105,115,32,105,110,118,97,108,105,100,58,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,0,37,115,46,37,115,0,37,115,0,40,97,110,111,110,121,109,111,117,115,41,0,67,97,108,108,32,116,111,32,0,32,105,115,32,109,105,115,115,105,110,103,32,112,97,114,97,109,101,116,101,114,115,58,0,10,42,32,80,97,114,97,109,101,116,101,114,32,35,37,100,32,40,58,37,115,41,32,111,102,32,116,121,112,101,32,94,84,46,0,10,42,32,80,97,114,97,109,101,116,101,114,32,35,37,100,32,111,102,32,116,121,112,101,32,94,84,46,0,80,111,115,105,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,97,102,116,101,114,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,46,0,32,104,97,115,32,109,117,108,116,105,112,108,101,32,118,97,108,117,101,115,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32,39,58,37,115,39,46,0,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,107,101,121,119,111,114,100,32,110,97,109,101,100,32,39,58,37,115,39,46,0,32,100,111,101,115,32,110,111,116,32,115,112,101,99,105,102,121,32,97,110,121,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,46,0,32,105,115,32,110,111,116,32,99,97,112,97,98,108,101,32,111,102,32,114,101,99,101,105,118,105,110,103,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,46,0,110,111,110,101,0,46,46,0,43,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,0,32,40,37,115,32,102,111,114,32,37,115,37,115,37,115,41,46,0,86,97,114,105,97,110,116,32,37,115,32,115,104,111,117,108,100,32,110,111,116,32,103,101,116,32,97,114,103,115,46,0,67,97,110,110,111,116,32,97,110,111,110,121,109,111,117,115,108,121,32,99,97,108,108,32,114,101,115,117,108,116,105,110,103,32,116,121,112,101,32,39,94,84,39,46,0,37,115,32,105,115,32,97,32,112,114,105,118,97,116,101,32,109,101,109,98,101,114,32,111,102,32,99,108,97,115,115,32,37,115,44,32,97,110,100,32,110,111,116,32,118,105,115,105,98,108,101,32,104,101,114,101,46,0,67,108,97,115,115,32,37,115,32,104,97,115,32,110,111,32,109,101,116,104,111,100,32,111,114,32,112,114,111,112,101,114,116,121,32,110,97,109,101,100,32,37,115,46,0,85,115,101,32,64,60,110,97,109,101,62,32,116,111,32,103,101,116,47,115,101,116,32,112,114,111,112,101,114,116,105,101,115,44,32,110,111,116,32,115,101,108,102,46,60,110,97,109,101,62,46,0,112,114,105,118,97,116,101,0,112,114,111,116,101,99,116,101,100,0,37,115,46,37,115,32,105,115,32,109,97,114,107,101,100,32,37,115,44,32,97,110,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,104,101,114,101,46,0,78,111,116,32,97,108,108,111,119,101,100,32,116,111,32,99,108,111,115,101,32,111,118,101,114,32,115,101,108,102,32,105,110,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,83,116,97,116,105,99,32,109,101,116,104,111,100,115,32,100,111,32,110,111,116,32,104,97,118,101,32,97,99,99,101,115,115,32,116,111,32,115,101,108,102,46,0,76,97,109,98,100,97,115,32,99,97,110,110,111,116,32,114,101,116,117,114,110,32,116,104,101,32,115,101,108,102,32,116,121,112,101,32,40,110,111,116,32,97,32,99,108,97,115,115,32,109,101,116,104,111,100,41,46,0,73,110,118,97,108,105,100,32,117,115,101,32,111,102,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,112,114,111,112,101,114,116,121,32,39,64,37,115,39,46,0,67,97,110,110,111,116,32,99,97,115,116,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,0,37,115,32,105,110,100,101,120,32,105,115,32,110,111,116,32,97,110,32,73,110,116,101,103,101,114,46,0,72,97,115,104,32,105,110,100,101,120,32,115,104,111,117,108,100,32,98,101,32,116,121,112,101,32,39,94,84,39,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,0,84,117,112,108,101,32,115,117,98,115,99,114,105,112,116,115,32,109,117,115,116,32,98,101,32,73,110,116,101,103,101,114,32,108,105,116,101,114,97,108,115,46,0,73,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,94,84,46,0,67,97,110,110,111,116,32,115,117,98,115,99,114,105,112,116,32,116,121,112,101,32,39,94,84,39,46,0,67,97,110,110,111,116,32,99,114,101,97,116,101,32,97,110,32,101,109,112,116,121,32,84,117,112,108,101,46,0,72,97,115,104,32,107,101,121,115,0,72,97,115,104,32,118,97,108,117,101,115,0,84,121,112,101,32,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,107,101,121,32,102,111,114,32,72,97,115,104,46,0,37,115,32,100,111,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,105,115,116,101,110,116,32,116,121,112,101,46,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,0,76,105,115,116,32,101,108,101,109,101,110,116,115,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,37,115,37,115,46,0,43,43,0,45,0,61,61,0,60,0,60,61,0,62,0,62,61,0,33,61,0,37,0,47,0,60,60,0,62,62,0,38,0,124,0,94,0,33,0,126,0,38,38,0,124,124,0,124,62,0,61,0,43,61,0,45,61,0,37,61,0,42,61,0,47,61,0,60,60,61,0,62,62,61,0,38,61,0,124,61,0,94,61,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,94,84,32,37,115,32,94,84,46,0,76,101,102,116,32,115,105,100,101,32,111,102,32,37,115,32,105,115,32,110,111,116,32,97,115,115,105,103,110,97,98,108,101,46,0,67,97,110,110,111,116,32,110,101,115,116,32,97,110,32,97,115,115,105,103,110,109,101,110,116,32,119,105,116,104,105,110,32,97,110,32,101,120,112,114,101,115,115,105,111,110,46,0,73,110,118,97,108,105,100,32,99,111,109,112,111,117,110,100,32,111,112,58,32,37,115,46,0,67,97,110,110,111,116,32,97,115,115,105,103,110,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,0,82,105,103,104,116,32,115,105,100,101,32,111,102,32,97,115,115,105,103,110,109,101,110,116,32,105,115,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,32,39,94,84,39,46,0,67,97,110,110,111,116,32,99,108,111,115,101,32,111,118,101,114,32,97,32,118,97,114,32,111,102,32,97,110,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,32,105,110,32,116,104,105,115,32,115,99,111,112,101,46,0,78,111,116,32,97,108,108,111,119,101,100,32,116,111,32,99,108,111,115,101,32,111,118,101,114,32,118,97,114,105,97,98,108,101,115,32,102,114,111,109,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0,39,98,114,101,97,107,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,0,39,99,111,110,116,105,110,117,101,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,0,77,105,115,115,105,110,103,32,114,101,116,117,114,110,32,115,116,97,116,101,109,101,110,116,32,97,116,32,101,110,100,32,111,102,32,102,117,110,99,116,105,111,110,46,0,39,125,39,32,111,117,116,115,105,100,101,32,111,102,32,97,32,98,108,111,99,107,46,0,39,101,120,99,101,112,116,39,32,99,108,97,117,115,101,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,46,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,97,32,117,115,101,114,32,99,108,97,115,115,44,32,101,110,117,109,44,32,111,114,32,68,121,110,97,109,105,99,46,0,69,120,112,101,99,116,101,100,32,116,121,112,101,32,39,73,110,116,101,103,101,114,39,44,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,0,67,111,110,100,105,116,105,111,110,97,108,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,94,84,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,32,116,121,112,101,46,0,39,114,101,116,117,114,110,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,114,101,116,117,114,110,32,101,120,112,101,99,116,101,100,32,116,121,112,101,32,39,94,84,39,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,0,39,114,97,105,115,101,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,0,73,110,118,97,108,105,100,32,99,108,97,115,115,32,39,37,115,39,32,103,105,118,101,110,32,116,111,32,114,97,105,115,101,46,0,37,48,51,100,0,37,112,0,32,40,0,44,32,0,42,0,46,46,46,0,41,0,32,61,62,32,0,91,0,93,0,37,108,108,100,0,37,100,0,91,46,46,46,93,0,98,117,105,108,116,45,105,110,32,0,60,37,115,102,117,110,99,116,105,111,110,32,37,115,62,0,60,91,0,93,62,0,117,110,105,116,0,111,112,101,110,0,99,108,111,115,101,100,0,60,37,115,32,102,105,108,101,32,97,116,32,37,112,62,0,40,0,60,37,115,32,97,116,32,37,112,62,0,37,103,0,39,92,37,99,39,0,39,37,99,39,0,39,92,37,48,51,100,39,0,102,97,108,115,101,0,116,114,117,101,0,38,97,109,112,59,0,38,108,116,59,0,38,103,116,59,0,1,82,97,110,100,111,109,0,0,67,2,82,97,110,100,111,109,0,0,109,0,60,110,101,119,62,0,40,42,73,110,116,101,103,101,114,41,58,32,82,97,110,100,111,109,0,109,0,98,101,116,119,101,101,110,0,40,82,97,110,100,111,109,44,73,110,116,101,103,101,114,44,73,110,116,101,103,101,114,41,58,32,73,110,116,101,103,101,114,0,90,0,73,110,116,101,114,118,97,108,32,114,97,110,103,101,32,105,115,32,101,109,112,116,121,46,0,91,116,114,121,105,116,93,0,105,110,102,105,110,105,116,121,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

   

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (lib.cached_functions.hasOwnProperty(symbol)) {
          return lib.cached_functions[symbol];
        }
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result == 'function') {
            result = Runtime.addFunction(result);
            //Module.printErr('adding function dlsym result for ' + symbol + ' => ' + result);
            lib.cached_functions = result;
          }
          return result;
        }
      }
    }

   

   

  function _abort() {
      Module['abort']();
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___lock() {}

  function ___unlock() {}

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

   

  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   

   

  
   function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

   

  function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function _dlopen(filename, flag) {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/kripken/emscripten/wiki/Linking");
      // void *dlopen(const char *file, int mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
      var searchpaths = [];
      if (filename === 0) {
        filename = '__self__';
      } else {
        var strfilename = Pointer_stringify(filename);
        var isValidFile = function (filename) {
          var target = FS.findObject(filename);
          return target && !target.isFolder && !target.isDevice;
        };
  
        if (isValidFile(strfilename)) {
          filename = strfilename;
        } else {
          if (ENV['LD_LIBRARY_PATH']) {
            searchpaths = ENV['LD_LIBRARY_PATH'].split(':');
          }
  
          for (var ident in searchpaths) {
            var searchfile = PATH.join2(searchpaths[ident],strfilename);
            if (isValidFile(searchfile)) {
              filename = searchfile;
              break;
            }
          }
        }
      }
  
      if (DLFCN.loadedLibNames[filename]) {
        // Already loaded; increment ref count and return.
        var handle = DLFCN.loadedLibNames[filename];
        DLFCN.loadedLibs[handle].refcount++;
        return handle;
      }
  
      if (filename === '__self__') {
        var handle = -1;
        var lib_module = Module;
        var cached_functions = {};
      } else {
        var target = FS.findObject(filename);
        if (!target || target.isFolder || target.isDevice) {
          DLFCN.errorMsg = 'Could not find dynamic lib: ' + filename;
          return 0;
        }
        FS.forceLoadFile(target);
  
        var lib_module;
        try {
          // the shared library is a JS file, which we eval
          var lib_data = FS.readFile(filename, { encoding: 'utf8' });
          lib_module = eval(lib_data)(
            Runtime.alignFunctionTables(),
            Module
          );
        } catch (e) {
          DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename + '\n' + e;
          return 0;
        }
  
        // Not all browsers support Object.keys().
        var handle = 1;
        for (var key in DLFCN.loadedLibs) {
          if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
        }
  
        // We don't care about RTLD_NOW and RTLD_LAZY.
        if (flag & 256) { // RTLD_GLOBAL
          for (var ident in lib_module) {
            if (lib_module.hasOwnProperty(ident)) {
              // When RTLD_GLOBAL is enable, the symbols defined by this shared object will be made
              // available for symbol resolution of subsequently loaded shared objects.
              //
              // We should copy the symbols (which include methods and variables) from SIDE_MODULE to MAIN_MODULE.
              //
              // Module of SIDE_MODULE has not only the symbols (which should be copied)
              // but also others (print*, asmGlobal*, FUNCTION_TABLE_**, NAMED_GLOBALS, and so on).
              //
              // When the symbol (which should be copied) is method, Module._* 's type becomes function.
              // When the symbol (which should be copied) is variable, Module._* 's type becomes number.
              //
              // Except for the symbol prefix (_), there is no difference in the symbols (which should be copied) and others.
              // So this just copies over compiled symbols (which start with _).
              if (ident[0] == '_') {
                Module[ident] = lib_module[ident];
              }
            }
          }
        }
  
        var cached_functions = {};
      }
      DLFCN.loadedLibs[handle] = {
        refcount: 1,
        name: filename,
        module: lib_module,
        cached_functions: cached_functions
      };
      DLFCN.loadedLibNames[filename] = handle;
  
      return handle;
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  
    

   

   


   

   

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "_dlsym": _dlsym, "_abort": _abort, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "__addDays": __addDays, "_localtime_r": _localtime_r, "_tzset": _tzset, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_mktime": _mktime, "_strftime": _strftime, "_clock": _clock, "__arraySum": __arraySum, "_getenv": _getenv, "_dlopen": _dlopen, "___syscall54": ___syscall54, "___unlock": ___unlock, "_dlclose": _dlclose, "__isLeapYear": __isLeapYear, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "___syscall140": ___syscall140, "_localtime": _localtime, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var _dlsym=env._dlsym;
  var _abort=env._abort;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var __addDays=env.__addDays;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _mktime=env._mktime;
  var _strftime=env._strftime;
  var _clock=env._clock;
  var __arraySum=env.__arraySum;
  var _getenv=env._getenv;
  var _dlopen=env._dlopen;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _dlclose=env._dlclose;
  var __isLeapYear=env.__isLeapYear;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var ___syscall140=env.___syscall140;
  var _localtime=env._localtime;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _lily_new_expr_state() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(44)|0);
 $1 = (_lily_malloc(48)|0);
 $2 = ((($1)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = (_lily_malloc(48)|0);
 $4 = ((($3)) + 44|0);
 HEAP32[$4>>2] = $1;
 $5 = (_lily_malloc(48)|0);
 $6 = ((($5)) + 44|0);
 HEAP32[$6>>2] = $3;
 $7 = (_lily_malloc(48)|0);
 $8 = ((($7)) + 44|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($0)) + 28|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 32|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 36|0);
 HEAP32[$11>>2] = 1;
 _grow_checkpoints($0);
 $12 = ((($0)) + 12|0);
 HEAP32[$12>>2] = $7;
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $7;
 $14 = ((($0)) + 16|0);
 HEAP32[$0>>2] = 0;
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = 0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP16[$14+8>>1]=0|0;
 _add_save_entry($0);
 return ($0|0);
}
function _grow_checkpoints($0) {
 $0 = $0|0;
 var $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $2 << 3;
 $7 = (_lily_realloc($5,$6)|0);
 HEAP32[$4>>2] = $7;
 $8 = ((($0)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 if ($11) {
  $$013 = $9;
 } else {
  return;
 }
 while(1) {
  $12 = (_lily_malloc(20)|0);
  $13 = HEAP32[$4>>2]|0;
  $14 = (($13) + ($$013<<2)|0);
  HEAP32[$14>>2] = $12;
  $15 = (($$013) + 1)|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = ($15>>>0)<($16>>>0);
  if ($17) {
   $$013 = $15;
  } else {
   break;
  }
 }
 return;
}
function _add_save_entry($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(20)|0);
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$2>>2] = $1;
  $$sink = 0;
 } else {
  $5 = ((($3)) + 12|0);
  HEAP32[$5>>2] = $1;
  $6 = HEAP32[$2>>2]|0;
  $$sink = $6;
 }
 $7 = ((($1)) + 16|0);
 HEAP32[$7>>2] = $$sink;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function _lily_free_expr_state($0) {
 $0 = $0|0;
 var $$028 = 0, $$032 = 0, $$133 = 0, $$in2935 = 0, $$lcssa = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = ((($0)) + 12|0);
  $$sink = $7;
 } else {
  $4 = ((($0)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $$sink = $6;
 }
 $8 = HEAP32[$$sink>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$in2935 = $8;
  while(1) {
   $10 = ((($$in2935)) + 44|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_free($$in2935);
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   } else {
    $$in2935 = $11;
   }
  }
 }
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $$028 = $14;
 while(1) {
  $15 = ((($$028)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   break;
  } else {
   $$028 = $16;
  }
 }
 $18 = ($$028|0)==(0|0);
 if (!($18)) {
  $$133 = $$028;
  while(1) {
   $24 = ((($$133)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   _lily_free($$133);
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   } else {
    $$133 = $25;
   }
  }
 }
 $19 = ((($0)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 $22 = ((($0)) + 28|0);
 $23 = HEAP32[$22>>2]|0;
 if ($21) {
  $$lcssa = $23;
  _lily_free($$lcssa);
  _lily_free($0);
  return;
 } else {
  $$032 = 0;$28 = $23;
 }
 while(1) {
  $27 = (($28) + ($$032<<2)|0);
  $29 = HEAP32[$27>>2]|0;
  _lily_free($29);
  $30 = (($$032) + 1)|0;
  $31 = HEAP32[$19>>2]|0;
  $32 = ($30>>>0)<($31>>>0);
  $33 = HEAP32[$22>>2]|0;
  if ($32) {
   $$032 = $30;$28 = $33;
  } else {
   $$lcssa = $33;
   break;
  }
 }
 _lily_free($$lcssa);
 _lily_free($0);
 return;
}
function _lily_es_flush($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 22|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($0)) + 24|0);
 HEAP16[$7>>1] = $6;
 return;
}
function _lily_es_checkpoint_save($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  _grow_checkpoints($0);
 }
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($10)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($10)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 22|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ((($10)) + 4|0);
 HEAP16[$18>>1] = $17;
 $19 = ((($0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$10>>2] = $20;
 HEAP32[$13>>2] = 0;
 HEAP32[$0>>2] = 0;
 $21 = ((($0)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$19>>2] = $22;
 $23 = (($8) + 1)|0;
 HEAP32[$1>>2] = $23;
 return;
}
function _lily_es_checkpoint_restore($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$0>>2] = $9;
 $10 = ((($7)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($7)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($0)) + 22|0);
 HEAP16[$15>>1] = $14;
 $16 = HEAP32[$7>>2]|0;
 $17 = ((($0)) + 12|0);
 HEAP32[$17>>2] = $16;
 return;
}
function _lily_es_checkpoint_reverse_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02427 = 0, $$02526 = 0, $$028 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = (($4) - ($1))|0;
 $6 = (($5) + 1)|0;
 $7 = (($3) - ($6))|0;
 $$off = (($7) + 1)|0;
 $8 = ($$off>>>0)<(3);
 if ($8) {
  return;
 }
 $9 = (($7|0) / 2)&-1;
 $10 = ((($0)) + 28|0);
 $$02427 = $9;$$02526 = $6;$$028 = $4;
 while(1) {
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($$02526<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + ($$028<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$12>>2] = $15;
  $16 = HEAP32[$10>>2]|0;
  $17 = (($16) + ($$028<<2)|0);
  HEAP32[$17>>2] = $13;
  $18 = (($$02427) + -1)|0;
  $19 = (($$02526) + 1)|0;
  $20 = (($$028) + -1)|0;
  $21 = ($18|0)==(0);
  if ($21) {
   break;
  } else {
   $$02427 = $18;$$02526 = $19;$$028 = $20;
  }
 }
 return;
}
function _lily_es_collect_arg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 _push_tree_arg($4,$5);
 HEAP32[$0>>2] = 0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = 0;
 return;
}
function _push_tree_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$sink = $3;
 } else {
  $$0 = $4;
  while(1) {
   $6 = ((($$0)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$sink = $6;
    break;
   } else {
    $$0 = $7;
   }
  }
 }
 HEAP32[$$sink>>2] = $1;
 $9 = ((($1)) + 36|0);
 HEAP32[$9>>2] = $0;
 $10 = ((($1)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 22|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (($12) + 1)<<16>>16;
 HEAP16[$11>>1] = $13;
 return;
}
function _lily_es_enter_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 $10 = $1&255;
 HEAP8[$9>>0] = $10;
 $11 = ((($3)) + 40|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($3)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($3)) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($3)) + 22|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($3)) + 32|0);
 HEAP32[$18>>2] = 0;
 HEAP32[$3>>2] = 0;
 _merge_value($0,$3);
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$0 = $20;
 } else {
  $24 = ((($20)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   _add_save_entry($0);
  }
  $27 = HEAP32[$19>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$19>>2] = $29;
  $$0 = $29;
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = ((($$0)) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($0)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$$0>>2] = $33;
 $34 = ((($$0)) + 8|0);
 HEAP32[$34>>2] = $3;
 $35 = ((($0)) + 20|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = (($36) + 1)<<16>>16;
 HEAP16[$35>>1] = $37;
 HEAP32[$0>>2] = 0;
 HEAP32[$32>>2] = 0;
 return;
}
function _add_new_tree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(48)|0);
 $2 = ((($1)) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 HEAP32[$5>>2] = $1;
 return;
}
function _merge_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$0>>2] = $1;
  HEAP32[$2>>2] = $1;
  return;
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 switch ($6<<24>>24) {
 case 28:  {
  $7 = ((($3)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   HEAP32[$7>>2] = $1;
   $10 = ((($1)) + 36|0);
   HEAP32[$10>>2] = $3;
   return;
  }
  $11 = ((($8)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(9);
  if ($13) {
   _merge_unary($0,$8,$1);
   return;
  } else {
   _merge_absorb($0,$8,$1);
   HEAP32[$7>>2] = $1;
   $14 = ((($1)) + 36|0);
   HEAP32[$14>>2] = $3;
   return;
  }
  break;
 }
 case 9:  {
  _merge_unary($0,$3,$1);
  return;
  break;
 }
 default: {
  _merge_absorb($0,$3,$1);
  return;
 }
 }
}
function _lily_es_leave_tree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 _push_tree_arg($4,$5);
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($10)) + 8|0);
  HEAP32[$14>>2] = 0;
 } else {
  HEAP32[$1>>2] = $12;
 }
 $15 = ((($0)) + 20|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (($16) + -1)<<16>>16;
 HEAP16[$15>>1] = $17;
 return;
}
function _lily_es_get_saved_tree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_es_push_binary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 28;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = (_priority_for_op($1)|0);
 $17 = ((($3)) + 12|0);
 HEAP8[$17>>0] = $16;
 $18 = $1&255;
 HEAP8[$8>>0] = $18;
 $19 = ((($3)) + 28|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($3)) + 32|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($0)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24&255)<(28);
 do {
  if ($25) {
   $26 = HEAP32[$0>>2]|0;
   $27 = ($26|0)==($22|0);
   if ($27) {
    HEAP32[$0>>2] = $3;
   }
   $28 = ((($22)) + 36|0);
   HEAP32[$28>>2] = $3;
   HEAP32[$19>>2] = $22;
  } else {
   $29 = ($24<<24>>24)==(28);
   if (!($29)) {
    return;
   }
   $30 = HEAP8[$17>>0]|0;
   $31 = ((($22)) + 12|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($30&255)>($32&255);
   $34 = ($30<<24>>24)==(1);
   $or$cond = $34 | $33;
   if ($or$cond) {
    $35 = ((($22)) + 32|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP32[$19>>2] = $36;
    $37 = ((($36)) + 36|0);
    HEAP32[$37>>2] = $3;
    HEAP32[$35>>2] = $3;
    HEAP32[$15>>2] = $22;
    break;
   } else {
    $$0 = $22;
   }
   while(1) {
    $38 = ((($$0)) + 36|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     label = 13;
     break;
    }
    $41 = ((($39)) + 12|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = ($30&255)>($42&255);
    if ($43) {
     label = 12;
     break;
    } else {
     $$0 = $39;
    }
   }
   if ((label|0) == 12) {
    $44 = ((($39)) + 32|0);
    HEAP32[$44>>2] = $3;
    HEAP32[$15>>2] = $39;
   }
   else if ((label|0) == 13) {
    HEAP32[$0>>2] = $3;
   }
   HEAP32[$19>>2] = $$0;
   HEAP32[$38>>2] = $3;
  }
 } while(0);
 HEAP32[$21>>2] = $3;
 return;
}
function _priority_for_op($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 30: case 29: case 25: case 24: case 27: case 28: case 23:  {
   $$0 = 1;
   break;
  }
  case 21:  {
   $$0 = 2;
   break;
  }
  case 20:  {
   $$0 = 3;
   break;
  }
  case 7: case 5: case 6: case 4: case 8: case 3:  {
   $$0 = 4;
   break;
  }
  case 1:  {
   $$0 = 5;
   break;
  }
  case 22:  {
   $$0 = 6;
   break;
  }
  case 14: case 16: case 15:  {
   $$0 = 7;
   break;
  }
  case 13: case 12:  {
   $$0 = 8;
   break;
  }
  case 2: case 0:  {
   $$0 = 9;
   break;
  }
  case 9: case 11: case 10:  {
   $$0 = 10;
   break;
  }
  case 34:  {
   $$0 = 0;
   break;
  }
  default: {
   $$0 = -1;
  }
  }
 } while(0);
 return ($$0|0);
}
function _lily_es_enter_typecast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_es_enter_tree($0,11);
 _push_type($0,$1);
 _lily_es_collect_arg($0);
 return;
}
function _push_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 10;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_unary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 9;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $1&255;
 HEAP8[$8>>0] = $17;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_local_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 5;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$3>>2] = $1;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_global_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 7;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$3>>2] = $1;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_upvalue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 21;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_defined_func($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 6;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$3>>2] = $1;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 18;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$3>>2] = $1;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_static_func($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 19;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$3>>2] = $1;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_inherited_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 17;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$3>>2] = $1;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_literal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _add_new_tree($0);
 }
 $8 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $8;
 $9 = ((($4)) + 8|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($4)) + 4|0);
 HEAP8[$10>>0] = 16;
 $11 = ((($4)) + 40|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($4)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($4)) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($4)) + 28|0);
 HEAP32[$17>>2] = $1;
 $18 = ((($4)) + 24|0);
 HEAP16[$18>>1] = $2;
 _merge_value($0,$4);
 return;
}
function _lily_es_push_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 22;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 24|0);
 HEAP16[$16>>1] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 23;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = $1&255;
 $17 = ((($3)) + 24|0);
 HEAP16[$17>>1] = $16;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 24;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 24|0);
 HEAP16[$16>>1] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 13;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_new_tree($0);
 }
 $7 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($3)) + 8|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($3)) + 4|0);
 HEAP8[$9>>0] = 14;
 $10 = ((($3)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 28|0);
 HEAP32[$16>>2] = $1;
 _merge_value($0,$3);
 return;
}
function _lily_es_push_self($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _add_new_tree($0);
 }
 $6 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($2)) + 8|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($2)) + 4|0);
 HEAP8[$8>>0] = 20;
 $9 = ((($2)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($2)) + 36|0);
 HEAP32[$14>>2] = 0;
 _merge_value($0,$2);
 return;
}
function _lily_es_push_text($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _add_new_tree($0);
 }
 $9 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($5)) + 8|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($5)) + 4|0);
 $12 = $1&255;
 HEAP8[$11>>0] = $12;
 $13 = ((($5)) + 40|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($5)) + 16|0);
 $15 = ((($5)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 24|0);
 HEAP32[$16>>2] = $3;
 HEAP32[$14>>2] = $2;
 _merge_value($0,$5);
 return;
}
function _merge_unary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ((($$0)) + 4|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(9);
  if (!($5)) {
   label = 4;
   break;
  }
  $6 = ((($$0)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   label = 4;
   break;
  }
  $11 = ((($7)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(9);
  $14 = ((($$0)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  if ($13) {
   $$0 = $15;
  } else {
   $16 = $15;$18 = $14;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = ((($$0)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $16 = $10;$18 = $9;
 }
 $17 = ($16|0)==(0|0);
 if ($17) {
  HEAP32[$18>>2] = $2;
  $19 = ((($2)) + 36|0);
  HEAP32[$19>>2] = $$0;
  return;
 }
 _merge_absorb($0,$16,$2);
 HEAP32[$18>>2] = $2;
 $19 = ((($2)) + 36|0);
 HEAP32[$19>>2] = $$0;
 return;
}
function _merge_absorb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if ($5) {
  HEAP32[$3>>2] = $2;
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==($1|0);
  if ($7) {
   HEAP32[$0>>2] = $2;
  }
 }
 $8 = ((($1)) + 36|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($2)) + 32|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($2)) + 22|0);
 HEAP16[$10>>1] = 1;
 $11 = ((($2)) + 40|0);
 HEAP32[$11>>2] = 0;
 return;
}
function _lily_new_value_stack() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _lily_vs_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  $8 = $6 << 3;
  $9 = $6 << 1;
  HEAP32[$5>>2] = $9;
  $10 = HEAP32[$0>>2]|0;
  $11 = (_lily_realloc($10,$8)|0);
  HEAP32[$0>>2] = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($12) + ($13<<2)|0);
 HEAP32[$14>>2] = $1;
 $15 = (($13) + 1)|0;
 HEAP32[$2>>2] = $15;
 return;
}
function _lily_vs_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_free_value_stack($0) {
 $0 = $0|0;
 var $$06 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  $$lcssa = $4;
  _lily_free($$lcssa);
  _lily_free($0);
  return;
 } else {
  $$06 = 0;$6 = $4;
 }
 while(1) {
  $5 = (($6) + ($$06<<2)|0);
  $7 = HEAP32[$5>>2]|0;
  _lily_free($7);
  $8 = (($$06) + 1)|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  $11 = HEAP32[$0>>2]|0;
  if ($10) {
   $$06 = $8;$6 = $11;
  } else {
   $$lcssa = $11;
   break;
  }
 }
 _lily_free($$lcssa);
 _lily_free($0);
 return;
}
function _lily_new_lex_state($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep73 = 0, $scevgep74 = 0, $scevgep75 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(56)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 52|0);
 HEAP32[$2>>2] = $0;
 $3 = (_lily_malloc(128)|0);
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = (_lily_malloc(128)|0);
 $6 = ((($1)) + 12|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($1)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 32|0);
 $10 = $9;
 $11 = $10;
 HEAP32[$11>>2] = 0;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (_lily_malloc(256)|0);
 $15 = ((($1)) + 30|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($1)) + 28|0);
 HEAP16[$16>>1] = 128;
 $17 = ((($1)) + 26|0);
 HEAP16[$17>>1] = 128;
 $18 = ((($1)) + 16|0);
 HEAP32[$18>>2] = 0;
 _memset(($14|0),32,256)|0;
 $scevgep75 = ((($14)) + 97|0);
 dest=$scevgep75; stop=dest+26|0; do { HEAP8[dest>>0]=16|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep74 = ((($14)) + 65|0);
 dest=$scevgep74; stop=dest+26|0; do { HEAP8[dest>>0]=16|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep73 = ((($14)) + 48|0);
 dest=$scevgep73; stop=dest+10|0; do { HEAP8[dest>>0]=18|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $scevgep = ((($14)) + 194|0);
 dest=$scevgep; stop=dest+51|0; do { HEAP8[dest>>0]=16|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $19 = ((($14)) + 66|0);
 HEAP8[$19>>0] = 29;
 $20 = ((($14)) + 95|0);
 HEAP8[$20>>0] = 16;
 $21 = ((($14)) + 40|0);
 HEAP8[$21>>0] = 19;
 $22 = ((($14)) + 41|0);
 HEAP8[$22>>0] = 0;
 $23 = ((($14)) + 34|0);
 HEAP8[$23>>0] = 17;
 $24 = ((($14)) + 39|0);
 HEAP8[$24>>0] = 31;
 $25 = ((($14)) + 64|0);
 HEAP8[$25>>0] = 25;
 $26 = ((($14)) + 63|0);
 HEAP8[$26>>0] = 28;
 $27 = ((($14)) + 35|0);
 HEAP8[$27>>0] = 23;
 $28 = ((($14)) + 61|0);
 HEAP8[$28>>0] = 21;
 $29 = ((($14)) + 46|0);
 HEAP8[$29>>0] = 24;
 $30 = ((($14)) + 44|0);
 HEAP8[$30>>0] = 1;
 $31 = ((($14)) + 43|0);
 HEAP8[$31>>0] = 14;
 $32 = ((($14)) + 45|0);
 HEAP8[$32>>0] = 15;
 $33 = ((($14)) + 123|0);
 HEAP8[$33>>0] = 2;
 $34 = ((($14)) + 125|0);
 HEAP8[$34>>0] = 3;
 $35 = ((($14)) + 60|0);
 HEAP8[$35>>0] = 13;
 $36 = ((($14)) + 62|0);
 HEAP8[$36>>0] = 12;
 $37 = ((($14)) + 58|0);
 HEAP8[$37>>0] = 5;
 $38 = ((($14)) + 33|0);
 HEAP8[$38>>0] = 8;
 $39 = ((($14)) + 42|0);
 HEAP8[$39>>0] = 10;
 $40 = ((($14)) + 47|0);
 HEAP8[$40>>0] = 11;
 $41 = ((($14)) + 38|0);
 HEAP8[$41>>0] = 26;
 $42 = ((($14)) + 37|0);
 HEAP8[$42>>0] = 9;
 $43 = ((($14)) + 124|0);
 HEAP8[$43>>0] = 27;
 $44 = ((($14)) + 94|0);
 HEAP8[$44>>0] = 7;
 $45 = ((($14)) + 91|0);
 HEAP8[$45>>0] = 4;
 $46 = ((($14)) + 93|0);
 HEAP8[$46>>0] = 20;
 $47 = ((($14)) + 36|0);
 HEAP8[$47>>0] = 30;
 $48 = ((($14)) + 126|0);
 HEAP8[$48>>0] = 6;
 $49 = ((($14)) + 10|0);
 HEAP8[$49>>0] = 22;
 $50 = ((($1)) + 40|0);
 HEAP32[$50>>2] = 59;
 HEAP32[$7>>2] = $14;
 return ($1|0);
}
function _lily_rewind_lex_state($0) {
 $0 = $0|0;
 var $$0 = 0, $$116 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  while(1) {
   $3 = ((($$0)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    break;
   } else {
    $$0 = $4;
   }
  }
  HEAP32[$0>>2] = $$0;
  $$116 = $$0;
  while(1) {
   $6 = ((($$116)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    _close_entry($$116);
    HEAP32[$6>>2] = 0;
   }
   $9 = ((($$116)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   _lily_free($10);
   HEAP32[$9>>2] = 0;
   $11 = ((($$116)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    break;
   } else {
    $$116 = $12;
   }
  }
 }
 $14 = ((($0)) + 44|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 32|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 30|0);
 HEAP16[$20>>1] = 0;
 return;
}
function _close_entry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP16[$1>>1]|0;
 switch ($2<<16>>16) {
 case 0:  {
  $3 = ((($0)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  (_fclose($4)|0);
  return;
  break;
 }
 case 1:  {
  return;
  break;
 }
 default: {
  $5 = ((($0)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_free($6);
  return;
 }
 }
}
function _lily_free_lex_state($0) {
 $0 = $0|0;
 var $$0 = 0, $$119 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  while(1) {
   $3 = ((($$0)) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$119 = $$0;
    break;
   } else {
    $$0 = $4;
   }
  }
  while(1) {
   $6 = ((($$119)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    _close_entry($$119);
   }
   $9 = ((($$119)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($$119)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_free($12);
   _lily_free($$119);
   $13 = ($10|0)==(0|0);
   if ($13) {
    break;
   } else {
    $$119 = $10;
   }
  }
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free($15);
 $16 = ((($0)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_free($17);
 $18 = ((($0)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_free($19);
 _lily_free($0);
 return;
}
function _lily_pop_lex_entry($0) {
 $0 = $0|0;
 var $$043 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _close_entry($1);
 $2 = ((($1)) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $52 = ((($0)) + 16|0);
  HEAP32[$52>>2] = 0;
  return;
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 (_strcpy($7,$9)|0);
 $10 = ((($4)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($4)) + 12|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($0)) + 30|0);
 HEAP16[$15>>1] = $14;
 HEAP32[$0>>2] = $4;
 $16 = ((($4)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 44|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($4)) + 32|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 32|0);
 $27 = $26;
 $28 = $27;
 HEAP32[$28>>2] = $22;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = ((($4)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 65535;
 $34 = ((($0)) + 40|0);
 HEAP32[$34>>2] = $33;
 $trunc = $32&65535;
 switch ($trunc<<16>>16) {
 case 46: case 39: case 38:  {
  break;
 }
 default: {
  return;
 }
 }
 $35 = HEAP16[$15>>1]|0;
 $36 = $35&65535;
 $37 = HEAP32[$6>>2]|0;
 $$043 = $36;
 while(1) {
  $38 = (($$043) + -1)|0;
  $39 = (($37) + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (3594 + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = ($43<<24>>24)==(0);
  $$1 = $44 ? $$043 : $38;
  $not$ = $44 ^ 1;
  $45 = ($$1|0)!=(0);
  $or$cond = $45 & $not$;
  if ($or$cond) {
   $$043 = $$1;
  } else {
   break;
  }
 }
 $46 = ((($0)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($37) + ($$1)|0);
 $49 = (($36) - ($$1))|0;
 (_strncpy($47,$48,$49)|0);
 $50 = HEAP32[$46>>2]|0;
 $51 = (($50) + ($49)|0);
 HEAP8[$51>>0] = 0;
 return;
}
function _lily_lexer_verify_path_string($0) {
 $0 = $0|0;
 var $$03944 = 0, $$04043 = 0, $$04142 = 0, $$045 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = ((($0)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise_syn($6,3850,$vararg_buffer);
  // unreachable;
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (_strlen($7)|0);
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 30|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($13) + -2)|0;
 $15 = (($10) + ($14)|0);
 $16 = (($2) + ($8)|0);
 $17 = ((($16)) + -1|0);
 $18 = ($12&65535)>(3);
 if ($18) {
  $19 = HEAP8[$15>>0]|0;
  $20 = ($19<<24>>24)==(34);
  if ($20) {
   $21 = ((($15)) + -1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(92);
   if (!($23)) {
    $24 = ((($0)) + 52|0);
    $25 = HEAP32[$24>>2]|0;
    _lily_raise_syn($25,3881,$vararg_buffer1);
    // unreachable;
   }
  }
 }
 $26 = HEAP8[$17>>0]|0;
 $27 = ($26<<24>>24)==(47);
 if ($27) {
  $30 = ((($0)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  _lily_raise_syn($31,3926,$vararg_buffer3);
  // unreachable;
 }
 $28 = HEAP8[$2>>0]|0;
 $29 = ($28<<24>>24)==(47);
 if ($29) {
  $30 = ((($0)) + 52|0);
  $31 = HEAP32[$30>>2]|0;
  _lily_raise_syn($31,3926,$vararg_buffer3);
  // unreachable;
 }
 $32 = ($8|0)==(0);
 if ($32) {
  $48 = ((($0)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  _lily_raise_syn($49,4014,$vararg_buffer7);
  // unreachable;
 }
 $33 = ((($0)) + 52|0);
 $$03944 = $17;$$04043 = $15;$$04142 = 0;$$045 = $8;
 while(1) {
  $34 = HEAP8[$$04043>>0]|0;
  $35 = HEAP8[$$03944>>0]|0;
  $36 = ($34<<24>>24)==($35<<24>>24);
  if (!($36)) {
   label = 13;
   break;
  }
  $38 = $35&255;
  $39 = (3594 + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $42 = ($35<<24>>24)==(47);
   if ($42) {
    HEAP8[$$03944>>0] = 47;
    $$1 = 1;
   } else {
    $$1 = 1;
   }
  } else {
   $$1 = $$04142;
  }
  $43 = ((($$04043)) + -1|0);
  $44 = ((($$03944)) + -1|0);
  $45 = (($$045) + -1)|0;
  $46 = ($45|0)==(0);
  if ($46) {
   break;
  } else {
   $$03944 = $44;$$04043 = $43;$$04142 = $$1;$$045 = $45;
  }
 }
 if ((label|0) == 13) {
  $37 = HEAP32[$33>>2]|0;
  _lily_raise_syn($37,3968,$vararg_buffer5);
  // unreachable;
 }
 $47 = ($$1|0)==(0);
 if ($47) {
  $48 = ((($0)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  _lily_raise_syn($49,4014,$vararg_buffer7);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _lily_lexer_digit_rescan($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$0$in = 0, $$018 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 30|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $$0$in = $3;$$018 = 32;
 while(1) {
  $$0 = (($$0$in) + -1)|0;
  $6 = ($$0|0)==(0);
  if ($6) {
   $$1 = $$018;
   break;
  }
  $7 = (($5) + ($$0)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isalnum($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$1 = $8;
   break;
  } else {
   $$0$in = $$0;$$018 = $8;
  }
 }
 $12 = ($$1<<24>>24)==(45);
 $13 = ($$1<<24>>24)==(43);
 $$ = $12 | $13;
 $14 = $$&1;
 switch ($$1<<24>>24) {
 case 43: case 45:  {
  break;
 }
 default: {
  return ($14|0);
 }
 }
 $15 = $$0$in&65535;
 HEAP16[$1>>1] = $15;
 _lily_lexer($0);
 return ($14|0);
}
function _lily_lexer($0) {
 $0 = $0|0;
 var $$0 = 0, $$095 = 0, $$98 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond3 = 0, $storemerge = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = ((($0)) + 30|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 L1: while(1) {
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($10) + ($11)|0);
  $storemerge = $12;
  L3: while(1) {
   HEAP32[$3>>2] = $storemerge;
   $13 = HEAP8[$storemerge>>0]|0;
   switch ($13<<24>>24) {
   case 9: case 32:  {
    break;
   }
   default: {
    break L3;
   }
   }
   $14 = ((($storemerge)) + 1|0);
   $storemerge = $14;
  }
  $15 = $storemerge;
  $16 = $12;
  $17 = (($15) - ($16))|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($17))|0;
  HEAP32[$1>>2] = $19;
  $20 = HEAP8[$storemerge>>0]|0;
  $21 = $20&255;
  $22 = (($8) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  switch ($23<<24>>24) {
  case 16:  {
   label = 6;
   break L1;
   break;
  }
  case 5:  {
   label = 10;
   break L1;
   break;
  }
  default: {
  }
  }
  $50 = ($23<<24>>24)<(7);
  if ($50) {
   label = 14;
   break;
  }
  L9: do {
   switch ($23<<24>>24) {
   case 17:  {
    label = 26;
    break L1;
    break;
   }
   case 31:  {
    label = 27;
    break L1;
    break;
   }
   case 29:  {
    label = 28;
    break L1;
    break;
   }
   case 22:  {
    $53 = (_read_line($0)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     label = 18;
     break L1;
    }
    HEAP32[$1>>2] = 0;
    break;
   }
   case 23:  {
    $59 = ((($storemerge)) + 1|0);
    $60 = HEAP8[$59>>0]|0;
    switch ($60<<24>>24) {
    case 91:  {
     _scan_multiline_comment($0,$3);
     $61 = HEAP32[$3>>2]|0;
     $62 = HEAP32[$9>>2]|0;
     $63 = (($61) - ($62))|0;
     HEAP32[$1>>2] = $63;
     break L9;
     break;
    }
    case 35:  {
     $64 = ((($storemerge)) + 2|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = ($65<<24>>24)==(35);
     if ($66) {
      label = 22;
      break L1;
     }
     break;
    }
    default: {
    }
    }
    $70 = (_read_line($0)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     label = 25;
     break L1;
    }
    HEAP32[$1>>2] = 0;
    break;
   }
   default: {
    label = 31;
    break L1;
   }
   }
  } while(0);
 }
 L19:  switch (label|0) {
  case 6: {
   HEAP32[$2>>2] = 38;
   label = 7;
   break;
  }
  case 10: {
   $40 = ((($storemerge)) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (3594 + ($42)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(0);
   if ($45) {
    $48 = $23 << 24 >> 24;
    $49 = (($19) + 1)|0;
    HEAP32[$1>>2] = $49;
    HEAP32[$2>>2] = $48;
    break;
   } else {
    HEAP32[$3>>2] = $40;
    $46 = HEAP32[$1>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[$1>>2] = $47;
    HEAP32[$2>>2] = 46;
    label = 7;
    break;
   }
   break;
  }
  case 14: {
   $51 = $23 << 24 >> 24;
   $52 = (($19) + 1)|0;
   HEAP32[$1>>2] = $52;
   HEAP32[$2>>2] = $51;
   break;
  }
  case 18: {
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 >>> 16;
   HEAP32[$2>>2] = $58;
   HEAP32[$1>>2] = 0;
   break;
  }
  case 22: {
   _scan_docstring($0,$3);
   $67 = HEAP32[$3>>2]|0;
   $68 = HEAP32[$9>>2]|0;
   $69 = (($67) - ($68))|0;
   HEAP32[$1>>2] = $69;
   HEAP32[$2>>2] = 45;
   break;
  }
  case 25: {
   $72 = HEAP32[$0>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 >>> 16;
   HEAP32[$2>>2] = $75;
   HEAP32[$1>>2] = 0;
   break;
  }
  case 26: {
   _scan_quoted($0,$3,0);
   $76 = HEAP32[$3>>2]|0;
   $77 = HEAP32[$9>>2]|0;
   $78 = (($76) - ($77))|0;
   HEAP32[$1>>2] = $78;
   HEAP32[$2>>2] = 40;
   break;
  }
  case 27: {
   _scan_single_quote($0,$3);
   $79 = HEAP32[$3>>2]|0;
   $80 = HEAP32[$9>>2]|0;
   $81 = (($79) - ($80))|0;
   HEAP32[$1>>2] = $81;
   HEAP32[$2>>2] = 42;
   break;
  }
  case 28: {
   $82 = ((($storemerge)) + 1|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = ($83<<24>>24)==(34);
   if ($84) {
    HEAP32[$3>>2] = $82;
    $85 = HEAP32[$1>>2]|0;
    $86 = (($85) + 1)|0;
    HEAP32[$1>>2] = $86;
    _scan_quoted($0,$3,1);
    $87 = HEAP32[$3>>2]|0;
    $88 = HEAP32[$9>>2]|0;
    $89 = (($87) - ($88))|0;
    HEAP32[$1>>2] = $89;
    HEAP32[$2>>2] = 41;
    break;
   } else {
    HEAP32[$2>>2] = 38;
    label = 7;
    break;
   }
   break;
  }
  case 31: {
   $90 = ($23<<24>>24)<(12);
   if ($90) {
    $91 = $23 << 24 >> 24;
    $92 = (($19) + 1)|0;
    HEAP32[$1>>2] = $92;
    $93 = HEAP32[$9>>2]|0;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = ($95<<24>>24)==(61);
    $97 = (($91) + -7)|0;
    if ($96) {
     $98 = (($19) + 2)|0;
     HEAP32[$1>>2] = $98;
     $99 = (784 + ($97<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$2>>2] = $100;
     break;
    } else {
     $101 = (804 + ($97<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     HEAP32[$2>>2] = $102;
     break;
    }
   }
   switch ($23<<24>>24) {
   case 18:  {
    _scan_number($0,$1,$2,$storemerge);
    break L19;
    break;
   }
   case 24:  {
    $103 = ((($storemerge)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($8) + ($105)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(18);
    if ($108) {
     _scan_number($0,$1,$2,$storemerge);
     break L19;
    }
    HEAP32[$3>>2] = $103;
    $109 = HEAP32[$1>>2]|0;
    $110 = (($109) + 1)|0;
    HEAP32[$1>>2] = $110;
    HEAP32[$2>>2] = 47;
    $111 = HEAP8[$103>>0]|0;
    $112 = ($111<<24>>24)==(46);
    if (!($112)) {
     break L19;
    }
    $113 = ((($storemerge)) + 2|0);
    HEAP32[$3>>2] = $113;
    $114 = HEAP32[$1>>2]|0;
    $115 = (($114) + 1)|0;
    HEAP32[$1>>2] = $115;
    $116 = HEAP8[$113>>0]|0;
    $117 = ($116<<24>>24)==(46);
    if ($117) {
     $118 = (($114) + 2)|0;
     HEAP32[$1>>2] = $118;
     HEAP32[$2>>2] = 55;
     break L19;
    } else {
     $119 = ((($0)) + 52|0);
     $120 = HEAP32[$119>>2]|0;
     _lily_raise_syn($120,4060,$vararg_buffer);
     // unreachable;
    }
    break;
   }
   case 14:  {
    $121 = ((($storemerge)) + 1|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = (($8) + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = ($125<<24>>24)==(18);
    if ($126) {
     _scan_number($0,$1,$2,$storemerge);
     break L19;
    }
    switch ($122<<24>>24) {
    case 61:  {
     $127 = ((($storemerge)) + 2|0);
     HEAP32[$3>>2] = $127;
     $128 = HEAP32[$1>>2]|0;
     $129 = (($128) + 2)|0;
     HEAP32[$1>>2] = $129;
     HEAP32[$2>>2] = 19;
     break L19;
     break;
    }
    case 43:  {
     $130 = ((($storemerge)) + 2|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = ($131<<24>>24)==(61);
     if ($132) {
      $133 = ((($0)) + 52|0);
      $134 = HEAP32[$133>>2]|0;
      _lily_raise_syn($134,4110,$vararg_buffer1);
      // unreachable;
     } else {
      $135 = HEAP32[$3>>2]|0;
      $136 = ((($135)) + 2|0);
      HEAP32[$3>>2] = $136;
      $137 = HEAP32[$1>>2]|0;
      $138 = (($137) + 2)|0;
      HEAP32[$1>>2] = $138;
      HEAP32[$2>>2] = 18;
      break L19;
     }
     break;
    }
    default: {
     HEAP32[$3>>2] = $121;
     $139 = HEAP32[$1>>2]|0;
     $140 = (($139) + 1)|0;
     HEAP32[$1>>2] = $140;
     HEAP32[$2>>2] = 17;
     break L19;
    }
    }
    break;
   }
   case 15:  {
    $141 = ((($storemerge)) + 1|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = (($8) + ($143)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = ($145<<24>>24)==(18);
    if ($146) {
     _scan_number($0,$1,$2,$storemerge);
     break L19;
    }
    $147 = ($142<<24>>24)==(61);
    if ($147) {
     $148 = ((($storemerge)) + 2|0);
     HEAP32[$3>>2] = $148;
     $149 = (($19) + 2)|0;
     HEAP32[$1>>2] = $149;
     HEAP32[$2>>2] = 21;
     break L19;
    } else {
     HEAP32[$3>>2] = $141;
     $150 = (($19) + 1)|0;
     HEAP32[$1>>2] = $150;
     HEAP32[$2>>2] = 20;
     break L19;
    }
    break;
   }
   case 19:  {
    $151 = (($19) + 1)|0;
    HEAP32[$1>>2] = $151;
    $152 = HEAP32[$3>>2]|0;
    $153 = ((($152)) + 1|0);
    HEAP32[$3>>2] = $153;
    $154 = HEAP8[$153>>0]|0;
    $155 = ($154<<24>>24)==(124);
    if ($155) {
     _scan_lambda($0,$3);
     $156 = HEAP32[$3>>2]|0;
     $157 = HEAP32[$9>>2]|0;
     $158 = (($156) - ($157))|0;
     HEAP32[$1>>2] = $158;
     HEAP32[$2>>2] = 33;
     break L19;
    } else {
     HEAP32[$2>>2] = 32;
     break L19;
    }
    break;
   }
   case 26:  {
    $159 = (($19) + 1)|0;
    HEAP32[$1>>2] = $159;
    $160 = HEAP32[$3>>2]|0;
    $161 = ((($160)) + 1|0);
    HEAP32[$3>>2] = $161;
    $162 = HEAP8[$161>>0]|0;
    switch ($162<<24>>24) {
    case 38:  {
     $163 = HEAP32[$1>>2]|0;
     $164 = (($163) + 1)|0;
     HEAP32[$1>>2] = $164;
     $165 = HEAP32[$3>>2]|0;
     $166 = ((($165)) + 1|0);
     HEAP32[$3>>2] = $166;
     HEAP32[$2>>2] = 50;
     break L19;
     break;
    }
    case 61:  {
     $167 = HEAP32[$1>>2]|0;
     $168 = (($167) + 1)|0;
     HEAP32[$1>>2] = $168;
     $169 = HEAP32[$3>>2]|0;
     $170 = ((($169)) + 1|0);
     HEAP32[$3>>2] = $170;
     HEAP32[$2>>2] = 49;
     break L19;
     break;
    }
    default: {
     HEAP32[$2>>2] = 48;
     break L19;
    }
    }
    break;
   }
   case 27:  {
    $171 = (($19) + 1)|0;
    HEAP32[$1>>2] = $171;
    $172 = HEAP32[$3>>2]|0;
    $173 = ((($172)) + 1|0);
    HEAP32[$3>>2] = $173;
    $174 = HEAP8[$173>>0]|0;
    switch ($174<<24>>24) {
    case 124:  {
     $175 = HEAP32[$1>>2]|0;
     $176 = (($175) + 1)|0;
     HEAP32[$1>>2] = $176;
     $177 = HEAP32[$3>>2]|0;
     $178 = ((($177)) + 1|0);
     HEAP32[$3>>2] = $178;
     HEAP32[$2>>2] = 53;
     break L19;
     break;
    }
    case 62:  {
     $179 = HEAP32[$1>>2]|0;
     $180 = (($179) + 1)|0;
     HEAP32[$1>>2] = $180;
     $181 = HEAP32[$3>>2]|0;
     $182 = ((($181)) + 1|0);
     HEAP32[$3>>2] = $182;
     HEAP32[$2>>2] = 56;
     break L19;
     break;
    }
    case 61:  {
     $183 = HEAP32[$1>>2]|0;
     $184 = (($183) + 1)|0;
     HEAP32[$1>>2] = $184;
     $185 = HEAP32[$3>>2]|0;
     $186 = ((($185)) + 1|0);
     HEAP32[$3>>2] = $186;
     HEAP32[$2>>2] = 52;
     break L19;
     break;
    }
    default: {
     HEAP32[$2>>2] = 51;
     break L19;
    }
    }
    break;
   }
   default: {
    $187 = $23 | 1;
    $188 = ($187<<24>>24)==(13);
    if ($188) {
     $189 = ($23<<24>>24)==(12);
     $190 = (($19) + 1)|0;
     HEAP32[$1>>2] = $190;
     $$98 = $189 ? 26 : 22;
     HEAP32[$2>>2] = $$98;
     $191 = HEAP32[$3>>2]|0;
     $192 = ((($191)) + 1|0);
     HEAP32[$3>>2] = $192;
     $193 = HEAP8[$192>>0]|0;
     $194 = ($193<<24>>24)==(61);
     if ($194) {
      $195 = $$98 | 1;
      HEAP32[$2>>2] = $195;
      $196 = HEAP32[$1>>2]|0;
      $197 = (($196) + 1)|0;
      HEAP32[$1>>2] = $197;
      break L19;
     }
     $198 = HEAP8[$191>>0]|0;
     $199 = ($193<<24>>24)==($198<<24>>24);
     if (!($199)) {
      $210 = ($193<<24>>24)==(91);
      $not$ = $189 ^ 1;
      $or$cond3 = $210 & $not$;
      if (!($or$cond3)) {
       break L19;
      }
      $211 = HEAP32[$1>>2]|0;
      $212 = (($211) + 1)|0;
      HEAP32[$1>>2] = $212;
      HEAP32[$2>>2] = 34;
      break L19;
     }
     $200 = HEAP32[$1>>2]|0;
     $201 = (($200) + 1)|0;
     HEAP32[$1>>2] = $201;
     $202 = HEAP32[$3>>2]|0;
     $203 = ((($202)) + 1|0);
     HEAP32[$3>>2] = $203;
     $204 = HEAP8[$203>>0]|0;
     $205 = ($204<<24>>24)==(61);
     if ($205) {
      $206 = HEAP32[$1>>2]|0;
      $207 = (($206) + 1)|0;
      HEAP32[$1>>2] = $207;
      $208 = (($$98) + 3)|0;
      HEAP32[$2>>2] = $208;
      break L19;
     } else {
      $209 = (($$98) + 2)|0;
      HEAP32[$2>>2] = $209;
      break L19;
     }
    }
    switch ($23<<24>>24) {
    case 21:  {
     $213 = (($19) + 1)|0;
     HEAP32[$1>>2] = $213;
     $214 = HEAP32[$9>>2]|0;
     $215 = (($214) + ($213)|0);
     $216 = HEAP8[$215>>0]|0;
     switch ($216<<24>>24) {
     case 61:  {
      HEAP32[$2>>2] = 31;
      $217 = HEAP32[$1>>2]|0;
      $218 = (($217) + 1)|0;
      HEAP32[$1>>2] = $218;
      break L19;
      break;
     }
     case 62:  {
      HEAP32[$2>>2] = 37;
      $219 = HEAP32[$1>>2]|0;
      $220 = (($219) + 1)|0;
      HEAP32[$1>>2] = $220;
      break L19;
      break;
     }
     default: {
      HEAP32[$2>>2] = 30;
      break L19;
     }
     }
     break;
    }
    case 20:  {
     $221 = (($19) + 1)|0;
     HEAP32[$1>>2] = $221;
     $222 = HEAP32[$3>>2]|0;
     $223 = ((($222)) + 1|0);
     HEAP32[$3>>2] = $223;
     $224 = HEAP8[$223>>0]|0;
     $225 = ($224<<24>>24)==(62);
     if ($225) {
      $226 = HEAP32[$1>>2]|0;
      $227 = (($226) + 1)|0;
      HEAP32[$1>>2] = $227;
      HEAP32[$2>>2] = 35;
      break L19;
     } else {
      HEAP32[$2>>2] = 36;
      break L19;
     }
     break;
    }
    case 25:  {
     $228 = ((($storemerge)) + 1|0);
     HEAP32[$3>>2] = $228;
     $229 = HEAP32[$1>>2]|0;
     $230 = (($229) + 1)|0;
     HEAP32[$1>>2] = $230;
     $231 = HEAP8[$228>>0]|0;
     $232 = ($231<<24>>24)==(40);
     if ($232) {
      $233 = (($229) + 2)|0;
      HEAP32[$1>>2] = $233;
      HEAP32[$2>>2] = 54;
      break L19;
     }
     $234 = $231&255;
     $235 = (($8) + ($234)|0);
     $236 = HEAP8[$235>>0]|0;
     $237 = ($236<<24>>24)==(16);
     if (!($237)) {
      HEAP32[$2>>2] = 59;
      break L19;
     }
     $238 = ((($0)) + 12|0);
     $239 = HEAP32[$238>>2]|0;
     $$0 = 0;
     while(1) {
      $240 = HEAP32[$3>>2]|0;
      $241 = HEAP8[$240>>0]|0;
      $242 = (($239) + ($$0)|0);
      HEAP8[$242>>0] = $241;
      $243 = (($$0) + 1)|0;
      $244 = HEAP32[$3>>2]|0;
      $245 = ((($244)) + 1|0);
      HEAP32[$3>>2] = $245;
      $246 = HEAP8[$245>>0]|0;
      $247 = $246&255;
      $248 = (3594 + ($247)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = ($249<<24>>24)==(0);
      if ($250) {
       break;
      } else {
       $$0 = $243;
      }
     }
     $251 = HEAP32[$1>>2]|0;
     $252 = (($251) + ($243))|0;
     HEAP32[$1>>2] = $252;
     $253 = (($239) + ($243)|0);
     HEAP8[$253>>0] = 0;
     HEAP32[$2>>2] = 39;
     break L19;
     break;
    }
    case 28:  {
     $254 = ((($storemerge)) + 1|0);
     HEAP32[$3>>2] = $254;
     $255 = HEAP32[$1>>2]|0;
     $256 = (($255) + 1)|0;
     HEAP32[$1>>2] = $256;
     $257 = HEAP8[$254>>0]|0;
     $258 = ($257<<24>>24)==(62);
     if ($258) {
      $259 = (($255) + 2)|0;
      HEAP32[$1>>2] = $259;
      HEAP32[$2>>2] = 61;
      break L19;
     } else {
      HEAP32[$2>>2] = 59;
      break L19;
     }
     break;
    }
    case 30:  {
     $260 = ((($storemerge)) + 1|0);
     HEAP32[$3>>2] = $260;
     $261 = HEAP32[$1>>2]|0;
     $262 = (($261) + 1)|0;
     HEAP32[$1>>2] = $262;
     $263 = HEAP8[$260>>0]|0;
     $264 = ($263<<24>>24)==(49);
     if ($264) {
      $265 = (($261) + 2)|0;
      HEAP32[$1>>2] = $265;
      $266 = ((($0)) + 32|0);
      $267 = $266;
      $268 = $267;
      HEAP32[$268>>2] = 1;
      $269 = (($267) + 4)|0;
      $270 = $269;
      HEAP32[$270>>2] = 0;
      HEAP32[$2>>2] = 57;
      break L19;
     } else {
      HEAP32[$2>>2] = 59;
      break L19;
     }
     break;
    }
    default: {
     HEAP32[$2>>2] = 59;
     break L19;
    }
    }
   }
   }
   break;
  }
 }
 if ((label|0) == 7) {
  $24 = ((($0)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $$095 = 0;
  while(1) {
   $26 = HEAP32[$3>>2]|0;
   $27 = HEAP8[$26>>0]|0;
   $28 = (($25) + ($$095)|0);
   HEAP8[$28>>0] = $27;
   $29 = (($$095) + 1)|0;
   $30 = HEAP32[$3>>2]|0;
   $31 = ((($30)) + 1|0);
   HEAP32[$3>>2] = $31;
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = (3594 + ($33)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    break;
   } else {
    $$095 = $29;
   }
  }
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + ($29))|0;
  HEAP32[$1>>2] = $38;
  $39 = (($25) + ($29)|0);
  HEAP8[$39>>0] = 0;
 }
 $271 = HEAP32[$1>>2]|0;
 $272 = $271&65535;
 HEAP16[$4>>1] = $272;
 $273 = HEAP32[$2>>2]|0;
 $274 = ((($0)) + 40|0);
 HEAP32[$274>>2] = $273;
 STACKTOP = sp;return;
}
function _read_line($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $5 = (_read_file_line($1)|0);
  $$0 = $5;
  return ($$0|0);
 } else {
  $6 = (_read_str_line($1)|0);
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _scan_multiline_comment($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 2|0);
 $6 = ((($0)) + 52|0);
 $7 = ((($0)) + 8|0);
 $$0 = $5;
 L1: while(1) {
  $8 = HEAP8[$$0>>0]|0;
  switch ($8<<24>>24) {
  case 93:  {
   $9 = ((($$0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(35);
   if ($11) {
    label = 4;
    break L1;
   }
   break;
  }
  case 10:  {
   $13 = (_read_line($0)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    label = 7;
    break L1;
   }
   $15 = HEAP32[$7>>2]|0;
   $$0 = $15;
   continue L1;
   break;
  }
  default: {
  }
  }
  $17 = ((($$0)) + 1|0);
  $$0 = $17;
 }
 if ((label|0) == 4) {
  $12 = ((($$0)) + 2|0);
  HEAP32[$1>>2] = $12;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $16 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $3;
  _lily_raise_syn($16,4644,$vararg_buffer);
  // unreachable;
 }
}
function _scan_docstring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$027 = 0, $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($2) - ($5))|0;
 $7 = ((($0)) + 52|0);
 $8 = ((($0)) + 52|0);
 $$028 = $4;
 L1: while(1) {
  $$027 = 0;
  L3: while(1) {
   $9 = (($$028) + ($$027)|0);
   $10 = HEAP8[$9>>0]|0;
   switch ($10<<24>>24) {
   case 35:  {
    break L3;
    break;
   }
   case 9: case 32:  {
    break;
   }
   default: {
    label = 12;
    break L1;
   }
   }
   $11 = (($$027) + 1)|0;
   $$027 = $11;
  }
  $12 = (($$027) + 1)|0;
  $13 = (($$028) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(35);
  if (!($15)) {
   label = 7;
   break;
  }
  $16 = (($$027) + 2)|0;
  $17 = (($$028) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(35);
  if (!($19)) {
   label = 7;
   break;
  }
  $21 = ($$027|0)==($6|0);
  if (!($21)) {
   label = 9;
   break;
  }
  $23 = (_read_line($0)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   label = 12;
   break;
  }
  $25 = HEAP32[$3>>2]|0;
  $$028 = $25;
 }
 if ((label|0) == 7) {
  $20 = HEAP32[$8>>2]|0;
  _lily_raise_syn($20,4557,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $22 = HEAP32[$7>>2]|0;
  _lily_raise_syn($22,4604,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _scan_quoted($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = 0;
 _scan_quoted_raw($0,$1,$3,$2);
 STACKTOP = sp;return;
}
function _scan_single_quote($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(92);
 $7 = ((($3)) + 2|0);
 HEAP32[$2>>2] = $7;
 if ($6) {
  $8 = (_scan_escape($0,$2)|0);
  $$0 = $8;
 } else {
  $$0 = $5;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(39);
 if ($11) {
  $14 = HEAP32[$2>>2]|0;
  $15 = ((($14)) + 1|0);
  HEAP32[$1>>2] = $15;
  $16 = $$0&255;
  $17 = ((($0)) + 32|0);
  $18 = $17;
  $19 = $18;
  HEAP32[$19>>2] = $16;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $12 = ((($0)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_raise_syn($13,4527,$vararg_buffer);
  // unreachable;
 }
}
function _scan_number($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 44|0;
 $6 = HEAP8[$3>>0]|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $7;
 HEAP32[$5>>2] = 1;
 switch ($6<<24>>24) {
 case 43: case 45:  {
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$4>>2] = $9;
  $10 = ((($3)) + 1|0);
  $$0 = $10;
  break;
 }
 default: {
  $$0 = $3;
 }
 }
 $11 = HEAP8[$$0>>0]|0;
 $12 = ($11<<24>>24)==(48);
 L4: do {
  if ($12) {
   $13 = HEAP32[$4>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$4>>2] = $14;
   $15 = ((($$0)) + 1|0);
   $16 = HEAP8[$15>>0]|0;
   switch ($16<<24>>24) {
   case 98:  {
    $17 = (_scan_binary($4,$15)|0);
    $18 = tempRet0;
    $39 = $18;$41 = $17;
    break L4;
    break;
   }
   case 99:  {
    $19 = (_scan_octal($4,$15)|0);
    $20 = tempRet0;
    $39 = $20;$41 = $19;
    break L4;
    break;
   }
   case 120:  {
    $21 = (_scan_hex($4,$15)|0);
    $22 = tempRet0;
    $39 = $22;$41 = $21;
    break L4;
    break;
   }
   default: {
    $23 = (_scan_decimal($0,$4,$5,$15)|0);
    $24 = tempRet0;
    $39 = $24;$41 = $23;
    break L4;
   }
   }
  } else {
   $25 = (_scan_decimal($0,$4,$5,$$0)|0);
   $26 = tempRet0;
   $39 = $26;$41 = $25;
  }
 } while(0);
 $27 = ((($0)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$4>>2]|0;
 $30 = (($28) + ($29)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(116);
 $33 = HEAP32[$5>>2]|0;
 $34 = ($33|0)==(0);
 if ($32) {
  if ($34) {
   $35 = ((($0)) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   _lily_raise_syn($36,4288,$vararg_buffer);
   // unreachable;
  }
  switch ($6<<24>>24) {
  case 43: case 45:  {
   $37 = ((($0)) + 52|0);
   $38 = HEAP32[$37>>2]|0;
   _lily_raise_syn($38,4319,$vararg_buffer1);
   // unreachable;
   break;
  }
  default: {
  }
  }
  $40 = ($39>>>0)>(0);
  $42 = ($41>>>0)>(255);
  $43 = ($39|0)==(0);
  $44 = $43 & $42;
  $45 = $40 | $44;
  if ($45) {
   $46 = ((($0)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   _lily_raise_syn($47,4351,$vararg_buffer3);
   // unreachable;
  }
  $48 = ((($0)) + 32|0);
  $49 = $48;
  $50 = $49;
  HEAP32[$50>>2] = $41;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $39;
  HEAP32[$2>>2] = 42;
  $53 = HEAP32[$4>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$4>>2] = $54;
  $97 = HEAP32[$4>>2]|0;
  HEAP32[$1>>2] = $97;
  STACKTOP = sp;return;
 }
 if ($34) {
  $79 = (($29) - ($7))|0;
  $80 = ((($0)) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($28) + ($7)|0);
  (_strncpy($81,$82,$79)|0);
  $83 = HEAP32[$80>>2]|0;
  $84 = (($83) + ($79)|0);
  HEAP8[$84>>0] = 0;
  $85 = (___errno_location()|0);
  HEAP32[$85>>2] = 0;
  $86 = HEAP32[$80>>2]|0;
  $87 = (+_strtod($86,0));
  $88 = (___errno_location()|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(34);
  if ($90) {
   $91 = ((($0)) + 52|0);
   $92 = HEAP32[$91>>2]|0;
   _lily_raise_syn($92,4432,$vararg_buffer9);
   // unreachable;
  }
  $93 = ((($0)) + 48|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (_lily_get_double_literal($94,$87)|0);
  $96 = ((($0)) + 44|0);
  HEAP32[$96>>2] = $95;
  HEAP32[$2>>2] = 44;
  $97 = HEAP32[$4>>2]|0;
  HEAP32[$1>>2] = $97;
  STACKTOP = sp;return;
 }
 $55 = ($6<<24>>24)==(45);
 do {
  if ($55) {
   $63 = ($39>>>0)<(2147483648);
   $64 = ($41>>>0)<(1);
   $65 = ($39|0)==(-2147483648);
   $66 = $65 & $64;
   $67 = $63 | $66;
   if ($67) {
    $68 = (_i64Subtract(0,0,($41|0),($39|0))|0);
    $69 = tempRet0;
    $75 = $68;$78 = $69;
    break;
   } else {
    $70 = ((($0)) + 52|0);
    $71 = HEAP32[$70>>2]|0;
    _lily_raise_syn($71,4404,$vararg_buffer7);
    // unreachable;
   }
  } else {
   $56 = ($39|0)>(-1);
   $57 = ($41>>>0)>(4294967295);
   $58 = ($39|0)==(-1);
   $59 = $58 & $57;
   $60 = $56 | $59;
   if ($60) {
    $75 = $41;$78 = $39;
   } else {
    $61 = ((($0)) + 52|0);
    $62 = HEAP32[$61>>2]|0;
    _lily_raise_syn($62,4376,$vararg_buffer5);
    // unreachable;
   }
  }
 } while(0);
 $72 = ((($0)) + 32|0);
 $73 = $72;
 $74 = $73;
 HEAP32[$74>>2] = $75;
 $76 = (($73) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $78;
 HEAP32[$2>>2] = 43;
 $97 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $97;
 STACKTOP = sp;return;
}
function _scan_lambda($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$053$ph57 = 0, $$054$ph = 0, $$155 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 24|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $6;
 HEAP32[$3>>2] = 0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$5>>2]|0;
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 32|0);
 $13 = ((($0)) + 52|0);
 $14 = ((($0)) + 8|0);
 $15 = ((($0)) + 8|0);
 $$053$ph = $10;$$054$ph = 1;
 L1: while(1) {
  $$053$ph57 = $$053$ph;
  L3: while(1) {
   L5: while(1) {
    $16 = HEAP32[$2>>2]|0;
    $17 = HEAP8[$16>>0]|0;
    switch ($17<<24>>24) {
    case 10:  {
     label = 6;
     break L5;
     break;
    }
    case 35:  {
     break;
    }
    default: {
     label = 11;
     break L5;
    }
    }
    $18 = ((($16)) + 1|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(91);
    if (!($20)) {
     label = 6;
     break;
    }
    $33 = HEAP32[$7>>2]|0;
    _scan_multiline_comment($0,$2);
    $34 = HEAP32[$7>>2]|0;
    $35 = ($34|0)==($33|0);
    if (!($35)) {
     label = 10;
     break;
    }
   }
   if ((label|0) == 6) {
    label = 0;
    $21 = (_read_line($0)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     label = 7;
     break L1;
    }
    $25 = HEAP32[$3>>2]|0;
    $26 = (($21) + 3)|0;
    $27 = (($26) + ($25))|0;
    _ensure_label_size($0,$27);
    $28 = HEAP32[$5>>2]|0;
    $29 = HEAP32[$14>>2]|0;
    HEAP32[$2>>2] = $29;
    $30 = HEAP32[$3>>2]|0;
    $31 = (($28) + ($30)|0);
    HEAP8[$31>>0] = 10;
    $32 = (($30) + 1)|0;
    HEAP32[$3>>2] = $32;
    $$053$ph57 = $28;
    continue;
   }
   else if ((label|0) == 10) {
    label = 0;
    $36 = (($34) - ($33))|0;
    $37 = HEAP32[$3>>2]|0;
    $38 = HEAP32[$15>>2]|0;
    $39 = (_strlen($38)|0);
    $40 = (($36) + 3)|0;
    $41 = (($40) + ($37))|0;
    $42 = (($41) + ($39))|0;
    _ensure_label_size($0,$42);
    $43 = HEAP32[$5>>2]|0;
    $44 = HEAP32[$3>>2]|0;
    $45 = (($43) + ($44)|0);
    _memset(($45|0),10,($36|0))|0;
    $46 = (($44) + ($36))|0;
    HEAP32[$3>>2] = $46;
    $$053$ph57 = $43;
    continue;
   }
   else if ((label|0) == 11) {
    label = 0;
    $47 = HEAP32[$2>>2]|0;
    $48 = HEAP8[$47>>0]|0;
    switch ($48<<24>>24) {
    case 40:  {
     label = 16;
     break L3;
     break;
    }
    case 41:  {
     label = 17;
     break L3;
     break;
    }
    case 34:  {
     break;
    }
    case 39:  {
     _scan_single_quote($0,$2);
     $55 = HEAP32[$3>>2]|0;
     $56 = (($55) + 7)|0;
     _ensure_label_size($0,$56);
     $57 = HEAP32[$5>>2]|0;
     $58 = $12;
     $59 = $58;
     $60 = HEAP32[$59>>2]|0;
     $61 = (($58) + 4)|0;
     $62 = $61;
     $63 = HEAP32[$62>>2]|0;
     $64 = $60 & 255;
     HEAP32[$vararg_buffer1>>2] = $64;
     (_sprintf($4,4180,$vararg_buffer1)|0);
     $65 = HEAP32[$3>>2]|0;
     $66 = (($57) + ($65)|0);
     (_strcpy($66,$4)|0);
     $67 = (_strlen($4)|0);
     $68 = (($67) + ($65))|0;
     HEAP32[$3>>2] = $68;
     $$053$ph57 = $57;
     continue L3;
     break;
    }
    default: {
     $$155 = $$054$ph;
     break L3;
    }
    }
    $49 = HEAP32[$11>>2]|0;
    $50 = ($47|0)==($49|0);
    if ($50) {
     $$0 = 2;
    } else {
     $51 = ((($47)) + -1|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ($52<<24>>24)==(66);
     $$ = $53 ? 3 : 2;
     $$0 = $$;
    }
    _scan_quoted_raw($0,$2,$3,$$0);
    $54 = HEAP32[$5>>2]|0;
    $$053$ph57 = $54;
    continue;
   }
  }
  if ((label|0) == 16) {
   label = 0;
   $69 = (($$054$ph) + 1)|0;
   $$155 = $69;
  }
  else if ((label|0) == 17) {
   label = 0;
   $70 = ($$054$ph|0)==(1);
   if ($70) {
    label = 20;
    break;
   }
   $71 = (($$054$ph) + -1)|0;
   $$155 = $71;
  }
  $72 = HEAP32[$2>>2]|0;
  $73 = HEAP8[$72>>0]|0;
  $74 = HEAP32[$3>>2]|0;
  $75 = (($$053$ph57) + ($74)|0);
  HEAP8[$75>>0] = $73;
  $76 = HEAP32[$2>>2]|0;
  $77 = ((($76)) + 1|0);
  HEAP32[$2>>2] = $77;
  $78 = HEAP32[$3>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[$3>>2] = $79;
  $$053$ph = $$053$ph57;$$054$ph = $$155;
 }
 if ((label|0) == 7) {
  $23 = HEAP32[$13>>2]|0;
  $24 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $24;
  _lily_raise_syn($23,4138,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $80 = HEAP32[$3>>2]|0;
  $81 = (($$053$ph57) + ($80)|0);
  HEAP8[$81>>0] = 0;
  $82 = HEAP32[$2>>2]|0;
  $83 = ((($82)) + 1|0);
  HEAP32[$1>>2] = $83;
  STACKTOP = sp;return;
 }
}
function _ensure_label_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 26|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)>($1|0);
 if ($5) {
  return;
 } else {
  $$0 = $4;
 }
 while(1) {
  $6 = ($$0|0)<($1|0);
  $7 = $$0 << 1;
  if ($6) {
   $$0 = $7;
  } else {
   break;
  }
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_realloc($9,$$0)|0);
 HEAP32[$8>>2] = $10;
 $11 = $$0&65535;
 HEAP16[$2>>1] = $11;
 return;
}
function _scan_quoted_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$ph = 0, $$0$ph100 = 0, $$088$ph = 0, $$088$ph113 = 0, $$088$ph99 = 0, $$089 = 0, $$090110 = 0, $$091$ph = 0, $$094 = 0, $$1111 = 0, $$5 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $5;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(34);
 if ($10) {
  $11 = ((($5)) + 2|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(34);
  if ($13) {
   $14 = ((($0)) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $11;
   $$089 = $15;$$094 = 1;
  } else {
   $$089 = 0;$$094 = 0;
  }
 } else {
  $$089 = 0;$$094 = 0;
 }
 $16 = $3 & 2;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = ($$094|0)!=(0);
  $19 = $18 ? 3 : 1;
  $20 = HEAP32[$6>>2]|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = (($20) + ($21)|0);
  (_strncpy($22,4186,$19)|0);
  $23 = HEAP32[$2>>2]|0;
  $24 = (($23) + ($19))|0;
  HEAP32[$2>>2] = $24;
 }
 $25 = HEAP32[$4>>2]|0;
 $26 = ((($25)) + 1|0);
 HEAP32[$4>>2] = $26;
 $27 = HEAP32[$2>>2]|0;
 $28 = $3 & 1;
 $29 = ($28|0)==(0);
 $30 = ((($0)) + 52|0);
 $31 = ($16|0)==(0);
 $32 = ($$094|0)==(0);
 $33 = ((($0)) + 52|0);
 $34 = ((($0)) + 52|0);
 $35 = ((($0)) + 8|0);
 $$0$ph = $7;$$088$ph = $27;$$091$ph = 0;
 L8: while(1) {
  $36 = ($$091$ph|0)==(0);
  $37 = $$091$ph | $$094;
  $38 = ($37|0)==(0);
  $brmerge = $17 | $36;
  $$0$ph100 = $$0$ph;$$088$ph99 = $$088$ph;
  while(1) {
   $$088$ph113 = $$088$ph99;
   L12: while(1) {
    L14: while(1) {
     $39 = HEAP32[$4>>2]|0;
     $40 = HEAP8[$39>>0]|0;
     switch ($40<<24>>24) {
     case 10:  {
      break L12;
      break;
     }
     case 34:  {
      label = 26;
      break L14;
      break;
     }
     case 92:  {
      break;
     }
     default: {
      break L14;
     }
     }
     $41 = ((($39)) + 1|0);
     HEAP32[$4>>2] = $41;
     $42 = HEAP8[$41>>0]|0;
     $43 = ($42<<24>>24)==(10);
     if ($43) {
      $$0$ph = $$0$ph100;$$088$ph = $$088$ph113;$$091$ph = 1;
      continue L8;
     }
     $44 = (_scan_escape($0,$4)|0);
     $45 = ($44<<24>>24)<(1);
     $or$cond = $29 & $45;
     if ($or$cond) {
      label = 13;
      break L8;
     }
     if ($31) {
      label = 16;
      break;
     }
     $47 = HEAP32[$4>>2]|0;
     $48 = ($39|0)==($47|0);
     if (!($48)) {
      $$090110 = $39;$$1111 = $$088$ph113;
      label = 17;
      break;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $49 = (($$0$ph100) + ($$088$ph113)|0);
     HEAP8[$49>>0] = $44;
     $50 = (($$088$ph113) + 1)|0;
     $$088$ph113 = $50;
     continue;
    }
    else if ((label|0) == 17) {
     while(1) {
      label = 0;
      $51 = HEAP8[$$090110>>0]|0;
      $52 = (($$0$ph100) + ($$1111)|0);
      HEAP8[$52>>0] = $51;
      $53 = (($$1111) + 1)|0;
      $54 = ((($$090110)) + 1|0);
      $55 = HEAP32[$4>>2]|0;
      $56 = ($54|0)==($55|0);
      if ($56) {
       $$088$ph113 = $53;
       continue L12;
      } else {
       $$090110 = $54;$$1111 = $53;
       label = 17;
      }
     }
    }
    else if ((label|0) == 26) {
     label = 0;
     if ($32) {
      label = 29;
      break L8;
     }
     $74 = ((($39)) + 1|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = ($75<<24>>24)==(34);
     if ($76) {
      $77 = ((($39)) + 2|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = ($78<<24>>24)==(34);
      if ($79) {
       label = 29;
       break L8;
      }
     }
    }
    $82 = HEAP32[$4>>2]|0;
    $83 = HEAP8[$82>>0]|0;
    $84 = ($83<<24>>24)==(0);
    if ($84) {
     break L8;
    }
    $85 = (($$0$ph100) + ($$088$ph113)|0);
    HEAP8[$85>>0] = $83;
    $86 = (($$088$ph113) + 1)|0;
    $87 = HEAP32[$4>>2]|0;
    $88 = ((($87)) + 1|0);
    HEAP32[$4>>2] = $88;
    $$088$ph113 = $86;
   }
   if ($38) {
    label = 19;
    break L8;
   }
   $58 = (_read_line($0)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    label = 21;
    break L8;
   }
   $61 = (($$088$ph113) + 3)|0;
   $62 = (($61) + ($58))|0;
   _ensure_label_size($0,$62);
   $63 = HEAP32[$6>>2]|0;
   $64 = HEAP32[$35>>2]|0;
   HEAP32[$4>>2] = $64;
   if (!($brmerge)) {
    break;
   }
   $68 = (($63) + ($$088$ph113)|0);
   HEAP8[$68>>0] = 10;
   $69 = (($$088$ph113) + 1)|0;
   $$0$ph100 = $63;$$088$ph99 = $69;
  }
  $65 = HEAP32[$4>>2]|0;
  $66 = HEAP8[$65>>0]|0;
  $67 = ($66<<24>>24)==(32);
  if ($67) {
   $71 = $65;
  } else {
   $$0$ph = $63;$$088$ph = $$088$ph113;$$091$ph = 0;
   continue;
  }
  while(1) {
   $70 = ((($71)) + 1|0);
   HEAP32[$4>>2] = $70;
   $72 = HEAP8[$70>>0]|0;
   $73 = ($72<<24>>24)==(32);
   if ($73) {
    $71 = $70;
   } else {
    $$0$ph = $63;$$088$ph = $$088$ph113;$$091$ph = 0;
    continue L8;
   }
  }
 }
 if ((label|0) == 13) {
  $46 = HEAP32[$30>>2]|0;
  _lily_raise_syn($46,4190,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 19) {
  $57 = HEAP32[$33>>2]|0;
  _lily_raise_syn($57,4215,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 21) {
  $60 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $$089;
  _lily_raise_syn($60,4246,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $80 = HEAP32[$4>>2]|0;
  $81 = ((($80)) + 1|0);
  HEAP32[$4>>2] = $81;
 }
 $89 = ($$094|0)!=(0);
 if ($89) {
  $90 = HEAP32[$4>>2]|0;
  $91 = ((($90)) + 2|0);
  HEAP32[$4>>2] = $91;
 }
 $92 = $89 ? 3 : 1;
 if ($17) {
  $93 = (($$088$ph113) + ($92))|0;
  $94 = HEAP32[$6>>2]|0;
  $95 = (($94) + ($$088$ph113)|0);
  (_strncpy($95,4186,$92)|0);
  $$5 = $93;
 } else {
  $$5 = $$088$ph113;
 }
 $96 = $3 & 3;
 $97 = ($96|0)==(0);
 if ($97) {
  $98 = (($$0$ph100) + ($$5)|0);
  HEAP8[$98>>0] = 0;
 }
 $99 = ($16|0)==(0);
 if (!($99)) {
  $107 = HEAP32[$4>>2]|0;
  HEAP32[$1>>2] = $107;
  HEAP32[$2>>2] = $$5;
  STACKTOP = sp;return;
 }
 $100 = $3 & 1;
 $101 = ($100|0)==(0);
 $102 = ((($0)) + 48|0);
 $103 = HEAP32[$102>>2]|0;
 if ($101) {
  $104 = (_lily_get_string_literal($103,$$0$ph100)|0);
  $$sink = $104;
 } else {
  $105 = (_lily_get_bytestring_literal($103,$$0$ph100,$$5)|0);
  $$sink = $105;
 }
 $106 = ((($0)) + 44|0);
 HEAP32[$106>>2] = $$sink;
 $107 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $107;
 HEAP32[$2>>2] = $$5;
 STACKTOP = sp;return;
}
function _scan_escape($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0$lcssa = 0, $$035$lcssa = 0, $$036 = 0, $$1 = 0, $$44 = 0, $$off = 0, $$off38 = 0, $$off38$1 = 0, $$off38$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 110:  {
  $$036 = 10;$$1 = $2;
  break;
 }
 case 114:  {
  $$036 = 13;$$1 = $2;
  break;
 }
 case 116:  {
  $$036 = 9;$$1 = $2;
  break;
 }
 case 39:  {
  $$036 = $3;$$1 = $2;
  break;
 }
 case 34:  {
  $$036 = $3;$$1 = $2;
  break;
 }
 case 92:  {
  $$036 = $3;$$1 = $2;
  break;
 }
 case 98:  {
  $$036 = 8;$$1 = $2;
  break;
 }
 case 97:  {
  $$036 = 7;$$1 = $2;
  break;
 }
 case 47:  {
  $$036 = $3;$$1 = $2;
  break;
 }
 default: {
  $$off = (($3) + -48)<<24>>24;
  $4 = ($$off&255)<(10);
  if (!($4)) {
   $15 = ((($0)) + 52|0);
   $16 = HEAP32[$15>>2]|0;
   _lily_raise_syn($16,4190,$vararg_buffer);
   // unreachable;
  }
  $5 = HEAP8[$2>>0]|0;
  $$off38 = (($5) + -48)<<24>>24;
  $6 = ($$off38&255)>(9);
  if ($6) {
   $$0$lcssa = 0;$$035$lcssa = $2;
  } else {
   $7 = $5 << 24 >> 24;
   $8 = (($7) + -48)|0;
   $9 = ($8|0)>(255);
   if ($9) {
    $$0$lcssa = 0;$$035$lcssa = $2;
   } else {
    $10 = ((($2)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $$off38$1 = (($11) + -48)<<24>>24;
    $12 = ($$off38$1&255)>(9);
    if ($12) {
     $$0$lcssa = $8;$$035$lcssa = $10;
    } else {
     $18 = $11 << 24 >> 24;
     $19 = ($8*10)|0;
     $20 = (($19) + -48)|0;
     $21 = (($20) + ($18))|0;
     $22 = ($21|0)>(255);
     if ($22) {
      $$0$lcssa = $8;$$035$lcssa = $10;
     } else {
      $23 = ((($2)) + 2|0);
      $24 = HEAP8[$23>>0]|0;
      $$off38$2 = (($24) + -48)<<24>>24;
      $25 = ($$off38$2&255)>(9);
      if ($25) {
       $$0$lcssa = $21;$$035$lcssa = $23;
      } else {
       $26 = $24 << 24 >> 24;
       $27 = ($21*10)|0;
       $28 = (($27) + -48)|0;
       $29 = (($28) + ($26))|0;
       $30 = ($29|0)>(255);
       $31 = ((($2)) + 3|0);
       $$ = $30 ? $23 : $31;
       $$44 = $30 ? $21 : $29;
       $$0$lcssa = $$44;$$035$lcssa = $$;
      }
     }
    }
   }
  }
  $13 = ((($$035$lcssa)) + -1|0);
  $14 = $$0$lcssa&255;
  $$036 = $14;$$1 = $13;
 }
 }
 $17 = ((($$1)) + 1|0);
 HEAP32[$1>>2] = $17;
 STACKTOP = sp;return ($$036|0);
}
function _scan_binary($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$023 = 0, $$02529 = 0, $$1$lcssa = 0, $$12430 = 0, $$131 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, $switch27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$0$in = $2;$$pn = $1;
 while(1) {
  $$0 = (($$0$in) + 1)|0;
  $$023 = ((($$pn)) + 1|0);
  $3 = HEAP8[$$023>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if ($4) {
   $$0$in = $$0;$$pn = $$023;
  } else {
   break;
  }
 }
 $5 = HEAP8[$$023>>0]|0;
 $6 = $5 & -2;
 $switch27 = ($6<<24>>24)==(48);
 if ($switch27) {
  $$02529 = 0;$$12430 = $$023;$$131 = $$0;$13 = $5;$8 = 0;$9 = 0;
 } else {
  $$1$lcssa = $$0;$25 = 0;$26 = 0;
  HEAP32[$0>>2] = $$1$lcssa;
  tempRet0 = ($25);
  return ($26|0);
 }
 while(1) {
  $7 = (($$02529) + 1)|0;
  $10 = (_bitshift64Shl(($8|0),($9|0),1)|0);
  $11 = tempRet0;
  $12 = $13 << 24 >> 24;
  $14 = ($12|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (_i64Add(($10|0),($11|0),-48,-1)|0);
  $17 = tempRet0;
  $18 = (_i64Add(($16|0),($17|0),($12|0),($15|0))|0);
  $19 = tempRet0;
  $20 = ((($$12430)) + 1|0);
  $21 = (($$131) + 1)|0;
  $22 = HEAP8[$20>>0]|0;
  $23 = $22 & -2;
  $switch = ($23<<24>>24)!=(48);
  $24 = ($7|0)==(65);
  $or$cond = $24 | $switch;
  if ($or$cond) {
   $$1$lcssa = $21;$25 = $19;$26 = $18;
   break;
  } else {
   $$02529 = $7;$$12430 = $20;$$131 = $21;$13 = $22;$8 = $18;$9 = $19;
  }
 }
 HEAP32[$0>>2] = $$1$lcssa;
 tempRet0 = ($25);
 return ($26|0);
}
function _scan_octal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$024 = 0, $$02631 = 0, $$1$lcssa = 0, $$12532 = 0, $$133 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$not = 0, $or$cond$not29 = 0, $or$cond28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$0$in = $2;$$pn = $1;
 while(1) {
  $$0 = (($$0$in) + 1)|0;
  $$024 = ((($$pn)) + 1|0);
  $3 = HEAP8[$$024>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if ($4) {
   $$0$in = $$0;$$pn = $$024;
  } else {
   break;
  }
 }
 $5 = HEAP8[$$024>>0]|0;
 $6 = $5 & -8;
 $or$cond$not29 = ($6<<24>>24)==(48);
 if ($or$cond$not29) {
  $$02631 = 0;$$12532 = $$024;$$133 = $$0;$13 = $5;$8 = 0;$9 = 0;
 } else {
  $$1$lcssa = $$0;$25 = 0;$26 = 0;
  HEAP32[$0>>2] = $$1$lcssa;
  tempRet0 = ($25);
  return ($26|0);
 }
 while(1) {
  $7 = (($$02631) + 1)|0;
  $10 = (_bitshift64Shl(($8|0),($9|0),3)|0);
  $11 = tempRet0;
  $12 = $13 << 24 >> 24;
  $14 = ($12|0)<(0);
  $15 = $14 << 31 >> 31;
  $16 = (_i64Add(($10|0),($11|0),-48,-1)|0);
  $17 = tempRet0;
  $18 = (_i64Add(($16|0),($17|0),($12|0),($15|0))|0);
  $19 = tempRet0;
  $20 = (($$133) + 1)|0;
  $21 = ((($$12532)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 & -8;
  $or$cond$not = ($23<<24>>24)!=(48);
  $24 = ($7|0)==(23);
  $or$cond28 = $24 | $or$cond$not;
  if ($or$cond28) {
   $$1$lcssa = $20;$25 = $19;$26 = $18;
   break;
  } else {
   $$02631 = $7;$$12532 = $21;$$133 = $20;$13 = $22;$8 = $18;$9 = $19;
  }
 }
 HEAP32[$0>>2] = $$1$lcssa;
 tempRet0 = ($25);
 return ($26|0);
}
function _scan_hex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$030 = 0, $$030$in = 0, $$031 = 0, $$03444 = 0, $$1$lcssa = 0, $$13245 = 0, $$146 = 0, $$off = 0, $$off41 = 0, $$off42 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$030$in = $2;$$pn = $1;
 while(1) {
  $$030 = (($$030$in) + 1)|0;
  $$031 = ((($$pn)) + 1|0);
  $3 = HEAP8[$$031>>0]|0;
  $4 = ($3<<24>>24)==(48);
  if ($4) {
   $$030$in = $$030;$$pn = $$031;
  } else {
   $$03444 = 0;$$13245 = $$031;$$146 = $$030;$10 = 0;$9 = 0;
   break;
  }
 }
 while(1) {
  $5 = HEAP8[$$13245>>0]|0;
  $$off = (($5) + -48)<<24>>24;
  $6 = ($$off&255)<(10);
  if ($6) {
   $17 = 48;$18 = 0;
  } else {
   $$off41 = (($5) + -97)<<24>>24;
   $7 = ($$off41&255)<(6);
   if ($7) {
    $17 = 87;$18 = 0;
   } else {
    $$off42 = (($5) + -65)<<24>>24;
    $8 = ($$off42&255)<(6);
    if ($8) {
     $17 = 55;$18 = 0;
    } else {
     $$1$lcssa = $$146;$27 = $10;$28 = $9;
     label = 7;
     break;
    }
   }
  }
  $11 = (_bitshift64Shl(($9|0),($10|0),4)|0);
  $12 = tempRet0;
  $13 = HEAP8[$$13245>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)<(0);
  $16 = $15 << 31 >> 31;
  $19 = (_i64Subtract(($11|0),($12|0),($17|0),($18|0))|0);
  $20 = tempRet0;
  $21 = (_i64Add(($19|0),($20|0),($14|0),($16|0))|0);
  $22 = tempRet0;
  $23 = (($$03444) + 1)|0;
  $24 = (($$146) + 1)|0;
  $25 = ((($$13245)) + 1|0);
  $26 = ($23|0)==(17);
  if ($26) {
   $$1$lcssa = $24;$27 = $22;$28 = $21;
   label = 7;
   break;
  } else {
   $$03444 = $23;$$13245 = $25;$$146 = $24;$10 = $22;$9 = $21;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$0>>2] = $$1$lcssa;
  tempRet0 = ($27);
  return ($28|0);
 }
 return (0)|0;
}
function _scan_decimal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02942 = 0, $$031$ = 0, $$03139 = 0, $$041 = 0, $$1 = 0, $$13040 = 0, $$132 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$4>>2] = $5;
 $6 = HEAP8[$3>>0]|0;
 $7 = ($6<<24>>24)==(48);
 if ($7) {
  $$02942 = $3;
  while(1) {
   $8 = HEAP32[$4>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[$4>>2] = $9;
   $10 = ((($$02942)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(48);
   if ($12) {
    $$02942 = $10;
   } else {
    $$03139 = 0;$$041 = 0;$$13040 = $10;$17 = 0;$18 = 0;
    break;
   }
  }
 } else {
  $$03139 = 0;$$041 = 0;$$13040 = $3;$17 = 0;$18 = 0;
 }
 L4: while(1) {
  $13 = HEAP8[$$13040>>0]|0;
  $$off = (($13) + -48)<<24>>24;
  $14 = ($$off&255)<(10);
  if ($14) {
   $15 = HEAP32[$2>>2]|0;
   $16 = ($15|0)==(0);
   $19 = (___muldi3(($17|0),($18|0),10,0)|0);
   $20 = tempRet0;
   $21 = $13 << 24 >> 24;
   $22 = ($21|0)<(0);
   $23 = $22 << 31 >> 31;
   $24 = (_i64Add(($19|0),($20|0),-48,-1)|0);
   $25 = tempRet0;
   $26 = (_i64Add(($24|0),($25|0),($21|0),($23|0))|0);
   $27 = tempRet0;
   $28 = $16 ? $17 : $26;
   $29 = $16 ? $18 : $27;
   $not$ = $16 ^ 1;
   $30 = $not$&1;
   $$031$ = (($30) + ($$03139))|0;
   $$1 = $$041;$$132 = $$031$;$43 = $28;$44 = $29;
  } else {
   switch ($13<<24>>24) {
   case 101:  {
    label = 9;
    break L4;
    break;
   }
   case 46:  {
    break;
   }
   default: {
    $41 = $18;$42 = $17;
    break L4;
   }
   }
   $31 = ($$041|0)==(1);
   if ($31) {
    $41 = $18;$42 = $17;
    break;
   }
   $32 = ((($$13040)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $isdigittmp = (($34) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    $41 = $18;$42 = $17;
    break;
   }
   HEAP32[$2>>2] = 0;
   $$1 = 1;$$132 = $$03139;$43 = $17;$44 = $18;
  }
  $35 = (($$132) + 1)|0;
  $36 = HEAP32[$4>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$4>>2] = $37;
  $38 = ((($$13040)) + 1|0);
  $39 = ($35|0)==(21);
  if ($39) {
   $41 = $44;$42 = $43;
   break;
  } else {
   $$03139 = $35;$$041 = $$1;$$13040 = $38;$17 = $43;$18 = $44;
  }
 }
 if ((label|0) == 9) {
  HEAP32[$2>>2] = 0;
  _scan_exponent($0,$4,$$13040);
  $41 = $18;$42 = $17;
 }
 $40 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $40;
 tempRet0 = ($41);
 STACKTOP = sp;return ($42|0);
}
function _scan_exponent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$020 = 0, $$021 = 0, $$028 = 0, $$1$lcssa = 0, $$12226 = 0, $$127 = 0, $$off = 0, $$off24 = 0, $$off2425 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($2)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(43);
 if ($6) {
  label = 3;
 } else {
  $7 = (($3) + 1)|0;
  $8 = ($5<<24>>24)==(45);
  if ($8) {
   label = 3;
  } else {
   $$020 = $7;$$021 = $4;
  }
 }
 if ((label|0) == 3) {
  $9 = (($3) + 2)|0;
  $10 = ((($2)) + 2|0);
  $$020 = $9;$$021 = $10;
 }
 $11 = HEAP8[$$021>>0]|0;
 $$off = (($11) + -48)<<24>>24;
 $12 = ($$off&255)>(9);
 if ($12) {
  $13 = ((($0)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_raise_syn($14,4462,$vararg_buffer);
  // unreachable;
 }
 $15 = HEAP8[$$021>>0]|0;
 $$off2425 = (($15) + -48)<<24>>24;
 $16 = ($$off2425&255)<(10);
 if (!($16)) {
  $$1$lcssa = $$020;
  HEAP32[$1>>2] = $$1$lcssa;
  STACKTOP = sp;return;
 }
 $17 = ((($0)) + 52|0);
 $$028 = 0;$$12226 = $$021;$$127 = $$020;
 while(1) {
  $18 = (($$028) + 1)|0;
  $19 = ($$028|0)>(2);
  if ($19) {
   label = 9;
   break;
  }
  $21 = (($$127) + 1)|0;
  $22 = ((($$12226)) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $$off24 = (($23) + -48)<<24>>24;
  $24 = ($$off24&255)<(10);
  if ($24) {
   $$028 = $18;$$12226 = $22;$$127 = $21;
  } else {
   $$1$lcssa = $21;
   label = 11;
   break;
  }
 }
 if ((label|0) == 9) {
  $20 = HEAP32[$17>>2]|0;
  _lily_raise_syn($20,4504,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 11) {
  HEAP32[$1>>2] = $$1$lcssa;
  STACKTOP = sp;return;
 }
}
function _read_file_line($0) {
 $0 = $0|0;
 var $$$053 = 0, $$0 = 0, $$053 = 0, $$055 = 0, $$057 = 0, $$1 = 0, $$156 = 0, $$158 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $6;$$053 = 0;$$055 = $3;$$057 = 0;
 L1: while(1) {
  $9 = (_fgetc($8)|0);
  $10 = (($$057) + 2)|0;
  $11 = ($10|0)==($$0|0);
  if ($11) {
   _lily_grow_lexer_buffers($1);
   $12 = HEAP32[$2>>2]|0;
   $13 = HEAP16[$4>>1]|0;
   $14 = $13&65535;
   $$1 = $14;$$156 = $12;
  } else {
   $$1 = $$0;$$156 = $$055;
  }
  $15 = ($9|0)==(-1);
  if ($15) {
   label = 5;
   break;
  }
  $24 = $9&255;
  $25 = (($$156) + ($$057)|0);
  HEAP8[$25>>0] = $24;
  switch ($9|0) {
  case 10: case 13:  {
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
  $34 = $9 & 128;
  $35 = ($34>>>0)>(127);
  $$$053 = $35 ? 1 : $$053;
  $36 = (($$057) + 1)|0;
  $$0 = $$1;$$053 = $$$053;$$055 = $$156;$$057 = $36;
 }
 if ((label|0) == 5) {
  $16 = (($$156) + ($$057)|0);
  HEAP8[$16>>0] = 10;
  $17 = (($$057) + 1)|0;
  $18 = (($$156) + ($17)|0);
  HEAP8[$18>>0] = 0;
  $19 = ($$057|0)!=(0);
  $20 = $19&1;
  $21 = ((($1)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20))|0;
  HEAP32[$21>>2] = $23;
  $$158 = $$057;
 }
 else if ((label|0) == 7) {
  $26 = ($9|0)==(13);
  $27 = ((($1)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  if ($26) {
   HEAP8[$25>>0] = 10;
   $30 = (_fgetc($8)|0);
   $31 = ($30|0)==(10);
   if (!($31)) {
    (_ungetc($30,$8)|0);
   }
  }
  $32 = (($$057) + 1)|0;
  $33 = (($$156) + ($32)|0);
  HEAP8[$33>>0] = 0;
  $$158 = $32;
 }
 $37 = ($$053|0)==(0);
 if ($37) {
  STACKTOP = sp;return ($$158|0);
 }
 $38 = (_lily_is_valid_utf8($$156)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = ((($1)) + 52|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($1)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer>>2] = $43;
  _lily_raise_err($41,4698,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$158|0);
 }
 return (0)|0;
}
function _read_str_line($0) {
 $0 = $0|0;
 var $$ = 0, $$$052 = 0, $$0 = 0, $$052 = 0, $$054 = 0, $$056 = 0, $$058 = 0, $$1 = 0, $$155 = 0, $$157 = 0, $$159 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $8;$$052 = 0;$$054 = $3;$$056 = $6;$$058 = 0;
 L1: while(1) {
  $9 = (($$058) + 2)|0;
  $10 = ($9|0)==($$056|0);
  if ($10) {
   _lily_grow_lexer_buffers($1);
   $11 = HEAP32[$2>>2]|0;
   $12 = HEAP16[$4>>1]|0;
   $13 = $12&65535;
   $$155 = $11;$$157 = $13;
  } else {
   $$155 = $$054;$$157 = $$056;
  }
  $14 = HEAP8[$$0>>0]|0;
  $15 = ($14<<24>>24)==(0);
  $16 = (($$155) + ($$058)|0);
  if ($15) {
   label = 5;
   break;
  }
  HEAP8[$16>>0] = $14;
  $24 = HEAP8[$$0>>0]|0;
  switch ($24<<24>>24) {
  case 10: case 13:  {
   label = 7;
   break L1;
   break;
  }
  default: {
  }
  }
  $37 = ($24<<24>>24)<(0);
  $$$052 = $37 ? 1 : $$052;
  $38 = (($$058) + 1)|0;
  $39 = ((($$0)) + 1|0);
  $$0 = $39;$$052 = $$$052;$$054 = $$155;$$056 = $$157;$$058 = $38;
 }
 if ((label|0) == 5) {
  HEAP8[$16>>0] = 10;
  $17 = (($$058) + 1)|0;
  $18 = (($$155) + ($17)|0);
  HEAP8[$18>>0] = 0;
  $19 = ($$058|0)!=(0);
  $20 = $19&1;
  $21 = ((($1)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20))|0;
  HEAP32[$21>>2] = $23;
  $$159 = $$058;$$2 = $$0;
 }
 else if ((label|0) == 7) {
  $25 = ((($1)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = HEAP8[$$0>>0]|0;
  $29 = ($28<<24>>24)==(13);
  if ($29) {
   HEAP8[$16>>0] = 10;
   $30 = ((($$0)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(10);
   $33 = ((($$0)) + 2|0);
   $$ = $32 ? $33 : $30;
   $$1 = $$;
  } else {
   $34 = ((($$0)) + 1|0);
   $$1 = $34;
  }
  $35 = (($$058) + 1)|0;
  $36 = (($$155) + ($35)|0);
  HEAP8[$36>>0] = 0;
  $$159 = $35;$$2 = $$1;
 }
 HEAP32[$7>>2] = $$2;
 $40 = ($$052|0)==(0);
 if ($40) {
  STACKTOP = sp;return ($$159|0);
 }
 $41 = (_lily_is_valid_utf8($$155)|0);
 $42 = ($41|0)==(0);
 if ($42) {
  $43 = ((($1)) + 52|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($1)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$vararg_buffer>>2] = $46;
  _lily_raise_err($44,4698,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$159|0);
 }
 return (0)|0;
}
function _lily_grow_lexer_buffers($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = ((($0)) + 26|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==($2<<16>>16);
 if ($7) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_lily_realloc($9,$4)|0);
  HEAP32[$8>>2] = $10;
  $11 = $4&65535;
  HEAP16[$5>>1] = $11;
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_lily_realloc($13,$4)|0);
 HEAP32[$12>>2] = $14;
 $15 = $4&65535;
 HEAP16[$1>>1] = $15;
 return;
}
function _lily_lexer_load($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cmp = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_get_entry($0)|0);
 $4 = ((($3)) + 44|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 24|0);
 $6 = $1&65535;
 HEAP16[$5>>1] = $6;
 $7 = ((($3)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 65535;
 $10 = $9 | 4063232;
 HEAP32[$7>>2] = $10;
 $$cmp = ($1>>>0)>(1);
 if (!($$cmp)) {
  $$0 = $2;
  $17 = ((($3)) + 40|0);
  HEAP32[$17>>2] = $$0;
  (_read_line($0)|0);
  return;
 }
 $11 = (_strlen($2)|0);
 $12 = (($11) + 1)|0;
 $13 = (_lily_malloc($12)|0);
 (_strcpy($13,$2)|0);
 HEAP32[$4>>2] = $13;
 $14 = HEAP32[$7>>2]|0;
 $15 = $14 & 65535;
 $16 = $15 | 3932160;
 HEAP32[$7>>2] = $16;
 $$0 = $13;
 $17 = ((($3)) + 40|0);
 HEAP32[$17>>2] = $$0;
 (_read_line($0)|0);
 return;
}
function _get_entry($0) {
 $0 = $0|0;
 var $$0 = 0, $$054 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   label = 4;
  } else {
   $3 = ((($1)) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = ((($1)) + 52|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     label = 4;
     break;
    }
   }
   $20 = HEAP32[$0>>2]|0;
   $21 = ((($20)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$054 = $20;
   } else {
    $24 = ((($20)) + 52|0);
    $25 = HEAP32[$24>>2]|0;
    $$054 = $25;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $9 = (_lily_malloc(56)|0);
  $10 = HEAP32[$0>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   HEAP32[$0>>2] = $9;
   $$sink = 0;
  } else {
   $12 = ((($10)) + 52|0);
   HEAP32[$12>>2] = $9;
   $13 = HEAP32[$0>>2]|0;
   $$sink = $13;
  }
  $14 = ((($9)) + 48|0);
  HEAP32[$14>>2] = $$sink;
  $15 = ((($9)) + 40|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($9)) + 44|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($9)) + 8|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($9)) + 12|0);
  HEAP16[$18>>1] = 0;
  $19 = ((($9)) + 52|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$9>>2] = $0;
  $$054 = $9;
 }
 $26 = ((($$054)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $72 = ((($0)) + 30|0);
  HEAP16[$72>>1] = 0;
  HEAP32[$0>>2] = $$054;
  return ($$054|0);
 }
 $29 = ((($27)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 $32 = ((($0)) + 28|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 if ($31) {
  $35 = (_lily_malloc($34)|0);
  $$0 = $35;
 } else {
  $36 = ((($27)) + 14|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = ($37&65535)<($33&65535);
  if ($38) {
   $39 = (_lily_realloc($30,$34)|0);
   $$0 = $39;
  } else {
   $$0 = $30;
  }
 }
 $40 = ((($0)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 (_strcpy($$0,$41)|0);
 HEAP32[$29>>2] = $$0;
 $42 = ((($0)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($27)) + 20|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($0)) + 30|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = ((($27)) + 12|0);
 HEAP16[$47>>1] = $46;
 $48 = HEAP16[$32>>1]|0;
 $49 = ((($27)) + 14|0);
 HEAP16[$49>>1] = $48;
 $50 = ((($0)) + 40|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($27)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $51 & 65535;
 $55 = $53 & -65536;
 $56 = $55 | $54;
 HEAP32[$52>>2] = $56;
 $57 = ((($0)) + 44|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($27)) + 4|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($0)) + 32|0);
 $61 = $60;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($27)) + 32|0);
 $68 = $67;
 $69 = $68;
 HEAP32[$69>>2] = $63;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $66;
 HEAP32[$42>>2] = 0;
 $72 = ((($0)) + 30|0);
 HEAP16[$72>>1] = 0;
 HEAP32[$0>>2] = $$054;
 return ($$054|0);
}
function _lily_verify_template($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strncmp($2,4733,5)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $7 = ((($0)) + 30|0);
  HEAP16[$7>>1] = 6;
  STACKTOP = sp;return;
 } else {
  $5 = ((($0)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise_syn($6,4740,$vararg_buffer);
  // unreachable;
 }
}
function _lily_lexer_read_content($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$1 = 0, $$0 = 0, $$048 = 0, $$050 = 0, $$05052 = 0, $$051 = 0, $$053 = 0, $$1 = 0, $$149 = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 30|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(10);
 $10 = ($3&65535)>(2);
 $or$cond = $10 & $9;
 do {
  if ($or$cond) {
   $11 = (($4) + -1)|0;
   $12 = (($6) + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==(62);
   if ($14) {
    $15 = (($4) + -2)|0;
    $16 = (($6) + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(63);
    if ($18) {
     $$1 = 0;
     label = 11;
     break;
    }
   }
   $19 = (($4) + 1)|0;
   $$05052 = 10;$$053 = 0;$45 = $19;
   label = 8;
  } else {
   $$0 = 0;$$048 = $4;$$050 = $8;
   label = 5;
  }
 } while(0);
 while(1) {
  if ((label|0) == 5) {
   label = 0;
   $20 = (($$048) + 1)|0;
   $21 = ($$050<<24>>24)==(60);
   if (!($21)) {
    $$05052 = $$050;$$053 = $$0;$45 = $20;
    label = 8;
    continue;
   }
   $22 = HEAP32[$5>>2]|0;
   $23 = (($22) + ($20)|0);
   $24 = (_strncmp($23,4789,5)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    label = 7;
    break;
   } else {
    $$05052 = 60;$$053 = $$0;$45 = $20;
    label = 8;
    continue;
   }
  }
  else if ((label|0) == 8) {
   label = 0;
   $32 = ((($0)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($$053)|0);
   HEAP8[$34>>0] = $$05052;
   $35 = (($$053) + 1)|0;
   $36 = ((($0)) + 28|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   $39 = (($38) + -1)|0;
   $40 = ($35|0)==($39|0);
   if ($40) {
    label = 9;
    break;
   }
   $46 = ($$05052<<24>>24)==(10);
   if ($46) {
    $$1 = $35;
    label = 11;
    continue;
   } else {
    $$149 = $45;$$3 = $35;
   }
  }
  else if ((label|0) == 11) {
   label = 0;
   $47 = (_read_line($0)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    label = 12;
    break;
   } else {
    $$149 = 0;$$3 = $$1;
   }
  }
  $61 = HEAP32[$5>>2]|0;
  $62 = (($61) + ($$149)|0);
  $63 = HEAP8[$62>>0]|0;
  $$0 = $$3;$$048 = $$149;$$050 = $63;
  label = 5;
 }
 if ((label|0) == 7) {
  $26 = ((($0)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($$0)|0);
  HEAP8[$28>>0] = 0;
  $29 = HEAP32[$26>>2]|0;
  HEAP32[$1>>2] = $29;
  $30 = (($$048) + 6)|0;
  $31 = $30&65535;
  $$051 = 0;$$sink = $31;
  HEAP16[$2>>1] = $$sink;
  return ($$051|0);
 }
 else if ((label|0) == 9) {
  $41 = HEAP32[$32>>2]|0;
  $42 = (($41) + ($35)|0);
  HEAP8[$42>>0] = 0;
  $43 = HEAP32[$32>>2]|0;
  HEAP32[$1>>2] = $43;
  $44 = $45&65535;
  $$051 = 1;$$sink = $44;
  HEAP16[$2>>1] = $$sink;
  return ($$051|0);
 }
 else if ((label|0) == 12) {
  $49 = HEAP32[$0>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 >>> 16;
  $53 = ((($0)) + 40|0);
  HEAP32[$53>>2] = $52;
  $54 = ($$1|0)==(1);
  $55 = ((($0)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  if ($54) {
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(10);
   $$$1 = $58 ? 0 : $$1;
   $$2 = $$$1;
  } else {
   $$2 = $$1;
  }
  $59 = (($56) + ($$2)|0);
  HEAP8[$59>>0] = 0;
  $60 = HEAP32[$55>>2]|0;
  HEAP32[$1>>2] = $60;
  $$051 = 0;$$sink = 0;
  HEAP16[$2>>1] = $$sink;
  return ($$051|0);
 }
 return (0)|0;
}
function _tokname($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(63);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (824 + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _lily_new_buffer_u16($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(12)|0);
 $2 = $0 << 1;
 $3 = (_lily_malloc($2)|0);
 HEAP32[$1>>2] = $3;
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 8|0);
 HEAP32[$5>>2] = $0;
 return ($1|0);
}
function _lily_u16_write_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if ($7) {
  $8 = $6 << 2;
  $9 = $6 << 1;
  HEAP32[$5>>2] = $9;
  $10 = HEAP32[$0>>2]|0;
  $11 = (_lily_realloc($10,$8)|0);
  HEAP32[$0>>2] = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($12) + ($13<<1)|0);
 HEAP16[$14>>1] = $1;
 $15 = (($13) + 1)|0;
 HEAP32[$2>>2] = $15;
 return;
}
function _lily_u16_write_2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 2)|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = $7 << 2;
  $10 = $7 << 1;
  HEAP32[$6>>2] = $10;
  $11 = HEAP32[$0>>2]|0;
  $12 = (_lily_realloc($11,$9)|0);
  HEAP32[$0>>2] = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = (($13) + ($14<<1)|0);
 HEAP16[$15>>1] = $1;
 $16 = (($14) + 1)|0;
 $17 = (($13) + ($16<<1)|0);
 HEAP16[$17>>1] = $2;
 $18 = (($14) + 2)|0;
 HEAP32[$3>>2] = $18;
 return;
}
function _lily_u16_write_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 3)|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = $8 << 2;
  $11 = $8 << 1;
  HEAP32[$7>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = (_lily_realloc($12,$10)|0);
  HEAP32[$0>>2] = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = (($14) + ($15<<1)|0);
 HEAP16[$16>>1] = $1;
 $17 = (($15) + 1)|0;
 $18 = (($14) + ($17<<1)|0);
 HEAP16[$18>>1] = $2;
 $19 = (($15) + 2)|0;
 $20 = (($14) + ($19<<1)|0);
 HEAP16[$20>>1] = $3;
 $21 = (($15) + 3)|0;
 HEAP32[$4>>2] = $21;
 return;
}
function _lily_u16_write_4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4)|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = $9 << 2;
  $12 = $9 << 1;
  HEAP32[$8>>2] = $12;
  $13 = HEAP32[$0>>2]|0;
  $14 = (_lily_realloc($13,$11)|0);
  HEAP32[$0>>2] = $14;
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = HEAP32[$5>>2]|0;
 $17 = (($15) + ($16<<1)|0);
 HEAP16[$17>>1] = $1;
 $18 = (($16) + 1)|0;
 $19 = (($15) + ($18<<1)|0);
 HEAP16[$19>>1] = $2;
 $20 = (($16) + 2)|0;
 $21 = (($15) + ($20<<1)|0);
 HEAP16[$21>>1] = $3;
 $22 = (($16) + 3)|0;
 $23 = (($15) + ($22<<1)|0);
 HEAP16[$23>>1] = $4;
 $24 = (($16) + 4)|0;
 HEAP32[$5>>2] = $24;
 return;
}
function _lily_u16_write_5($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 5)|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = $10 << 2;
  $13 = $10 << 1;
  HEAP32[$9>>2] = $13;
  $14 = HEAP32[$0>>2]|0;
  $15 = (_lily_realloc($14,$12)|0);
  HEAP32[$0>>2] = $15;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$6>>2]|0;
 $18 = (($16) + ($17<<1)|0);
 HEAP16[$18>>1] = $1;
 $19 = (($17) + 1)|0;
 $20 = (($16) + ($19<<1)|0);
 HEAP16[$20>>1] = $2;
 $21 = (($17) + 2)|0;
 $22 = (($16) + ($21<<1)|0);
 HEAP16[$22>>1] = $3;
 $23 = (($17) + 3)|0;
 $24 = (($16) + ($23<<1)|0);
 HEAP16[$24>>1] = $4;
 $25 = (($17) + 4)|0;
 $26 = (($16) + ($25<<1)|0);
 HEAP16[$26>>1] = $5;
 $27 = (($17) + 5)|0;
 HEAP32[$6>>2] = $27;
 return;
}
function _lily_u16_write_6($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 6)|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>($11>>>0);
 if ($12) {
  $13 = $11 << 2;
  $14 = $11 << 1;
  HEAP32[$10>>2] = $14;
  $15 = HEAP32[$0>>2]|0;
  $16 = (_lily_realloc($15,$13)|0);
  HEAP32[$0>>2] = $16;
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$7>>2]|0;
 $19 = (($17) + ($18<<1)|0);
 HEAP16[$19>>1] = $1;
 $20 = (($18) + 1)|0;
 $21 = (($17) + ($20<<1)|0);
 HEAP16[$21>>1] = $2;
 $22 = (($18) + 2)|0;
 $23 = (($17) + ($22<<1)|0);
 HEAP16[$23>>1] = $3;
 $24 = (($18) + 3)|0;
 $25 = (($17) + ($24<<1)|0);
 HEAP16[$25>>1] = $4;
 $26 = (($18) + 4)|0;
 $27 = (($17) + ($26<<1)|0);
 HEAP16[$27>>1] = $5;
 $28 = (($18) + 5)|0;
 $29 = (($17) + ($28<<1)|0);
 HEAP16[$29>>1] = $6;
 $30 = (($18) + 6)|0;
 HEAP32[$7>>2] = $30;
 return;
}
function _lily_u16_write_prep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$5>>2]|0;
 $9 = ($4>>>0)>($8>>>0);
 $10 = $8 << 1;
 if ($9) {
  $12 = $10;
  while(1) {
   $11 = ($4>>>0)>($12>>>0);
   $13 = $12 << 1;
   if ($11) {
    $12 = $13;
   } else {
    break;
   }
  }
  HEAP32[$5>>2] = $12;
  $$lcssa = $13;
 } else {
  $$lcssa = $10;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (_lily_realloc($14,$$lcssa)|0);
 HEAP32[$0>>2] = $15;
 return;
}
function _lily_u16_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = (($1) + ($4<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 HEAP32[$2>>2] = $4;
 return ($6|0);
}
function _lily_u16_inject($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $9 = $7 << 2;
  $10 = $7 << 1;
  HEAP32[$6>>2] = $10;
  $11 = HEAP32[$0>>2]|0;
  $12 = (_lily_realloc($11,$9)|0);
  HEAP32[$0>>2] = $12;
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) - ($1))|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + ($1<<1)|0);
 $17 = ((($16)) + 2|0);
 $18 = $14 << 1;
 _memmove(($17|0),($16|0),($18|0))|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + ($1<<1)|0);
 HEAP16[$22>>1] = $2;
 return;
}
function _lily_free_buffer_u16($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_new_vm_state($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(28)|0);
 $2 = ((($1)) + 24|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (_lily_malloc(64)|0);
 $5 = (_lily_malloc(16)|0);
 HEAP32[$4>>2] = $5;
 HEAP32[$5>>2] = 0;
 $6 = (_lily_malloc(16)|0);
 $7 = ((($4)) + 4|0);
 HEAP32[$7>>2] = $6;
 HEAP32[$6>>2] = 0;
 $8 = (_lily_malloc(16)|0);
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$8>>2] = 0;
 $10 = (_lily_malloc(16)|0);
 $11 = ((($4)) + 12|0);
 HEAP32[$11>>2] = $10;
 HEAP32[$10>>2] = 0;
 $12 = (_lily_malloc(16)|0);
 $13 = ((($4)) + 16|0);
 HEAP32[$13>>2] = $12;
 HEAP32[$12>>2] = 0;
 $14 = (_lily_malloc(16)|0);
 $15 = ((($4)) + 20|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$14>>2] = 0;
 $16 = (_lily_malloc(16)|0);
 $17 = ((($4)) + 24|0);
 HEAP32[$17>>2] = $16;
 HEAP32[$16>>2] = 0;
 $18 = (_lily_malloc(16)|0);
 $19 = ((($4)) + 28|0);
 HEAP32[$19>>2] = $18;
 HEAP32[$18>>2] = 0;
 $20 = (_lily_malloc(16)|0);
 $21 = ((($4)) + 32|0);
 HEAP32[$21>>2] = $20;
 HEAP32[$20>>2] = 0;
 $22 = (_lily_malloc(16)|0);
 $23 = ((($4)) + 36|0);
 HEAP32[$23>>2] = $22;
 HEAP32[$22>>2] = 0;
 $24 = (_lily_malloc(16)|0);
 $25 = ((($4)) + 40|0);
 HEAP32[$25>>2] = $24;
 HEAP32[$24>>2] = 0;
 $26 = (_lily_malloc(16)|0);
 $27 = ((($4)) + 44|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$26>>2] = 0;
 $28 = (_lily_malloc(16)|0);
 $29 = ((($4)) + 48|0);
 HEAP32[$29>>2] = $28;
 HEAP32[$28>>2] = 0;
 $30 = (_lily_malloc(16)|0);
 $31 = ((($4)) + 52|0);
 HEAP32[$31>>2] = $30;
 HEAP32[$30>>2] = 0;
 $32 = (_lily_malloc(16)|0);
 $33 = ((($4)) + 56|0);
 HEAP32[$33>>2] = $32;
 HEAP32[$32>>2] = 0;
 $34 = (_lily_malloc(16)|0);
 $35 = ((($4)) + 60|0);
 HEAP32[$35>>2] = $34;
 HEAP32[$34>>2] = 0;
 $36 = ((($4)) + 64|0);
 $37 = (_lily_malloc(32)|0);
 $38 = (_lily_malloc(32)|0);
 HEAP32[$37>>2] = $4;
 $39 = ((($37)) + 4|0);
 HEAP32[$39>>2] = $4;
 $40 = ((($37)) + 8|0);
 HEAP32[$40>>2] = $36;
 $41 = ((($37)) + 12|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($37)) + 20|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($37)) + 24|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($37)) + 28|0);
 HEAP32[$44>>2] = $38;
 HEAP32[$38>>2] = $4;
 $45 = ((($38)) + 4|0);
 HEAP32[$45>>2] = $4;
 $46 = ((($38)) + 8|0);
 HEAP32[$46>>2] = $36;
 $47 = ((($38)) + 12|0);
 HEAP32[$47>>2] = 0;
 $48 = ((($38)) + 16|0);
 HEAP32[$48>>2] = 0;
 $49 = HEAP32[$4>>2]|0;
 $50 = ((($38)) + 20|0);
 HEAP32[$50>>2] = $49;
 $51 = ((($38)) + 24|0);
 HEAP32[$51>>2] = $37;
 $52 = ((($38)) + 28|0);
 HEAP32[$52>>2] = 0;
 $53 = (_lily_malloc(84)|0);
 $54 = ((($53)) + 4|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($53)) + 8|0);
 HEAP32[$55>>2] = 100;
 $56 = ((($53)) + 76|0);
 HEAP32[$56>>2] = $0;
 $57 = ((($53)) + 48|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($53)) + 56|0);
 $59 = ((($53)) + 12|0);
 $60 = ((($53)) + 60|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($53)) + 64|0);
 HEAP32[$61>>2] = 0;
 $62 = ((($53)) + 16|0);
 ;HEAP32[$62>>2]=0|0;HEAP32[$62+4>>2]=0|0;HEAP32[$62+8>>2]=0|0;HEAP32[$62+12>>2]=0|0;HEAP32[$62+16>>2]=0|0;HEAP32[$62+20>>2]=0|0;HEAP32[$62+24>>2]=0|0;
 HEAP32[$58>>2] = $1;
 HEAP32[$59>>2] = $37;
 HEAP32[$53>>2] = $4;
 $63 = (_lily_new_msgbuf(64)|0);
 $64 = ((($53)) + 68|0);
 HEAP32[$64>>2] = $63;
 return ($53|0);
}
function _lily_free_vm($0) {
 $0 = $0|0;
 var $$046 = 0, $$04756 = 0, $$052 = 0, $$052$in = 0, $$150 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = HEAP32[$2>>2]|0;
   $6 = ((($5)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $10 = ($5|0)==(0|0);
    if ($10) {
     break;
    } else {
     $$04756 = $5;
    }
   } else {
    $9 = $7;
    while(1) {
     $11 = ((($9)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      break;
     } else {
      $9 = $12;
     }
    }
    HEAP32[$2>>2] = $9;
    $$04756 = $9;
   }
   while(1) {
    $14 = ((($$04756)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    _lily_free($$04756);
    $16 = ($15|0)==(0|0);
    if ($16) {
     break;
    } else {
     $$04756 = $15;
    }
   }
  }
 } while(0);
 $17 = ((($0)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  _invoke_gc($0);
 }
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($23) - ($24))|0;
 $26 = ($25|0)>(0);
 if ($26) {
  $27 = $25 >>> 2;
  $$052$in = $27;
  while(1) {
   $$052 = (($$052$in) + -1)|0;
   $28 = (($1) + ($$052<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   _lily_deref($29);
   _lily_free($29);
   $30 = ($$052$in|0)>(1);
   if ($30) {
    $$052$in = $$052;
   } else {
    break;
   }
  }
 }
 _lily_free($1);
 $31 = HEAP32[$20>>2]|0;
 $$046 = $31;
 while(1) {
  $32 = ((($$046)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0|0);
  if ($34) {
   break;
  } else {
   $$046 = $33;
  }
 }
 $35 = ($$046|0)==(0|0);
 if ($35) {
  _destroy_gc_entries($0);
  $39 = ((($0)) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  _lily_free($40);
  $41 = ((($0)) + 68|0);
  $42 = HEAP32[$41>>2]|0;
  _lily_free_msgbuf($42);
  _lily_free($0);
  return;
 } else {
  $$150 = $$046;
 }
 while(1) {
  $36 = ((($$150)) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  _lily_free($$150);
  $38 = ($37|0)==(0|0);
  if ($38) {
   break;
  } else {
   $$150 = $37;
  }
 }
 _destroy_gc_entries($0);
 $39 = ((($0)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 _lily_free($40);
 $41 = ((($0)) + 68|0);
 $42 = HEAP32[$41>>2]|0;
 _lily_free_msgbuf($42);
 _lily_free($0);
 return;
}
function _invoke_gc($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$076$lcssa = 0, $$07684 = 0, $$07897 = 0, $$080 = 0, $$08092 = 0, $$08093 = 0, $$085 = 0, $$1 = 0, $$177 = 0, $$17988 = 0, $$18182 = 0, $$2$lcssa = 0, $$283 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = ($10|0)>(0);
 if ($12) {
  $$07897 = 0;
  while(1) {
   $13 = (($4) + ($$07897<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 196608;
   $17 = ($16|0)==(0);
   if (!($17)) {
    _gc_mark($3,$14);
   }
   $18 = (($$07897) + 1)|0;
   $19 = ($18|0)<($11|0);
   if ($19) {
    $$07897 = $18;
   } else {
    break;
   }
  }
 }
 $20 = ((($0)) + 32|0);
 $$08092 = HEAP32[$20>>2]|0;
 $21 = ($$08092|0)==(0|0);
 if (!($21)) {
  $$08093 = $$08092;
  while(1) {
   $22 = ((($$08093)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==($3|0);
   if (!($24)) {
    $25 = ((($$08093)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if (!($27)) {
     HEAP32[$22>>2] = -1;
     _lily_value_destroy($$08093);
    }
   }
   $28 = ((($$08093)) + 16|0);
   $$080 = HEAP32[$28>>2]|0;
   $29 = ($$080|0)==(0|0);
   if ($29) {
    break;
   } else {
    $$08093 = $$080;
   }
  }
 }
 $30 = HEAP32[$5>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$0>>2]|0;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($11|0)<($35|0);
 if ($36) {
  $37 = HEAP32[130]|0;
  $$17988 = $11;
  while(1) {
   $38 = (($4) + ($$17988<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 65536;
   $42 = ($41|0)==(0);
   if (!($42)) {
    $43 = ((($39)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 20|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==($37|0);
    if ($47) {
     HEAP32[$39>>2] = 0;
    }
   }
   $48 = (($$17988) + 1)|0;
   $exitcond = ($48|0)==($35|0);
   if ($exitcond) {
    break;
   } else {
    $$17988 = $48;
   }
  }
 }
 $49 = ((($0)) + 36|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$20>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $$0$lcssa = $50;$$076$lcssa = 0;$$2$lcssa = 0;
 } else {
  $$07684 = 0;$$085 = $50;$$18182 = $51;$$283 = 0;
  while(1) {
   $53 = ((($$18182)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($$18182)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(-1);
   if ($57) {
    $58 = ((($$18182)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    _lily_free($59);
    $$1 = $$18182;$$177 = $$07684;$$3 = $$283;$storemerge = $$085;
   } else {
    $60 = (($$283) + 1)|0;
    $$1 = $$085;$$177 = $$18182;$$3 = $60;$storemerge = $$07684;
   }
   HEAP32[$53>>2] = $storemerge;
   $61 = ($54|0)==(0|0);
   if ($61) {
    $$0$lcssa = $$1;$$076$lcssa = $$177;$$2$lcssa = $$3;
    break;
   } else {
    $$07684 = $$177;$$085 = $$1;$$18182 = $54;$$283 = $$3;
   }
  }
 }
 $62 = ((($0)) + 44|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63>>>0)>($$2$lcssa>>>0);
 if ($64) {
  $68 = ((($0)) + 40|0);
  HEAP32[$68>>2] = $$2$lcssa;
  HEAP32[$20>>2] = $$076$lcssa;
  HEAP32[$49>>2] = $$0$lcssa;
  return;
 }
 $65 = ((($0)) + 52|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = Math_imul($66, $63)|0;
 HEAP32[$62>>2] = $67;
 $68 = ((($0)) + 40|0);
 HEAP32[$68>>2] = $$2$lcssa;
 HEAP32[$20>>2] = $$076$lcssa;
 HEAP32[$49>>2] = $$0$lcssa;
 return;
}
function _destroy_gc_entries($0) {
 $0 = $0|0;
 var $$in1417 = 0, $$in1516 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$in1417 = $2;
  while(1) {
   $4 = ((($$in1417)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   _lily_free($$in1417);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$in1417 = $5;
   }
  }
 }
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  return;
 } else {
  $$in1516 = $8;
 }
 while(1) {
  $10 = ((($$in1516)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($$in1516);
  $12 = ($11|0)==(0|0);
  if ($12) {
   break;
  } else {
   $$in1516 = $11;
  }
 }
 return;
}
function _gc_mark($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 196608;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = HEAP16[$1>>1]|0;
 $6 = $5 | 2;
 $7 = ($6<<16>>16)!=(11);
 $8 = $2 & 2359296;
 $9 = ($8|0)==(0);
 $or$cond = $9 & $7;
 if (!($or$cond)) {
  _list_marker($0,$1);
  return;
 }
 switch ($5<<16>>16) {
 case 10:  {
  _hash_marker($0,$1);
  return;
  break;
 }
 case 8:  {
  _dynamic_marker($0,$1);
  return;
  break;
 }
 case 7:  {
  _function_marker($0,$1);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _list_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02223 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65536;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($0|0);
   if ($11) {
    return;
   } else {
    HEAP32[$9>>2] = $0;
    break;
   }
  }
 } while(0);
 $12 = ((($1)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 $17 = ((($13)) + 16|0);
 $$02223 = 0;
 while(1) {
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($$02223<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 196608;
  $23 = ($22|0)==(0);
  if (!($23)) {
   _gc_mark($0,$20);
  }
  $24 = (($$02223) + 1)|0;
  $25 = HEAP32[$14>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $$02223 = $24;
  } else {
   break;
  }
 }
 return;
}
function _hash_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = ((($3)) + 16|0);
 $$013 = 0;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($$013<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($10)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   _gc_mark($0,$13);
  }
  $14 = (($$013) + 1)|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14|0)<($15|0);
  if ($16) {
   $$013 = $14;
  } else {
   break;
  }
 }
 return;
}
function _dynamic_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65536;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($0|0);
   if ($11) {
    return;
   } else {
    HEAP32[$9>>2] = $0;
    break;
   }
  }
 } while(0);
 $12 = (_lily_as_container($1)|0);
 $13 = (_lily_con_get($12,0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 196608;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 }
 _gc_mark($0,$13);
 return;
}
function _function_marker($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02930 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 65536;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($1)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($0|0);
   if ($11) {
    return;
   } else {
    HEAP32[$9>>2] = $0;
    break;
   }
  }
 } while(0);
 $12 = ((($1)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($13)) + 12|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ($17<<16>>16)==(0);
 if ($19) {
  return;
 } else {
  $$02930 = 0;
 }
 while(1) {
  $20 = (($15) + ($$02930<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $23 = HEAP32[$21>>2]|0;
   $24 = $23 & 196608;
   $25 = ($24|0)==(0);
   if (!($25)) {
    _gc_mark($0,$21);
   }
  }
  $26 = (($$02930) + 1)|0;
  $exitcond = ($26|0)==($18|0);
  if ($exitcond) {
   break;
  } else {
   $$02930 = $26;
  }
 }
 return;
}
function _lily_value_tag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if (!($6)) {
  _invoke_gc($0);
 }
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $12 = (_lily_malloc(24)|0);
  $$0 = $12;
 } else {
  $10 = ((($8)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$7>>2] = $11;
  $$0 = $8;
 }
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($$0)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($$0)) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$$0>>2] = $17;
 $18 = ((($0)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($$0)) + 16|0);
 HEAP32[$20>>2] = $19;
 HEAP32[$18>>2] = $$0;
 $21 = HEAP32[$13>>2]|0;
 $22 = ((($21)) + 20|0);
 HEAP32[$22>>2] = $$0;
 $23 = HEAP32[$2>>2]|0;
 $24 = (($23) + 1)|0;
 HEAP32[$2>>2] = $24;
 $25 = HEAP32[$1>>2]|0;
 $26 = $25 | 65536;
 HEAP32[$1>>2] = $26;
 return;
}
function _lily_new_bytestring_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 _memcpy(($3|0),($0|0),($1|0))|0;
 $4 = (($3) + ($1)|0);
 HEAP8[$4>>0] = 0;
 $5 = (_new_sv($3,$1)|0);
 return ($5|0);
}
function _new_sv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(12)|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $1;
 return ($2|0);
}
function _lily_new_string_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_lily_malloc($2)|0);
 (_strcpy($3,$0)|0);
 $4 = (_new_sv($3,$1)|0);
 return ($4|0);
}
function _grow_vm_registers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$052 = 0, $$05360 = 0, $$057 = 0, $$1 = 0, $$1$in = 0, $$1$in54 = 0, $$155 = 0, $$156 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = $6;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = (($9) + ($1))|0;
 $$052 = $9;
 while(1) {
  $11 = $$052 << 1;
  $12 = ($11|0)<($10|0);
  if ($12) {
   $$052 = $11;
  } else {
   break;
  }
 }
 $13 = $$052 << 3;
 $14 = (_lily_realloc($6,$13)|0);
 HEAP32[$0>>2] = $14;
 $15 = ($9|0)<($11|0);
 if ($15) {
  $$05360 = $9;
  while(1) {
   $16 = (_lily_malloc(16)|0);
   HEAP32[$16>>2] = 0;
   $17 = (($14) + ($$05360<<2)|0);
   HEAP32[$17>>2] = $16;
   $18 = (($$05360) + 1)|0;
   $exitcond = ($18|0)==($11|0);
   if ($exitcond) {
    break;
   } else {
    $$05360 = $18;
   }
  }
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + ($11<<2)|0);
 $21 = HEAP32[$2>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $$057 = $21;
  while(1) {
   $24 = HEAP32[$$057>>2]|0;
   $25 = (($24) - ($7))|0;
   $26 = $25 >> 2;
   $27 = (($14) + ($26<<2)|0);
   HEAP32[$$057>>2] = $27;
   $28 = ((($$057)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) - ($7))|0;
   $31 = $30 >> 2;
   $32 = (($14) + ($31<<2)|0);
   HEAP32[$28>>2] = $32;
   $33 = ((($$057)) + 8|0);
   HEAP32[$33>>2] = $20;
   $34 = ((($$057)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    break;
   } else {
    $$057 = $35;
   }
  }
 }
 $$1$in54 = ((($21)) + 28|0);
 $$155 = HEAP32[$$1$in54>>2]|0;
 $23 = ($$155|0)==(0|0);
 if ($23) {
  return;
 } else {
  $$156 = $$155;
 }
 while(1) {
  $37 = ((($$156)) + 8|0);
  HEAP32[$37>>2] = $20;
  $$1$in = ((($$156)) + 28|0);
  $$1 = HEAP32[$$1$in>>2]|0;
  $38 = ($$1|0)==(0|0);
  if ($38) {
   break;
  } else {
   $$156 = $$1;
  }
 }
 return;
}
function _lily_push_bytestring($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  _grow_vm_registers($0,1);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 524288;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lily_deref($11);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 4|0);
 HEAP32[$5>>2] = $16;
 $17 = (($2) + 1)|0;
 $18 = (_lily_malloc($17)|0);
 _memcpy(($18|0),($1|0),($2|0))|0;
 $19 = (($18) + ($2)|0);
 HEAP8[$19>>0] = 0;
 $20 = (_new_sv($18,$2)|0);
 HEAP32[$11>>2] = 524293;
 $21 = ((($11)) + 8|0);
 HEAP32[$21>>2] = $20;
 return;
}
function _lily_push_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  _grow_vm_registers($0,1);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 524288;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _lily_deref($10);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14)) + 4|0);
 HEAP32[$4>>2] = $15;
 HEAP32[$10>>2] = 4;
 $16 = $1&255;
 $17 = ((($10)) + 8|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $16;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 return;
}
function _lily_push_dynamic($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  _grow_vm_registers($0,1);
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 524288;
 $12 = ($11|0)==(0);
 if (!($12)) {
  _lily_deref($9);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($13)) + 4|0);
 HEAP32[$3>>2] = $14;
 $15 = (_new_container(8,1)|0);
 HEAP32[$9>>2] = 4980744;
 $16 = ((($9)) + 8|0);
 HEAP32[$16>>2] = $15;
 return ($15|0);
}
function _new_container($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(24)|0);
 $3 = $1 << 2;
 $4 = (_lily_malloc($3)|0);
 $5 = ((($2)) + 16|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$2>>2] = 1;
 $6 = ((($2)) + 8|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($2)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 4|0);
 HEAP16[$8>>1] = $0;
 $9 = ((($2)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = ($1|0)>(0);
 if ($10) {
  $$021 = 0;
 } else {
  return ($2|0);
 }
 while(1) {
  $11 = (_lily_malloc(16)|0);
  HEAP32[$11>>2] = 0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($$021<<2)|0);
  HEAP32[$13>>2] = $11;
  $14 = (($$021) + 1)|0;
  $exitcond = ($14|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$021 = $14;
  }
 }
 return ($2|0);
}
function _lily_push_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  _grow_vm_registers($0,1);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 524288;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lily_deref($11);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 4|0);
 HEAP32[$5>>2] = $16;
 $17 = (_lily_malloc(16)|0);
 $18 = (_strchr($2,43)|0);
 $19 = ($18|0)!=(0|0);
 HEAP32[$17>>2] = 1;
 $20 = ((($17)) + 12|0);
 HEAP32[$20>>2] = $1;
 $21 = HEAP8[$2>>0]|0;
 $22 = ($21<<24>>24)==(114);
 $23 = $19 | $22;
 $24 = $23&1;
 $25 = ((($17)) + 4|0);
 HEAP8[$25>>0] = $24;
 $26 = HEAP8[$2>>0]|0;
 $27 = ($26<<24>>24)==(119);
 $28 = $19 | $27;
 $29 = $28&1;
 $30 = ((($17)) + 5|0);
 HEAP8[$30>>0] = $29;
 $31 = ((($17)) + 6|0);
 HEAP8[$31>>0] = 0;
 HEAP32[$11>>2] = 524300;
 $32 = ((($11)) + 8|0);
 HEAP32[$32>>2] = $17;
 return;
}
function _lily_push_foreign($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if ($10) {
  _grow_vm_registers($0,1);
 }
 $11 = HEAP32[$6>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 524288;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _lily_deref($12);
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = ((($16)) + 4|0);
 HEAP32[$6>>2] = $17;
 $18 = ($3*12)|0;
 $19 = (_lily_malloc($18)|0);
 HEAP32[$19>>2] = 1;
 $20 = ((($19)) + 4|0);
 HEAP16[$20>>1] = $1;
 $21 = ((($19)) + 8|0);
 HEAP32[$21>>2] = $2;
 $22 = $1&65535;
 $23 = $22 | 1572864;
 HEAP32[$12>>2] = $23;
 $24 = ((($12)) + 8|0);
 HEAP32[$24>>2] = $19;
 return ($19|0);
}
function _lily_push_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  _grow_vm_registers($0,1);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 524288;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _lily_deref($10);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14)) + 4|0);
 HEAP32[$4>>2] = $15;
 $16 = (_lily_new_hash_raw($1)|0);
 HEAP32[$10>>2] = 524298;
 $17 = ((($10)) + 8|0);
 HEAP32[$17>>2] = $16;
 return ($16|0);
}
function _lily_push_instance($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  _grow_vm_registers($0,1);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 524288;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lily_deref($11);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 4|0);
 HEAP32[$5>>2] = $16;
 $17 = (_new_container($1,$2)|0);
 $18 = $1&65535;
 $19 = $18 | 4980736;
 HEAP32[$11>>2] = $19;
 $20 = ((($11)) + 8|0);
 HEAP32[$20>>2] = $17;
 return ($17|0);
}
function _lily_push_integer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  _grow_vm_registers($0,1);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 524288;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lily_deref($11);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 4|0);
 HEAP32[$5>>2] = $16;
 HEAP32[$11>>2] = 1;
 $17 = ((($11)) + 8|0);
 $18 = $17;
 $19 = $18;
 HEAP32[$19>>2] = $1;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $2;
 return;
}
function _lily_push_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  _grow_vm_registers($0,1);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 524288;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _lily_deref($10);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14)) + 4|0);
 HEAP32[$4>>2] = $15;
 $16 = (_new_container(9,$1)|0);
 HEAP32[$10>>2] = 4718601;
 $17 = ((($10)) + 8|0);
 HEAP32[$17>>2] = $16;
 return ($16|0);
}
function _lily_push_super($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 262144;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($6)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 6|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(0);
  if (!($14)) {
   HEAP16[$12>>1] = 0;
   _lily_push_value($0,$6);
   $$1 = $11;
   return ($$1|0);
  }
 }
 $15 = (_lily_push_instance($0,$1,$2)|0);
 $$1 = $15;
 return ($$1|0);
}
function _lily_push_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  _grow_vm_registers($0,1);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 524288;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _lily_deref($10);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14)) + 4|0);
 HEAP32[$4>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = $16 & 524288;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = ((($1)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$20>>2] = $22;
 }
 $23 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $23;
 $24 = ((($1)) + 8|0);
 $25 = ((($10)) + 8|0);
 $26 = $24;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $25;
 $33 = $32;
 HEAP32[$33>>2] = $28;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 return;
}
function _lily_push_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  _grow_vm_registers($0,1);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 524288;
 $13 = ($12|0)==(0);
 if (!($13)) {
  _lily_deref($10);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14)) + 4|0);
 HEAP32[$4>>2] = $15;
 $16 = (_strlen($1)|0);
 $17 = (($16) + 1)|0;
 $18 = (_lily_malloc($17)|0);
 (_strcpy($18,$1)|0);
 $19 = (_new_sv($18,$16)|0);
 HEAP32[$10>>2] = 524291;
 $20 = ((($10)) + 8|0);
 HEAP32[$20>>2] = $19;
 return;
}
function _lily_push_string_sized($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  _grow_vm_registers($0,1);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 524288;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lily_deref($11);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 4|0);
 HEAP32[$5>>2] = $16;
 $17 = (($2) + 1)|0;
 $18 = (_lily_malloc($17)|0);
 _memcpy(($18|0),($1|0),($2|0))|0;
 $19 = (($18) + ($2)|0);
 HEAP8[$19>>0] = 0;
 $20 = (_new_sv($18,$2)|0);
 HEAP32[$11>>2] = 524291;
 $21 = ((($11)) + 8|0);
 HEAP32[$21>>2] = $20;
 return;
}
function _lily_push_unit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  _grow_vm_registers($0,1);
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 524288;
 $12 = ($11|0)==(0);
 if (!($12)) {
  _lily_deref($9);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($13)) + 4|0);
 HEAP32[$3>>2] = $14;
 HEAP32[$9>>2] = 26;
 $15 = ((($9)) + 8|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 return;
}
function _lily_push_variant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  _grow_vm_registers($0,1);
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 524288;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _lily_deref($11);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($15)) + 4|0);
 HEAP32[$5>>2] = $16;
 $17 = (_new_container($1,$2)|0);
 $18 = $1&65535;
 $19 = $18 | 6815744;
 HEAP32[$11>>2] = $19;
 $20 = ((($11)) + 8|0);
 HEAP32[$20>>2] = $17;
 return ($17|0);
}
function _lily_return_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _lily_deref($5);
 }
 HEAP32[$5>>2] = 6;
 $9 = ($1|0)<(0);
 $10 = $9 << 31 >> 31;
 $11 = ((($5)) + 8|0);
 $12 = $11;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 return;
}
function _lily_return_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _lily_deref($5);
 }
 HEAP32[$5>>2] = 4;
 $9 = $1&255;
 $10 = ((($5)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 return;
}
function _lily_return_double($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 524288;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _lily_deref($5);
 }
 HEAP32[$5>>2] = 2;
 $9 = ((($5)) + 8|0);
 HEAPF64[$9>>3] = $1;
 return;
}
function _lily_return_integer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 524288;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _lily_deref($6);
 }
 HEAP32[$6>>2] = 1;
 $10 = ((($6)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $2;
 return;
}
function _lily_return_none($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 524288;
 $7 = ($6|0)==(0);
 if (!($7)) {
  _lily_deref($4);
 }
 HEAP32[$4>>2] = 2097167;
 $8 = ((($4)) + 8|0);
 HEAP32[$8>>2] = 0;
 return;
}
function _lily_return_super($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + -4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 262144;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = ((($4)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($8)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)==($15|0);
  if ($16) {
   return;
  }
 }
 $17 = $9 & 524288;
 $18 = ($17|0)==(0);
 if (!($18)) {
  _lily_deref($4);
 }
 ;HEAP32[$4>>2]=HEAP32[$8>>2]|0;HEAP32[$4+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$8+12>>2]|0;
 HEAP32[$8>>2] = 0;
 return;
}
function _lily_return_top($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 524288;
 $7 = ($6|0)==(0);
 if (!($7)) {
  _lily_deref($4);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + -4|0);
 $12 = HEAP32[$11>>2]|0;
 ;HEAP32[$4>>2]=HEAP32[$12>>2]|0;HEAP32[$4+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$12+12>>2]|0;
 HEAP32[$12>>2] = 0;
 return;
}
function _lily_return_unit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 524288;
 $7 = ($6|0)==(0);
 if (!($7)) {
  _lily_deref($4);
 }
 HEAP32[$4>>2] = 26;
 $8 = ((($4)) + 8|0);
 HEAP32[$8>>2] = 0;
 return;
}
function _lily_return_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_value_assign($5,$1);
 return;
}
function _vm_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1&255;
 $6 = (($4) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 72|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($5) + -19)|0;
  $12 = (1076 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_lily_dynaload_exception($10,$13)|0);
  $15 = HEAP32[$9>>2]|0;
  $16 = ((($15)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) + ($5<<2)|0);
  HEAP32[$22>>2] = $14;
  $$0 = $14;
 } else {
  $$0 = $7;
 }
 $23 = ((($0)) + 64|0);
 HEAP32[$23>>2] = $$0;
 $24 = ((($0)) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_lily_mb_flush($27)|0);
 _lily_mb_add($28,$2);
 _dispatch_exception($0);
 // unreachable;
}
function _dispatch_exception($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$0$in121 = 0, $$0122 = 0, $$0126 = 0, $$077$ph = 0, $$1 = 0, $$287 = 0, $$388 = 0, $$393 = 0, $$cast = 0, $$lcssa = 0, $$old2 = 0, $$old2123 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $$0$in121 = ((($6)) + 24|0);
 $$0122 = HEAP32[$$0$in121>>2]|0;
 $$old2123 = ($$0122|0)==(0|0);
 L1: do {
  if ($$old2123) {
   $$077$ph = 0;
  } else {
   $7 = ((($0)) + 20|0);
   $8 = ((($0)) + 12|0);
   $9 = ((($0)) + 4|0);
   $$0126 = $$0122;
   L3: while(1) {
    $$1 = $$0126;
    while(1) {
     $10 = ((($$1)) + 12|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(1);
     $13 = HEAP32[$$1>>2]|0;
     if ($12) {
      break;
     }
     $18 = ((($13)) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($$1)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (($21) + ($23<<1)|0);
     $25 = HEAP16[$24>>1]|0;
     $26 = $25&65535;
     $27 = (($23) + -1)|0;
     $28 = (($27) + ($26))|0;
     $$287 = $28;
     while(1) {
      $29 = HEAP32[$7>>2]|0;
      $30 = (($$287) + 2)|0;
      $31 = (($21) + ($30<<1)|0);
      $32 = HEAP16[$31>>1]|0;
      $33 = $32&65535;
      $34 = (($29) + ($33<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (_lily_class_greater_eq($35,$4)|0);
      $37 = ($36|0)==(0);
      if (!($37)) {
       break L3;
      }
      $42 = (($$287) + 3)|0;
      $43 = (($21) + ($42<<1)|0);
      $44 = HEAP16[$43>>1]|0;
      $45 = $44&65535;
      $$388 = (($45) + ($$287))|0;
      $not$ = ($44<<16>>16)==(0);
      if ($not$) {
       break;
      } else {
       $$287 = $$388;
      }
     }
     $46 = ((($$1)) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      $$077$ph = 0;
      break L1;
     } else {
      $$1 = $47;
     }
    }
    HEAP32[$8>>2] = $13;
    $14 = ((($$1)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$9>>2] = $15;
    $16 = ((($$1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    FUNCTION_TABLE_vi[$17 & 127]($0);
    $$0$in = ((($$1)) + 24|0);
    $$0 = HEAP32[$$0$in>>2]|0;
    $$old2 = ($$0|0)==(0|0);
    if ($$old2) {
     $$077$ph = 0;
     break L1;
    } else {
     $$0126 = $$0;
    }
   }
   $38 = (($$287) + 4)|0;
   $39 = (($21) + ($38<<1)|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = ($40<<16>>16)==(52);
   if ($41) {
    $49 = HEAP32[$$1>>2]|0;
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($39)) + 2|0);
    $52 = HEAP16[$51>>1]|0;
    $53 = $52&65535;
    $54 = (($50) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($0)) + 60|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0|0);
    if ($58) {
     _make_proper_exception_val($0,$4,$55);
    } else {
     _fixup_exception_val($0,$55);
    }
    $59 = ((($39)) + 4|0);
    $$393 = $59;
   } else {
    $$393 = $39;
   }
   $60 = ((($0)) + 60|0);
   HEAP32[$60>>2] = 0;
   HEAP32[$3>>2] = 0;
   $61 = HEAP32[$$1>>2]|0;
   $62 = ((($0)) + 12|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($$1)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($0)) + 4|0);
   HEAP32[$65>>2] = $64;
   $$cast = $61;
   $66 = ((($$cast)) + 12|0);
   HEAP32[$66>>2] = $$393;
   HEAP32[$5>>2] = $$1;
   $67 = ((($$1)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   $$077$ph = $69;
  }
 } while(0);
 $70 = HEAP32[$2>>2]|0;
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==($$077$ph|0);
 if ($72) {
  $$lcssa = $70;
  $76 = ((($$lcssa)) + 8|0);
  _longjmp(($76|0),1);
  // unreachable;
 } else {
  $74 = $71;
 }
 while(1) {
  $73 = HEAP32[$74>>2]|0;
  $75 = ($73|0)==($$077$ph|0);
  if ($75) {
   break;
  } else {
   $74 = $73;
  }
 }
 HEAP32[$2>>2] = $74;
 $$lcssa = $74;
 $76 = ((($$lcssa)) + 8|0);
 _longjmp(($76|0),1);
 // unreachable;
}
function _fixup_exception_val($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_value_assign($1,$3);
 $4 = (_build_traceback_raw($0)|0);
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_con_get($6,1)|0);
 _move_list_f(131072,$7,$4);
 return;
}
function _make_proper_exception_val($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_raw($6)|0);
 $8 = ((($1)) + 8|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = (_new_container($9,2)|0);
 $11 = (_lily_new_string_raw($7)|0);
 $12 = ((($10)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 _move_string($14,$11);
 $15 = HEAP32[$12>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_build_traceback_raw($0)|0);
 _move_list_f(0,$17,$18);
 _move_instance_f(131072,$2,$10);
 return;
}
function _move_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $1;
 HEAP32[$0>>2] = 524291;
 return;
}
function _build_traceback_raw($0) {
 $0 = $0|0;
 var $$03941 = 0, $$040 = 0, $$042 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_msgbuf_get($0)|0);
 $7 = (_new_container(9,$5)|0);
 $8 = ($5|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return ($7|0);
 }
 $9 = ((($7)) + 16|0);
 $$03941 = $5;$$042 = $3;
 while(1) {
  $10 = ((($$042)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  dest=$1; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $14 = ((($11)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$040 = 4967;
  } else {
   $17 = HEAP32[$13>>2]|0;
   $18 = ((($$042)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + -2|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21&65535;
   HEAP32[$vararg_buffer>>2] = $22;
   (_sprintf($1,4963,$vararg_buffer)|0);
   $$040 = $17;
  }
  $23 = ((($13)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $$040;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $1;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $24;
  $25 = (_lily_mb_sprintf($6,4971,$vararg_buffer1)|0);
  $26 = (_lily_new_string_raw($25)|0);
  $27 = HEAP32[$9>>2]|0;
  $28 = (($$03941) + -1)|0;
  $29 = (($27) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  _move_string($30,$26);
  $31 = ((($$042)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($$03941|0)>(1);
  if ($33) {
   $$03941 = $28;$$042 = $32;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($7|0);
}
function _move_list_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = $0 | 786441;
 HEAP32[$1>>2] = $7;
 return;
}
function _move_instance_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($2)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 | $0;
 $11 = $10 | 4980736;
 HEAP32[$1>>2] = $11;
 return;
}
function _lily_msgbuf_get($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_lily_mb_flush($2)|0);
 return ($3|0);
}
function _lily_IndexError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_flush($6)|0);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($7,$1,$2);
 $8 = (_lily_mb_raw($7)|0);
 _vm_error($0,24,$8);
 // unreachable;
}
function _lily_IOError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_flush($6)|0);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($7,$1,$2);
 $8 = (_lily_mb_raw($7)|0);
 _vm_error($0,20,$8);
 // unreachable;
}
function _lily_RuntimeError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_flush($6)|0);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($7,$1,$2);
 $8 = (_lily_mb_raw($7)|0);
 _vm_error($0,22,$8);
 // unreachable;
}
function _lily_ValueError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_flush($6)|0);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($7,$1,$2);
 $8 = (_lily_mb_raw($7)|0);
 _vm_error($0,23,$8);
 // unreachable;
}
function _lily_builtin__calltrace($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $7;
 $8 = (_build_traceback_raw($0)|0);
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$4>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$4>>2] = $13;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 _move_list_f(0,$15,$8);
 return;
}
function _lily_builtin__print($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[824]|0;
 $2 = (_lily_arg_value($0,0)|0);
 _do_print($0,$1,$2);
 return;
}
function _do_print($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(3);
 if ($4) {
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  (_fputs($8,$1)|0);
  (_fputc(10,$1)|0);
  _lily_return_unit($0);
  return;
 } else {
  $9 = ((($0)) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_lily_mb_flush($10)|0);
  _lily_mb_add_value($11,$0,$2);
  $12 = (_lily_mb_raw($11)|0);
  (_fputs($12,$1)|0);
  (_fputc(10,$1)|0);
  _lily_return_unit($0);
  return;
 }
}
function _lily_stdout_print($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP16[$6>>1]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = $7&65535;
 $10 = (($8) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  _vm_error($0,23,5119);
  // unreachable;
 } else {
  $17 = (_lily_arg_value($0,0)|0);
  _do_print($0,$15,$17);
  return;
 }
}
function _lily_builtin_Dynamic_new($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_push_dynamic($0)|0);
 _lily_con_set($2,0,$1);
 _lily_return_top($0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_value_tag($0,$6);
 return;
}
function _lily_call_prepare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = 3592;
 $5 = ((($3)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _add_call_frame($0);
  HEAP32[$2>>2] = $3;
 }
 $8 = HEAP32[$5>>2]|0;
 $9 = ((($1)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($8)) + 16|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($8)) + 20|0);
 HEAP32[$16>>2] = $15;
 _lily_push_unit($0);
 return;
}
function _add_call_frame($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(32)|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 24|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($1)) + 28|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 28|0);
 HEAP32[$12>>2] = $1;
 HEAP32[$2>>2] = $1;
 return;
}
function _lily_call_result($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_call($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$053 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($3)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($5)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$8>>2]|0;
 $12 = (0 - ($1))|0;
 $13 = (($11) + ($12<<2)|0);
 HEAP32[$8>>2] = $13;
 HEAP32[$5>>2] = $13;
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($7)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[$2>>2] = $5;
  $20 = ((($7)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vi[$21 & 127]($0);
  $22 = ((($5)) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$2>>2] = $23;
  $24 = HEAP32[$14>>2]|0;
  $25 = (($24) + -1)|0;
  HEAP32[$14>>2] = $25;
  return;
 }
 $26 = ((($7)) + 14|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = (($28) - ($1))|0;
 $30 = HEAP32[$10>>2]|0;
 $31 = (($30) + ($29<<2)|0);
 $32 = ((($5)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31>>>0)>($33>>>0);
 if ($34) {
  HEAP32[$2>>2] = $5;
  _grow_vm_registers($0,$29);
 }
 $35 = HEAP32[$10>>2]|0;
 $36 = (($35) + ($29<<2)|0);
 $37 = ($29|0)==(0);
 if (!($37)) {
  $$053 = $35;
  while(1) {
   $38 = HEAP32[$$053>>2]|0;
   _lily_deref($38);
   HEAP32[$38>>2] = 0;
   $39 = ((($$053)) + 4|0);
   $40 = ($39|0)==($36|0);
   if ($40) {
    break;
   } else {
    $$053 = $39;
   }
  }
 }
 $41 = HEAP32[$10>>2]|0;
 $42 = (($41) + ($29<<2)|0);
 HEAP32[$10>>2] = $42;
 HEAP32[$2>>2] = $5;
 _lily_vm_execute($0);
 return;
}
function _lily_vm_execute($0) {
 $0 = $0|0;
 var $$0$reg2mem963$0 = 0, $$0686 = 0, $$0686$shrunk$reg2mem$0 = 0, $$0687$reg2mem957$0 = 0, $$0687$reg2mem957$0$phi = 0, $$0688$reg2mem965$0 = 0, $$0690$reg2mem961$0 = 0, $$0690$reg2mem961$0$phi = 0, $$0691$reg2mem953$0 = 0, $$1$reg2mem955$0 = 0, $$1689$reg2mem959$0 = 0, $$1689$reg2mem959$0$phi = 0, $$1692$reg2mem951$0 = 0, $$lobit = 0, $$lobit$not = 0, $$mask = 0, $$reg2mem967$0 = 0, $$sink$in$reg2mem$0 = 0, $$sink$sink$sink$in$reg2mem$0 = 0, $$sink24$sink$sink$in$reg2mem$0 = 0;
 var $$sink693$reg2mem$0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0;
 var $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0, $343 = 0.0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0;
 var $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0.0, $884 = 0.0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $cond1000 = 0, $cond1001 = 0, $cond1002 = 0, $cond1003 = 0, $cond1004 = 0, $cond1005 = 0, $cond969 = 0, $cond970 = 0, $cond971 = 0, $cond972 = 0, $cond973 = 0, $cond974 = 0, $cond975 = 0;
 var $cond976 = 0, $cond977 = 0, $cond978 = 0, $cond979 = 0, $cond980 = 0, $cond981 = 0, $cond982 = 0, $cond983 = 0, $cond984 = 0, $cond985 = 0, $cond986 = 0, $cond987 = 0, $cond988 = 0, $cond989 = 0, $cond990 = 0, $cond991 = 0, $cond992 = 0, $cond993 = 0, $cond994 = 0, $cond995 = 0;
 var $cond996 = 0, $cond997 = 0, $cond998 = 0, $cond999 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 __THREW__ = 0;
 $9 = (invoke_ii(2,($8|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
 $12 = tempRet0;
 $cond = ($11|0)==(1);
 if ($cond) {
  $$reg2mem967$0 = $12;
 } else {
  $13 = ((($9)) + 8|0);
  _setjmpTable = _saveSetjmp($13,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
  __THREW__ = 0;
  $14 = __THREW__; __THREW__ = 0;
  if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
  $16 = tempRet0;
  $cond969 = ($15|0)==(1);
  if ($cond969) {
   $$reg2mem967$0 = $16;
  } else {
   $$reg2mem967$0 = 0;
  }
 }
 L4: while(1) {
  $17 = ($$reg2mem967$0|0)==(0);
  $18 = HEAP32[$1>>2]|0;
  if ($17) {
   $$0$reg2mem963$0 = $6;$$0688$reg2mem965$0 = $2;
  } else {
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $$0$reg2mem963$0 = $20;$$0688$reg2mem965$0 = $18;
  }
  $21 = ((($$0688$reg2mem965$0)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$18>>2]|0;
  $26 = ((($0)) + 16|0);
  $27 = ((($0)) + 16|0);
  $28 = ((($0)) + 4|0);
  $29 = ((($0)) + 16|0);
  $30 = ((($0)) + 4|0);
  $31 = ((($0)) + 4|0);
  $32 = ((($0)) + 56|0);
  $33 = ((($0)) + 4|0);
  $34 = ((($0)) + 56|0);
  $$0687$reg2mem957$0 = $25;$$0690$reg2mem961$0 = $24;$$1$reg2mem955$0 = $$0$reg2mem963$0;$$1689$reg2mem959$0 = $$0688$reg2mem965$0;
  L9: while(1) {
   $35 = HEAP16[$$1$reg2mem955$0>>1]|0;
   do {
    switch ($35<<16>>16) {
    case 53:  {
     label = 140;
     break L9;
     break;
    }
    case 59:  {
     label = 151;
     break L9;
     break;
    }
    case 1:  {
     $36 = ((($$1$reg2mem955$0)) + 2|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = (($$0687$reg2mem957$0) + ($38<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($$1$reg2mem955$0)) + 4|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = $42&65535;
     $44 = (($$0687$reg2mem957$0) + ($43<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = HEAP32[$40>>2]|0;
     HEAP32[$45>>2] = $46;
     $47 = ((($40)) + 8|0);
     $48 = ((($45)) + 8|0);
     $49 = $47;
     $50 = $49;
     $51 = HEAP32[$50>>2]|0;
     $52 = (($49) + 4)|0;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $55 = $48;
     $56 = $55;
     HEAP32[$56>>2] = $51;
     $57 = (($55) + 4)|0;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $59;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 41:  {
     $60 = HEAP32[$26>>2]|0;
     $61 = ((($$1$reg2mem955$0)) + 2|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62&65535;
     $64 = (($60) + ($63<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ((($$1$reg2mem955$0)) + 4|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67&65535;
     $69 = (($$0687$reg2mem957$0) + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     invoke_vi(1,($70|0));
     $71 = __THREW__; __THREW__ = 0;
     if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = (threwValue); } else { $72 = -1; };
     $73 = tempRet0;
     $cond1005 = ($72|0)==(1);
     if ($cond1005) {
      $$reg2mem967$0 = $73;
      continue L4;
     }
     $74 = ((($65)) + 8|0);
     $75 = ((($70)) + 8|0);
     $76 = $74;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = (($76) + 4)|0;
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = $75;
     $83 = $82;
     HEAP32[$83>>2] = $78;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     $86 = HEAP32[$65>>2]|0;
     HEAP32[$70>>2] = $86;
     $87 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $87;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 45:  {
     $88 = ((($$1$reg2mem955$0)) + 4|0);
     $89 = HEAP16[$88>>1]|0;
     $90 = $89&65535;
     $91 = (($$0687$reg2mem957$0) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     __THREW__ = 0;
     invoke_vi(1,($92|0));
     $93 = __THREW__; __THREW__ = 0;
     if ((($93|0) != 0) & ((threwValue|0) != 0)) { $94 = _testSetjmp(HEAP32[$93>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($94|0) == 0) { _longjmp($93|0, threwValue|0); } tempRet0 = (threwValue); } else { $94 = -1; };
     $95 = tempRet0;
     $cond1004 = ($94|0)==(1);
     if ($cond1004) {
      $$reg2mem967$0 = $95;
      continue L4;
     }
     $96 = ((($92)) + 8|0);
     HEAP32[$96>>2] = 0;
     $97 = ((($$1$reg2mem955$0)) + 2|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = $98&65535;
     $100 = $99 | 2097152;
     HEAP32[$92>>2] = $100;
     $101 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $101;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 42:  {
     $102 = ((($$1$reg2mem955$0)) + 4|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103&65535;
     $105 = (($$0687$reg2mem957$0) + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((($$1$reg2mem955$0)) + 2|0);
     $108 = HEAP16[$107>>1]|0;
     $109 = $108 << 16 >> 16;
     $110 = ($109|0)<(0);
     $111 = $110 << 31 >> 31;
     $112 = ((($106)) + 8|0);
     $113 = $112;
     $114 = $113;
     HEAP32[$114>>2] = $109;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $111;
     HEAP32[$106>>2] = 1;
     $117 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $117;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 43:  {
     $118 = ((($$1$reg2mem955$0)) + 4|0);
     $119 = HEAP16[$118>>1]|0;
     $120 = $119&65535;
     $121 = (($$0687$reg2mem957$0) + ($120<<2)|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($$1$reg2mem955$0)) + 2|0);
     $124 = HEAP16[$123>>1]|0;
     $125 = $124&65535;
     $126 = ((($122)) + 8|0);
     $127 = $126;
     $128 = $127;
     HEAP32[$128>>2] = $125;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = 0;
     HEAP32[$122>>2] = 6;
     $131 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $131;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 44:  {
     $132 = ((($$1$reg2mem955$0)) + 4|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $133&65535;
     $135 = (($$0687$reg2mem957$0) + ($134<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($$1$reg2mem955$0)) + 2|0);
     $138 = HEAP16[$137>>1]|0;
     $$mask = $138 & 255;
     $139 = $$mask&65535;
     $140 = ((($136)) + 8|0);
     $141 = $140;
     $142 = $141;
     HEAP32[$142>>2] = $139;
     $143 = (($141) + 4)|0;
     $144 = $143;
     HEAP32[$144>>2] = 0;
     HEAP32[$136>>2] = 4;
     $145 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $145;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 2:  {
     $146 = ((($$1$reg2mem955$0)) + 2|0);
     $147 = HEAP16[$146>>1]|0;
     $148 = $147&65535;
     $149 = (($$0687$reg2mem957$0) + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ((($$1$reg2mem955$0)) + 4|0);
     $152 = HEAP16[$151>>1]|0;
     $153 = $152&65535;
     $154 = (($$0687$reg2mem957$0) + ($153<<2)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($150)) + 8|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = ((($155)) + 8|0);
     $164 = $163;
     $165 = $164;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($164) + 4)|0;
     $168 = $167;
     $169 = HEAP32[$168>>2]|0;
     $170 = (_i64Add(($166|0),($169|0),($159|0),($162|0))|0);
     $171 = tempRet0;
     $172 = ((($$1$reg2mem955$0)) + 6|0);
     $173 = HEAP16[$172>>1]|0;
     $174 = $173&65535;
     $175 = (($$0687$reg2mem957$0) + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ((($176)) + 8|0);
     $178 = $177;
     $179 = $178;
     HEAP32[$179>>2] = $170;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $171;
     HEAP32[$176>>2] = 1;
     $182 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $182;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 3:  {
     $183 = ((($$1$reg2mem955$0)) + 2|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184&65535;
     $186 = (($$0687$reg2mem957$0) + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ((($$1$reg2mem955$0)) + 4|0);
     $189 = HEAP16[$188>>1]|0;
     $190 = $189&65535;
     $191 = (($$0687$reg2mem957$0) + ($190<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ((($187)) + 8|0);
     $194 = $193;
     $195 = $194;
     $196 = HEAP32[$195>>2]|0;
     $197 = (($194) + 4)|0;
     $198 = $197;
     $199 = HEAP32[$198>>2]|0;
     $200 = ((($192)) + 8|0);
     $201 = $200;
     $202 = $201;
     $203 = HEAP32[$202>>2]|0;
     $204 = (($201) + 4)|0;
     $205 = $204;
     $206 = HEAP32[$205>>2]|0;
     $207 = (_i64Subtract(($196|0),($199|0),($203|0),($206|0))|0);
     $208 = tempRet0;
     $209 = ((($$1$reg2mem955$0)) + 6|0);
     $210 = HEAP16[$209>>1]|0;
     $211 = $210&65535;
     $212 = (($$0687$reg2mem957$0) + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ((($213)) + 8|0);
     $215 = $214;
     $216 = $215;
     HEAP32[$216>>2] = $207;
     $217 = (($215) + 4)|0;
     $218 = $217;
     HEAP32[$218>>2] = $208;
     HEAP32[$213>>2] = 1;
     $219 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $219;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 12:  {
     $220 = ((($$1$reg2mem955$0)) + 2|0);
     $221 = HEAP16[$220>>1]|0;
     $222 = $221&65535;
     $223 = (($$0687$reg2mem957$0) + ($222<<2)|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($$1$reg2mem955$0)) + 4|0);
     $226 = HEAP16[$225>>1]|0;
     $227 = $226&65535;
     $228 = (($$0687$reg2mem957$0) + ($227<<2)|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ((($224)) + 8|0);
     $231 = +HEAPF64[$230>>3];
     $232 = ((($229)) + 8|0);
     $233 = +HEAPF64[$232>>3];
     $234 = $231 + $233;
     $235 = ((($$1$reg2mem955$0)) + 6|0);
     $236 = HEAP16[$235>>1]|0;
     $237 = $236&65535;
     $238 = (($$0687$reg2mem957$0) + ($237<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = ((($239)) + 8|0);
     HEAPF64[$240>>3] = $234;
     HEAP32[$239>>2] = 2;
     $241 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $241;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 13:  {
     $242 = ((($$1$reg2mem955$0)) + 2|0);
     $243 = HEAP16[$242>>1]|0;
     $244 = $243&65535;
     $245 = (($$0687$reg2mem957$0) + ($244<<2)|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ((($$1$reg2mem955$0)) + 4|0);
     $248 = HEAP16[$247>>1]|0;
     $249 = $248&65535;
     $250 = (($$0687$reg2mem957$0) + ($249<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = ((($246)) + 8|0);
     $253 = +HEAPF64[$252>>3];
     $254 = ((($251)) + 8|0);
     $255 = +HEAPF64[$254>>3];
     $256 = $253 - $255;
     $257 = ((($$1$reg2mem955$0)) + 6|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258&65535;
     $260 = (($$0687$reg2mem957$0) + ($259<<2)|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = ((($261)) + 8|0);
     HEAPF64[$262>>3] = $256;
     HEAP32[$261>>2] = 2;
     $263 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $263;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 16:  {
     $264 = ((($$1$reg2mem955$0)) + 2|0);
     $265 = HEAP16[$264>>1]|0;
     $266 = $265&65535;
     $267 = (($$0687$reg2mem957$0) + ($266<<2)|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = ((($$1$reg2mem955$0)) + 4|0);
     $270 = HEAP16[$269>>1]|0;
     $271 = $270&65535;
     $272 = (($$0687$reg2mem957$0) + ($271<<2)|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = HEAP16[$268>>1]|0;
     switch ($274<<16>>16) {
     case 2:  {
      $275 = ((($268)) + 8|0);
      $276 = +HEAPF64[$275>>3];
      $277 = ((($273)) + 8|0);
      $278 = +HEAPF64[$277>>3];
      $279 = $276 == $278;
      $$sink$sink$sink$in$reg2mem$0 = $279;
      break;
     }
     case 1:  {
      $280 = ((($268)) + 8|0);
      $281 = $280;
      $282 = $281;
      $283 = HEAP32[$282>>2]|0;
      $284 = (($281) + 4)|0;
      $285 = $284;
      $286 = HEAP32[$285>>2]|0;
      $287 = ((($273)) + 8|0);
      $288 = $287;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = ($283|0)==($290|0);
      $295 = ($286|0)==($293|0);
      $296 = $294 & $295;
      $$sink$sink$sink$in$reg2mem$0 = $296;
      break;
     }
     case 3:  {
      $297 = ((($268)) + 8|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ((($298)) + 8|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = ((($273)) + 8|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = ((($302)) + 8|0);
      $304 = HEAP32[$303>>2]|0;
      __THREW__ = 0;
      $305 = (invoke_iii(1,($300|0),($304|0))|0);
      $306 = __THREW__; __THREW__ = 0;
      if ((($306|0) != 0) & ((threwValue|0) != 0)) { $307 = _testSetjmp(HEAP32[$306>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($307|0) == 0) { _longjmp($306|0, threwValue|0); } tempRet0 = (threwValue); } else { $307 = -1; };
      $308 = tempRet0;
      $cond1002 = ($307|0)==(1);
      if ($cond1002) {
       $$reg2mem967$0 = $308;
       continue L4;
      }
      $309 = ($305|0)==(0);
      $$sink$sink$sink$in$reg2mem$0 = $309;
      break;
     }
     default: {
      $310 = ((($$1$reg2mem955$0)) + 10|0);
      $311 = ((($$1689$reg2mem959$0)) + 12|0);
      HEAP32[$311>>2] = $310;
      __THREW__ = 0;
      $312 = (invoke_iiii(6,($0|0),($268|0),($273|0))|0);
      $313 = __THREW__; __THREW__ = 0;
      if ((($313|0) != 0) & ((threwValue|0) != 0)) { $314 = _testSetjmp(HEAP32[$313>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($314|0) == 0) { _longjmp($313|0, threwValue|0); } tempRet0 = (threwValue); } else { $314 = -1; };
      $315 = tempRet0;
      $cond1003 = ($314|0)==(1);
      if ($cond1003) {
       $$reg2mem967$0 = $315;
       continue L4;
      }
      $316 = ($312|0)==(1);
      $$sink$sink$sink$in$reg2mem$0 = $316;
     }
     }
     $317 = $$sink$sink$sink$in$reg2mem$0&1;
     $318 = ((($$1$reg2mem955$0)) + 6|0);
     $319 = HEAP16[$318>>1]|0;
     $320 = $319&65535;
     $321 = (($$0687$reg2mem957$0) + ($320<<2)|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = ((($322)) + 8|0);
     $324 = $323;
     $325 = $324;
     HEAP32[$325>>2] = $317;
     $326 = (($324) + 4)|0;
     $327 = $326;
     HEAP32[$327>>2] = 0;
     HEAP32[$322>>2] = 6;
     $328 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $328;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 18:  {
     $329 = ((($$1$reg2mem955$0)) + 2|0);
     $330 = HEAP16[$329>>1]|0;
     $331 = $330&65535;
     $332 = (($$0687$reg2mem957$0) + ($331<<2)|0);
     $333 = HEAP32[$332>>2]|0;
     $334 = ((($$1$reg2mem955$0)) + 4|0);
     $335 = HEAP16[$334>>1]|0;
     $336 = $335&65535;
     $337 = (($$0687$reg2mem957$0) + ($336<<2)|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = HEAP16[$333>>1]|0;
     switch ($339<<16>>16) {
     case 2:  {
      $340 = ((($333)) + 8|0);
      $341 = +HEAPF64[$340>>3];
      $342 = ((($338)) + 8|0);
      $343 = +HEAPF64[$342>>3];
      $344 = $341 > $343;
      $$sink$in$reg2mem$0 = $344;
      label = 33;
      break;
     }
     case 4: case 1:  {
      $345 = ((($333)) + 8|0);
      $346 = $345;
      $347 = $346;
      $348 = HEAP32[$347>>2]|0;
      $349 = (($346) + 4)|0;
      $350 = $349;
      $351 = HEAP32[$350>>2]|0;
      $352 = ((($338)) + 8|0);
      $353 = $352;
      $354 = $353;
      $355 = HEAP32[$354>>2]|0;
      $356 = (($353) + 4)|0;
      $357 = $356;
      $358 = HEAP32[$357>>2]|0;
      $359 = ($351|0)>($358|0);
      $360 = ($348>>>0)>($355>>>0);
      $361 = ($351|0)==($358|0);
      $362 = $361 & $360;
      $363 = $359 | $362;
      $$sink$in$reg2mem$0 = $363;
      label = 33;
      break;
     }
     case 3:  {
      $364 = ((($333)) + 8|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ((($365)) + 8|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ((($338)) + 8|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = ((($369)) + 8|0);
      $371 = HEAP32[$370>>2]|0;
      __THREW__ = 0;
      $372 = (invoke_iii(1,($367|0),($371|0))|0);
      $373 = __THREW__; __THREW__ = 0;
      if ((($373|0) != 0) & ((threwValue|0) != 0)) { $374 = _testSetjmp(HEAP32[$373>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($374|0) == 0) { _longjmp($373|0, threwValue|0); } tempRet0 = (threwValue); } else { $374 = -1; };
      $375 = tempRet0;
      $cond1001 = ($374|0)==(1);
      if ($cond1001) {
       $$reg2mem967$0 = $375;
       continue L4;
      }
      $376 = ($372|0)>(0);
      $$sink$in$reg2mem$0 = $376;
      label = 33;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 33) {
      label = 0;
      $377 = $$sink$in$reg2mem$0&1;
      $378 = ((($$1$reg2mem955$0)) + 6|0);
      $379 = HEAP16[$378>>1]|0;
      $380 = $379&65535;
      $381 = (($$0687$reg2mem957$0) + ($380<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = ((($382)) + 8|0);
      $384 = $383;
      $385 = $384;
      HEAP32[$385>>2] = $377;
      $386 = (($384) + 4)|0;
      $387 = $386;
      HEAP32[$387>>2] = 0;
     }
     $388 = ((($$1$reg2mem955$0)) + 6|0);
     $389 = HEAP16[$388>>1]|0;
     $390 = $389&65535;
     $391 = (($$0687$reg2mem957$0) + ($390<<2)|0);
     $392 = HEAP32[$391>>2]|0;
     HEAP32[$392>>2] = 6;
     $393 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $393;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 19:  {
     $394 = ((($$1$reg2mem955$0)) + 2|0);
     $395 = HEAP16[$394>>1]|0;
     $396 = $395&65535;
     $397 = (($$0687$reg2mem957$0) + ($396<<2)|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = ((($$1$reg2mem955$0)) + 4|0);
     $400 = HEAP16[$399>>1]|0;
     $401 = $400&65535;
     $402 = (($$0687$reg2mem957$0) + ($401<<2)|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = HEAP16[$398>>1]|0;
     switch ($404<<16>>16) {
     case 2:  {
      $405 = ((($398)) + 8|0);
      $406 = +HEAPF64[$405>>3];
      $407 = ((($403)) + 8|0);
      $408 = +HEAPF64[$407>>3];
      $409 = $406 >= $408;
      $410 = $409&1;
      $451 = $410;$454 = 0;
      label = 40;
      break;
     }
     case 4: case 1:  {
      $411 = ((($398)) + 8|0);
      $412 = $411;
      $413 = $412;
      $414 = HEAP32[$413>>2]|0;
      $415 = (($412) + 4)|0;
      $416 = $415;
      $417 = HEAP32[$416>>2]|0;
      $418 = ((($403)) + 8|0);
      $419 = $418;
      $420 = $419;
      $421 = HEAP32[$420>>2]|0;
      $422 = (($419) + 4)|0;
      $423 = $422;
      $424 = HEAP32[$423>>2]|0;
      $425 = ($417|0)>($424|0);
      $426 = ($414>>>0)>=($421>>>0);
      $427 = ($417|0)==($424|0);
      $428 = $427 & $426;
      $429 = $425 | $428;
      $430 = $429&1;
      $451 = $430;$454 = 0;
      label = 40;
      break;
     }
     case 3:  {
      $431 = ((($398)) + 8|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = ((($432)) + 8|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = ((($403)) + 8|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ((($436)) + 8|0);
      $438 = HEAP32[$437>>2]|0;
      __THREW__ = 0;
      $439 = (invoke_iii(1,($434|0),($438|0))|0);
      $440 = __THREW__; __THREW__ = 0;
      if ((($440|0) != 0) & ((threwValue|0) != 0)) { $441 = _testSetjmp(HEAP32[$440>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($441|0) == 0) { _longjmp($440|0, threwValue|0); } tempRet0 = (threwValue); } else { $441 = -1; };
      $442 = tempRet0;
      $cond1000 = ($441|0)==(1);
      if ($cond1000) {
       $$reg2mem967$0 = $442;
       continue L4;
      }
      $$lobit = $439 >>> 31;
      $$lobit$not = $$lobit ^ 1;
      $451 = $$lobit$not;$454 = 0;
      label = 40;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 40) {
      label = 0;
      $443 = ((($$1$reg2mem955$0)) + 6|0);
      $444 = HEAP16[$443>>1]|0;
      $445 = $444&65535;
      $446 = (($$0687$reg2mem957$0) + ($445<<2)|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = ((($447)) + 8|0);
      $449 = $448;
      $450 = $449;
      HEAP32[$450>>2] = $451;
      $452 = (($449) + 4)|0;
      $453 = $452;
      HEAP32[$453>>2] = $454;
     }
     $455 = ((($$1$reg2mem955$0)) + 6|0);
     $456 = HEAP16[$455>>1]|0;
     $457 = $456&65535;
     $458 = (($$0687$reg2mem957$0) + ($457<<2)|0);
     $459 = HEAP32[$458>>2]|0;
     HEAP32[$459>>2] = 6;
     $460 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $460;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 17:  {
     $461 = ((($$1$reg2mem955$0)) + 2|0);
     $462 = HEAP16[$461>>1]|0;
     $463 = $462&65535;
     $464 = (($$0687$reg2mem957$0) + ($463<<2)|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = ((($$1$reg2mem955$0)) + 4|0);
     $467 = HEAP16[$466>>1]|0;
     $468 = $467&65535;
     $469 = (($$0687$reg2mem957$0) + ($468<<2)|0);
     $470 = HEAP32[$469>>2]|0;
     $471 = HEAP16[$465>>1]|0;
     switch ($471<<16>>16) {
     case 2:  {
      $472 = ((($465)) + 8|0);
      $473 = +HEAPF64[$472>>3];
      $474 = ((($470)) + 8|0);
      $475 = +HEAPF64[$474>>3];
      $476 = $473 != $475;
      $$sink24$sink$sink$in$reg2mem$0 = $476;
      break;
     }
     case 1:  {
      $477 = ((($465)) + 8|0);
      $478 = $477;
      $479 = $478;
      $480 = HEAP32[$479>>2]|0;
      $481 = (($478) + 4)|0;
      $482 = $481;
      $483 = HEAP32[$482>>2]|0;
      $484 = ((($470)) + 8|0);
      $485 = $484;
      $486 = $485;
      $487 = HEAP32[$486>>2]|0;
      $488 = (($485) + 4)|0;
      $489 = $488;
      $490 = HEAP32[$489>>2]|0;
      $491 = ($480|0)!=($487|0);
      $492 = ($483|0)!=($490|0);
      $493 = $491 | $492;
      $$sink24$sink$sink$in$reg2mem$0 = $493;
      break;
     }
     case 3:  {
      $494 = ((($465)) + 8|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = ((($495)) + 8|0);
      $497 = HEAP32[$496>>2]|0;
      $498 = ((($470)) + 8|0);
      $499 = HEAP32[$498>>2]|0;
      $500 = ((($499)) + 8|0);
      $501 = HEAP32[$500>>2]|0;
      __THREW__ = 0;
      $502 = (invoke_iii(1,($497|0),($501|0))|0);
      $503 = __THREW__; __THREW__ = 0;
      if ((($503|0) != 0) & ((threwValue|0) != 0)) { $504 = _testSetjmp(HEAP32[$503>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($504|0) == 0) { _longjmp($503|0, threwValue|0); } tempRet0 = (threwValue); } else { $504 = -1; };
      $505 = tempRet0;
      $cond998 = ($504|0)==(1);
      if ($cond998) {
       $$reg2mem967$0 = $505;
       continue L4;
      }
      $506 = ($502|0)!=(0);
      $$sink24$sink$sink$in$reg2mem$0 = $506;
      break;
     }
     default: {
      $507 = ((($$1$reg2mem955$0)) + 10|0);
      $508 = ((($$1689$reg2mem959$0)) + 12|0);
      HEAP32[$508>>2] = $507;
      __THREW__ = 0;
      $509 = (invoke_iiii(6,($0|0),($465|0),($470|0))|0);
      $510 = __THREW__; __THREW__ = 0;
      if ((($510|0) != 0) & ((threwValue|0) != 0)) { $511 = _testSetjmp(HEAP32[$510>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($511|0) == 0) { _longjmp($510|0, threwValue|0); } tempRet0 = (threwValue); } else { $511 = -1; };
      $512 = tempRet0;
      $cond999 = ($511|0)==(1);
      if ($cond999) {
       $$reg2mem967$0 = $512;
       continue L4;
      }
      $513 = ($509|0)!=(1);
      $$sink24$sink$sink$in$reg2mem$0 = $513;
     }
     }
     $514 = $$sink24$sink$sink$in$reg2mem$0&1;
     $515 = ((($$1$reg2mem955$0)) + 6|0);
     $516 = HEAP16[$515>>1]|0;
     $517 = $516&65535;
     $518 = (($$0687$reg2mem957$0) + ($517<<2)|0);
     $519 = HEAP32[$518>>2]|0;
     $520 = ((($519)) + 8|0);
     $521 = $520;
     $522 = $521;
     HEAP32[$522>>2] = $514;
     $523 = (($521) + 4)|0;
     $524 = $523;
     HEAP32[$524>>2] = 0;
     HEAP32[$519>>2] = 6;
     $525 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $525;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 23:  {
     $526 = ((($$1$reg2mem955$0)) + 2|0);
     $527 = HEAP16[$526>>1]|0;
     $528 = $527 << 16 >> 16;
     $529 = (($$1$reg2mem955$0) + ($528<<1)|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $529;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 5:  {
     $530 = ((($$1$reg2mem955$0)) + 2|0);
     $531 = HEAP16[$530>>1]|0;
     $532 = $531&65535;
     $533 = (($$0687$reg2mem957$0) + ($532<<2)|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = ((($$1$reg2mem955$0)) + 4|0);
     $536 = HEAP16[$535>>1]|0;
     $537 = $536&65535;
     $538 = (($$0687$reg2mem957$0) + ($537<<2)|0);
     $539 = HEAP32[$538>>2]|0;
     $540 = ((($534)) + 8|0);
     $541 = $540;
     $542 = $541;
     $543 = HEAP32[$542>>2]|0;
     $544 = (($541) + 4)|0;
     $545 = $544;
     $546 = HEAP32[$545>>2]|0;
     $547 = ((($539)) + 8|0);
     $548 = $547;
     $549 = $548;
     $550 = HEAP32[$549>>2]|0;
     $551 = (($548) + 4)|0;
     $552 = $551;
     $553 = HEAP32[$552>>2]|0;
     $554 = (___muldi3(($550|0),($553|0),($543|0),($546|0))|0);
     $555 = tempRet0;
     $556 = ((($$1$reg2mem955$0)) + 6|0);
     $557 = HEAP16[$556>>1]|0;
     $558 = $557&65535;
     $559 = (($$0687$reg2mem957$0) + ($558<<2)|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = ((($560)) + 8|0);
     $562 = $561;
     $563 = $562;
     HEAP32[$563>>2] = $554;
     $564 = (($562) + 4)|0;
     $565 = $564;
     HEAP32[$565>>2] = $555;
     HEAP32[$560>>2] = 1;
     $566 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $566;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 14:  {
     $567 = ((($$1$reg2mem955$0)) + 2|0);
     $568 = HEAP16[$567>>1]|0;
     $569 = $568&65535;
     $570 = (($$0687$reg2mem957$0) + ($569<<2)|0);
     $571 = HEAP32[$570>>2]|0;
     $572 = ((($$1$reg2mem955$0)) + 4|0);
     $573 = HEAP16[$572>>1]|0;
     $574 = $573&65535;
     $575 = (($$0687$reg2mem957$0) + ($574<<2)|0);
     $576 = HEAP32[$575>>2]|0;
     $577 = ((($571)) + 8|0);
     $578 = +HEAPF64[$577>>3];
     $579 = ((($576)) + 8|0);
     $580 = +HEAPF64[$579>>3];
     $581 = $578 * $580;
     $582 = ((($$1$reg2mem955$0)) + 6|0);
     $583 = HEAP16[$582>>1]|0;
     $584 = $583&65535;
     $585 = (($$0687$reg2mem957$0) + ($584<<2)|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = ((($586)) + 8|0);
     HEAPF64[$587>>3] = $581;
     HEAP32[$586>>2] = 2;
     $588 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $588;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 6:  {
     $589 = ((($$1$reg2mem955$0)) + 4|0);
     $590 = HEAP16[$589>>1]|0;
     $591 = $590&65535;
     $592 = (($$0687$reg2mem957$0) + ($591<<2)|0);
     $593 = HEAP32[$592>>2]|0;
     $594 = ((($593)) + 8|0);
     $595 = $594;
     $596 = $595;
     $597 = HEAP32[$596>>2]|0;
     $598 = (($595) + 4)|0;
     $599 = $598;
     $600 = HEAP32[$599>>2]|0;
     $601 = ($597|0)==(0);
     $602 = ($600|0)==(0);
     $603 = $601 & $602;
     if ($603) {
      label = 54;
      break L9;
     }
     $609 = ((($$1$reg2mem955$0)) + 2|0);
     $610 = HEAP16[$609>>1]|0;
     $611 = $610&65535;
     $612 = (($$0687$reg2mem957$0) + ($611<<2)|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ((($613)) + 8|0);
     $615 = $614;
     $616 = $615;
     $617 = HEAP32[$616>>2]|0;
     $618 = (($615) + 4)|0;
     $619 = $618;
     $620 = HEAP32[$619>>2]|0;
     $621 = (___divdi3(($617|0),($620|0),($597|0),($600|0))|0);
     $622 = tempRet0;
     $623 = ((($$1$reg2mem955$0)) + 6|0);
     $624 = HEAP16[$623>>1]|0;
     $625 = $624&65535;
     $626 = (($$0687$reg2mem957$0) + ($625<<2)|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = ((($627)) + 8|0);
     $629 = $628;
     $630 = $629;
     HEAP32[$630>>2] = $621;
     $631 = (($629) + 4)|0;
     $632 = $631;
     HEAP32[$632>>2] = $622;
     HEAP32[$627>>2] = 1;
     $633 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $633;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 4:  {
     $634 = ((($$1$reg2mem955$0)) + 4|0);
     $635 = HEAP16[$634>>1]|0;
     $636 = $635&65535;
     $637 = (($$0687$reg2mem957$0) + ($636<<2)|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = ((($638)) + 8|0);
     $640 = $639;
     $641 = $640;
     $642 = HEAP32[$641>>2]|0;
     $643 = (($640) + 4)|0;
     $644 = $643;
     $645 = HEAP32[$644>>2]|0;
     $646 = ($642|0)==(0);
     $647 = ($645|0)==(0);
     $648 = $646 & $647;
     if ($648) {
      label = 57;
      break L9;
     }
     $654 = ((($$1$reg2mem955$0)) + 2|0);
     $655 = HEAP16[$654>>1]|0;
     $656 = $655&65535;
     $657 = (($$0687$reg2mem957$0) + ($656<<2)|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = ((($658)) + 8|0);
     $660 = $659;
     $661 = $660;
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + 4)|0;
     $664 = $663;
     $665 = HEAP32[$664>>2]|0;
     $666 = (___remdi3(($662|0),($665|0),($642|0),($645|0))|0);
     $667 = tempRet0;
     $668 = ((($$1$reg2mem955$0)) + 6|0);
     $669 = HEAP16[$668>>1]|0;
     $670 = $669&65535;
     $671 = (($$0687$reg2mem957$0) + ($670<<2)|0);
     $672 = HEAP32[$671>>2]|0;
     $673 = ((($672)) + 8|0);
     $674 = $673;
     $675 = $674;
     HEAP32[$675>>2] = $666;
     $676 = (($674) + 4)|0;
     $677 = $676;
     HEAP32[$677>>2] = $667;
     HEAP32[$672>>2] = 1;
     $678 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $678;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 7:  {
     $679 = ((($$1$reg2mem955$0)) + 2|0);
     $680 = HEAP16[$679>>1]|0;
     $681 = $680&65535;
     $682 = (($$0687$reg2mem957$0) + ($681<<2)|0);
     $683 = HEAP32[$682>>2]|0;
     $684 = ((($$1$reg2mem955$0)) + 4|0);
     $685 = HEAP16[$684>>1]|0;
     $686 = $685&65535;
     $687 = (($$0687$reg2mem957$0) + ($686<<2)|0);
     $688 = HEAP32[$687>>2]|0;
     $689 = ((($683)) + 8|0);
     $690 = $689;
     $691 = $690;
     $692 = HEAP32[$691>>2]|0;
     $693 = (($690) + 4)|0;
     $694 = $693;
     $695 = HEAP32[$694>>2]|0;
     $696 = ((($688)) + 8|0);
     $697 = $696;
     $698 = $697;
     $699 = HEAP32[$698>>2]|0;
     $700 = (($697) + 4)|0;
     $701 = $700;
     $702 = HEAP32[$701>>2]|0;
     $703 = (_bitshift64Shl(($692|0),($695|0),($699|0))|0);
     $704 = tempRet0;
     $705 = ((($$1$reg2mem955$0)) + 6|0);
     $706 = HEAP16[$705>>1]|0;
     $707 = $706&65535;
     $708 = (($$0687$reg2mem957$0) + ($707<<2)|0);
     $709 = HEAP32[$708>>2]|0;
     $710 = ((($709)) + 8|0);
     $711 = $710;
     $712 = $711;
     HEAP32[$712>>2] = $703;
     $713 = (($711) + 4)|0;
     $714 = $713;
     HEAP32[$714>>2] = $704;
     HEAP32[$709>>2] = 1;
     $715 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $715;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 8:  {
     $716 = ((($$1$reg2mem955$0)) + 2|0);
     $717 = HEAP16[$716>>1]|0;
     $718 = $717&65535;
     $719 = (($$0687$reg2mem957$0) + ($718<<2)|0);
     $720 = HEAP32[$719>>2]|0;
     $721 = ((($$1$reg2mem955$0)) + 4|0);
     $722 = HEAP16[$721>>1]|0;
     $723 = $722&65535;
     $724 = (($$0687$reg2mem957$0) + ($723<<2)|0);
     $725 = HEAP32[$724>>2]|0;
     $726 = ((($720)) + 8|0);
     $727 = $726;
     $728 = $727;
     $729 = HEAP32[$728>>2]|0;
     $730 = (($727) + 4)|0;
     $731 = $730;
     $732 = HEAP32[$731>>2]|0;
     $733 = ((($725)) + 8|0);
     $734 = $733;
     $735 = $734;
     $736 = HEAP32[$735>>2]|0;
     $737 = (($734) + 4)|0;
     $738 = $737;
     $739 = HEAP32[$738>>2]|0;
     $740 = (_bitshift64Ashr(($729|0),($732|0),($736|0))|0);
     $741 = tempRet0;
     $742 = ((($$1$reg2mem955$0)) + 6|0);
     $743 = HEAP16[$742>>1]|0;
     $744 = $743&65535;
     $745 = (($$0687$reg2mem957$0) + ($744<<2)|0);
     $746 = HEAP32[$745>>2]|0;
     $747 = ((($746)) + 8|0);
     $748 = $747;
     $749 = $748;
     HEAP32[$749>>2] = $740;
     $750 = (($748) + 4)|0;
     $751 = $750;
     HEAP32[$751>>2] = $741;
     HEAP32[$746>>2] = 1;
     $752 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $752;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 9:  {
     $753 = ((($$1$reg2mem955$0)) + 2|0);
     $754 = HEAP16[$753>>1]|0;
     $755 = $754&65535;
     $756 = (($$0687$reg2mem957$0) + ($755<<2)|0);
     $757 = HEAP32[$756>>2]|0;
     $758 = ((($$1$reg2mem955$0)) + 4|0);
     $759 = HEAP16[$758>>1]|0;
     $760 = $759&65535;
     $761 = (($$0687$reg2mem957$0) + ($760<<2)|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = ((($757)) + 8|0);
     $764 = $763;
     $765 = $764;
     $766 = HEAP32[$765>>2]|0;
     $767 = (($764) + 4)|0;
     $768 = $767;
     $769 = HEAP32[$768>>2]|0;
     $770 = ((($762)) + 8|0);
     $771 = $770;
     $772 = $771;
     $773 = HEAP32[$772>>2]|0;
     $774 = (($771) + 4)|0;
     $775 = $774;
     $776 = HEAP32[$775>>2]|0;
     $777 = $773 & $766;
     $778 = $776 & $769;
     $779 = ((($$1$reg2mem955$0)) + 6|0);
     $780 = HEAP16[$779>>1]|0;
     $781 = $780&65535;
     $782 = (($$0687$reg2mem957$0) + ($781<<2)|0);
     $783 = HEAP32[$782>>2]|0;
     $784 = ((($783)) + 8|0);
     $785 = $784;
     $786 = $785;
     HEAP32[$786>>2] = $777;
     $787 = (($785) + 4)|0;
     $788 = $787;
     HEAP32[$788>>2] = $778;
     HEAP32[$783>>2] = 1;
     $789 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $789;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 10:  {
     $790 = ((($$1$reg2mem955$0)) + 2|0);
     $791 = HEAP16[$790>>1]|0;
     $792 = $791&65535;
     $793 = (($$0687$reg2mem957$0) + ($792<<2)|0);
     $794 = HEAP32[$793>>2]|0;
     $795 = ((($$1$reg2mem955$0)) + 4|0);
     $796 = HEAP16[$795>>1]|0;
     $797 = $796&65535;
     $798 = (($$0687$reg2mem957$0) + ($797<<2)|0);
     $799 = HEAP32[$798>>2]|0;
     $800 = ((($794)) + 8|0);
     $801 = $800;
     $802 = $801;
     $803 = HEAP32[$802>>2]|0;
     $804 = (($801) + 4)|0;
     $805 = $804;
     $806 = HEAP32[$805>>2]|0;
     $807 = ((($799)) + 8|0);
     $808 = $807;
     $809 = $808;
     $810 = HEAP32[$809>>2]|0;
     $811 = (($808) + 4)|0;
     $812 = $811;
     $813 = HEAP32[$812>>2]|0;
     $814 = $810 | $803;
     $815 = $813 | $806;
     $816 = ((($$1$reg2mem955$0)) + 6|0);
     $817 = HEAP16[$816>>1]|0;
     $818 = $817&65535;
     $819 = (($$0687$reg2mem957$0) + ($818<<2)|0);
     $820 = HEAP32[$819>>2]|0;
     $821 = ((($820)) + 8|0);
     $822 = $821;
     $823 = $822;
     HEAP32[$823>>2] = $814;
     $824 = (($822) + 4)|0;
     $825 = $824;
     HEAP32[$825>>2] = $815;
     HEAP32[$820>>2] = 1;
     $826 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $826;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 11:  {
     $827 = ((($$1$reg2mem955$0)) + 2|0);
     $828 = HEAP16[$827>>1]|0;
     $829 = $828&65535;
     $830 = (($$0687$reg2mem957$0) + ($829<<2)|0);
     $831 = HEAP32[$830>>2]|0;
     $832 = ((($$1$reg2mem955$0)) + 4|0);
     $833 = HEAP16[$832>>1]|0;
     $834 = $833&65535;
     $835 = (($$0687$reg2mem957$0) + ($834<<2)|0);
     $836 = HEAP32[$835>>2]|0;
     $837 = ((($831)) + 8|0);
     $838 = $837;
     $839 = $838;
     $840 = HEAP32[$839>>2]|0;
     $841 = (($838) + 4)|0;
     $842 = $841;
     $843 = HEAP32[$842>>2]|0;
     $844 = ((($836)) + 8|0);
     $845 = $844;
     $846 = $845;
     $847 = HEAP32[$846>>2]|0;
     $848 = (($845) + 4)|0;
     $849 = $848;
     $850 = HEAP32[$849>>2]|0;
     $851 = $847 ^ $840;
     $852 = $850 ^ $843;
     $853 = ((($$1$reg2mem955$0)) + 6|0);
     $854 = HEAP16[$853>>1]|0;
     $855 = $854&65535;
     $856 = (($$0687$reg2mem957$0) + ($855<<2)|0);
     $857 = HEAP32[$856>>2]|0;
     $858 = ((($857)) + 8|0);
     $859 = $858;
     $860 = $859;
     HEAP32[$860>>2] = $851;
     $861 = (($859) + 4)|0;
     $862 = $861;
     HEAP32[$862>>2] = $852;
     HEAP32[$857>>2] = 1;
     $863 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $863;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 15:  {
     $864 = ((($$1$reg2mem955$0)) + 4|0);
     $865 = HEAP16[$864>>1]|0;
     $866 = $865&65535;
     $867 = (($$0687$reg2mem957$0) + ($866<<2)|0);
     $868 = HEAP32[$867>>2]|0;
     $869 = ((($868)) + 8|0);
     $870 = +HEAPF64[$869>>3];
     $871 = $870 == 0.0;
     if ($871) {
      label = 65;
      break L9;
     }
     $877 = ((($$1$reg2mem955$0)) + 2|0);
     $878 = HEAP16[$877>>1]|0;
     $879 = $878&65535;
     $880 = (($$0687$reg2mem957$0) + ($879<<2)|0);
     $881 = HEAP32[$880>>2]|0;
     $882 = ((($881)) + 8|0);
     $883 = +HEAPF64[$882>>3];
     $884 = $883 / $870;
     $885 = ((($$1$reg2mem955$0)) + 6|0);
     $886 = HEAP16[$885>>1]|0;
     $887 = $886&65535;
     $888 = (($$0687$reg2mem957$0) + ($887<<2)|0);
     $889 = HEAP32[$888>>2]|0;
     $890 = ((($889)) + 8|0);
     HEAPF64[$890>>3] = $884;
     HEAP32[$889>>2] = 2;
     $891 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $891;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 24:  {
     $892 = ((($$1$reg2mem955$0)) + 4|0);
     $893 = HEAP16[$892>>1]|0;
     $894 = $893&65535;
     $895 = (($$0687$reg2mem957$0) + ($894<<2)|0);
     $896 = HEAP32[$895>>2]|0;
     $897 = HEAP16[$896>>1]|0;
     switch ($897<<16>>16) {
     case 1: case 6:  {
      $898 = ((($896)) + 8|0);
      $899 = $898;
      $900 = $899;
      $901 = HEAP32[$900>>2]|0;
      $902 = (($899) + 4)|0;
      $903 = $902;
      $904 = HEAP32[$903>>2]|0;
      $905 = ($901|0)==(0);
      $906 = ($904|0)==(0);
      $907 = $905 & $906;
      $$0686$shrunk$reg2mem$0 = $907;
      break;
     }
     case 3:  {
      $908 = ((($896)) + 8|0);
      $909 = HEAP32[$908>>2]|0;
      $910 = ((($909)) + 4|0);
      $911 = HEAP32[$910>>2]|0;
      $912 = ($911|0)==(0);
      $$0686$shrunk$reg2mem$0 = $912;
      break;
     }
     case 9:  {
      $913 = ((($896)) + 8|0);
      $914 = HEAP32[$913>>2]|0;
      $915 = ((($914)) + 8|0);
      $916 = HEAP32[$915>>2]|0;
      $917 = ($916|0)==(0);
      $$0686$shrunk$reg2mem$0 = $917;
      break;
     }
     default: {
      $$0686$shrunk$reg2mem$0 = 1;
     }
     }
     $$0686 = $$0686$shrunk$reg2mem$0&1;
     $918 = ((($$1$reg2mem955$0)) + 2|0);
     $919 = HEAP16[$918>>1]|0;
     $920 = $919&65535;
     $921 = ($$0686|0)==($920|0);
     if ($921) {
      $$sink693$reg2mem$0 = 4;
     } else {
      $922 = ((($$1$reg2mem955$0)) + 6|0);
      $923 = HEAP16[$922>>1]|0;
      $924 = $923 << 16 >> 16;
      $$sink693$reg2mem$0 = $924;
     }
     $925 = (($$1$reg2mem955$0) + ($$sink693$reg2mem$0<<1)|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $925;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 28:  {
     $926 = HEAP32[$27>>2]|0;
     $927 = ((($$1$reg2mem955$0)) + 2|0);
     $928 = HEAP16[$927>>1]|0;
     $929 = $928&65535;
     $930 = (($926) + ($929<<2)|0);
     $931 = HEAP32[$930>>2]|0;
     $932 = ((($931)) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $$0691$reg2mem953$0 = $933;
     label = 75;
     break;
    }
    case 29:  {
     $968 = HEAP32[$29>>2]|0;
     $969 = ((($$1$reg2mem955$0)) + 2|0);
     $970 = HEAP16[$969>>1]|0;
     $971 = $970&65535;
     $972 = (($968) + ($971<<2)|0);
     $973 = HEAP32[$972>>2]|0;
     $974 = ((($973)) + 8|0);
     $975 = HEAP32[$974>>2]|0;
     $$1692$reg2mem951$0 = $975;
     label = 83;
     break;
    }
    case 30:  {
     $1007 = ((($$1$reg2mem955$0)) + 2|0);
     $1008 = HEAP16[$1007>>1]|0;
     $1009 = $1008&65535;
     $1010 = (($$0687$reg2mem957$0) + ($1009<<2)|0);
     $1011 = HEAP32[$1010>>2]|0;
     $1012 = ((($1011)) + 8|0);
     $1013 = HEAP32[$1012>>2]|0;
     $1014 = ((($1013)) + 28|0);
     $1015 = HEAP32[$1014>>2]|0;
     $1016 = ($1015|0)==(0|0);
     if ($1016) {
      $$0691$reg2mem953$0 = $1013;
      label = 75;
     } else {
      $$1692$reg2mem951$0 = $1013;
      label = 83;
     }
     break;
    }
    case 58:  {
     __THREW__ = 0;
     invoke_vii(29,($0|0),($$1$reg2mem955$0|0));
     $1017 = __THREW__; __THREW__ = 0;
     if ((($1017|0) != 0) & ((threwValue|0) != 0)) { $1018 = _testSetjmp(HEAP32[$1017>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1018|0) == 0) { _longjmp($1017|0, threwValue|0); } tempRet0 = (threwValue); } else { $1018 = -1; };
     $1019 = tempRet0;
     $cond990 = ($1018|0)==(1);
     if ($cond990) {
      $$reg2mem967$0 = $1019;
      continue L4;
     }
     $1020 = ((($$1$reg2mem955$0)) + 2|0);
     $1021 = HEAP16[$1020>>1]|0;
     $1022 = $1021&65535;
     $1023 = (($1022) + 4)|0;
     $1024 = (($$1$reg2mem955$0) + ($1023<<1)|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1024;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 20:  {
     $1025 = ((($$1$reg2mem955$0)) + 2|0);
     $1026 = HEAP16[$1025>>1]|0;
     $1027 = $1026&65535;
     $1028 = (($$0687$reg2mem957$0) + ($1027<<2)|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = ((($$1$reg2mem955$0)) + 4|0);
     $1031 = HEAP16[$1030>>1]|0;
     $1032 = $1031&65535;
     $1033 = (($$0687$reg2mem957$0) + ($1032<<2)|0);
     $1034 = HEAP32[$1033>>2]|0;
     $1035 = HEAP32[$1029>>2]|0;
     HEAP32[$1034>>2] = $1035;
     $1036 = ((($1029)) + 8|0);
     $1037 = $1036;
     $1038 = $1037;
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = (($1037) + 4)|0;
     $1041 = $1040;
     $1042 = HEAP32[$1041>>2]|0;
     $1043 = ($1039|0)==(0);
     $1044 = ($1042|0)==(0);
     $1045 = $1043 & $1044;
     $1046 = $1045&1;
     $1047 = ((($1034)) + 8|0);
     $1048 = $1047;
     $1049 = $1048;
     HEAP32[$1049>>2] = $1046;
     $1050 = (($1048) + 4)|0;
     $1051 = $1050;
     HEAP32[$1051>>2] = 0;
     $1052 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1052;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 21:  {
     $1053 = ((($$1$reg2mem955$0)) + 2|0);
     $1054 = HEAP16[$1053>>1]|0;
     $1055 = $1054&65535;
     $1056 = (($$0687$reg2mem957$0) + ($1055<<2)|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = ((($$1$reg2mem955$0)) + 4|0);
     $1059 = HEAP16[$1058>>1]|0;
     $1060 = $1059&65535;
     $1061 = (($$0687$reg2mem957$0) + ($1060<<2)|0);
     $1062 = HEAP32[$1061>>2]|0;
     HEAP32[$1062>>2] = 1;
     $1063 = ((($1057)) + 8|0);
     $1064 = $1063;
     $1065 = $1064;
     $1066 = HEAP32[$1065>>2]|0;
     $1067 = (($1064) + 4)|0;
     $1068 = $1067;
     $1069 = HEAP32[$1068>>2]|0;
     $1070 = (_i64Subtract(0,0,($1066|0),($1069|0))|0);
     $1071 = tempRet0;
     $1072 = ((($1062)) + 8|0);
     $1073 = $1072;
     $1074 = $1073;
     HEAP32[$1074>>2] = $1070;
     $1075 = (($1073) + 4)|0;
     $1076 = $1075;
     HEAP32[$1076>>2] = $1071;
     $1077 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1077;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 22:  {
     $1078 = ((($$1$reg2mem955$0)) + 2|0);
     $1079 = HEAP16[$1078>>1]|0;
     $1080 = $1079&65535;
     $1081 = (($$0687$reg2mem957$0) + ($1080<<2)|0);
     $1082 = HEAP32[$1081>>2]|0;
     $1083 = ((($$1$reg2mem955$0)) + 4|0);
     $1084 = HEAP16[$1083>>1]|0;
     $1085 = $1084&65535;
     $1086 = (($$0687$reg2mem957$0) + ($1085<<2)|0);
     $1087 = HEAP32[$1086>>2]|0;
     $1088 = HEAP32[$1082>>2]|0;
     HEAP32[$1087>>2] = $1088;
     $1089 = ((($1082)) + 8|0);
     $1090 = $1089;
     $1091 = $1090;
     $1092 = HEAP32[$1091>>2]|0;
     $1093 = (($1090) + 4)|0;
     $1094 = $1093;
     $1095 = HEAP32[$1094>>2]|0;
     $1096 = $1092 ^ -1;
     $1097 = $1095 ^ -1;
     $1098 = ((($1087)) + 8|0);
     $1099 = $1098;
     $1100 = $1099;
     HEAP32[$1100>>2] = $1096;
     $1101 = (($1099) + 4)|0;
     $1102 = $1101;
     HEAP32[$1102>>2] = $1097;
     $1103 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1103;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 32:  {
     $1104 = ((($$1689$reg2mem959$0)) + 20|0);
     $1105 = HEAP32[$1104>>2]|0;
     __THREW__ = 0;
     invoke_vi(2,($1105|0));
     $1106 = __THREW__; __THREW__ = 0;
     if ((($1106|0) != 0) & ((threwValue|0) != 0)) { $1107 = _testSetjmp(HEAP32[$1106>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1107|0) == 0) { _longjmp($1106|0, threwValue|0); } tempRet0 = (threwValue); } else { $1107 = -1; };
     $1108 = tempRet0;
     $cond989 = ($1107|0)==(1);
     if ($cond989) {
      $$reg2mem967$0 = $1108;
      continue L4;
     }
     label = 99;
     break;
    }
    case 31:  {
     $1109 = ((($$1689$reg2mem959$0)) + 20|0);
     $1110 = HEAP32[$1109>>2]|0;
     $1111 = ((($$1$reg2mem955$0)) + 2|0);
     $1112 = HEAP16[$1111>>1]|0;
     $1113 = $1112&65535;
     $1114 = (($$0687$reg2mem957$0) + ($1113<<2)|0);
     $1115 = HEAP32[$1114>>2]|0;
     __THREW__ = 0;
     invoke_vii(30,($1110|0),($1115|0));
     $1116 = __THREW__; __THREW__ = 0;
     if ((($1116|0) != 0) & ((threwValue|0) != 0)) { $1117 = _testSetjmp(HEAP32[$1116>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1117|0) == 0) { _longjmp($1116|0, threwValue|0); } tempRet0 = (threwValue); } else { $1117 = -1; };
     $1118 = tempRet0;
     $cond988 = ($1117|0)==(1);
     if ($cond988) {
      $$reg2mem967$0 = $1118;
      continue L4;
     }
     label = 99;
     break;
    }
    case 39:  {
     $1130 = HEAP32[$0>>2]|0;
     $1131 = ((($$1$reg2mem955$0)) + 2|0);
     $1132 = HEAP16[$1131>>1]|0;
     $1133 = $1132&65535;
     $1134 = (($1130) + ($1133<<2)|0);
     $1135 = HEAP32[$1134>>2]|0;
     $1136 = ((($$1$reg2mem955$0)) + 4|0);
     $1137 = HEAP16[$1136>>1]|0;
     $1138 = $1137&65535;
     $1139 = (($$0687$reg2mem957$0) + ($1138<<2)|0);
     $1140 = HEAP32[$1139>>2]|0;
     __THREW__ = 0;
     invoke_vii(30,($1140|0),($1135|0));
     $1141 = __THREW__; __THREW__ = 0;
     if ((($1141|0) != 0) & ((threwValue|0) != 0)) { $1142 = _testSetjmp(HEAP32[$1141>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1142|0) == 0) { _longjmp($1141|0, threwValue|0); } tempRet0 = (threwValue); } else { $1142 = -1; };
     $1143 = tempRet0;
     $cond987 = ($1142|0)==(1);
     if ($cond987) {
      $$reg2mem967$0 = $1143;
      continue L4;
     }
     $1144 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1144;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 40:  {
     $1145 = ((($$1$reg2mem955$0)) + 2|0);
     $1146 = HEAP16[$1145>>1]|0;
     $1147 = $1146&65535;
     $1148 = (($$0687$reg2mem957$0) + ($1147<<2)|0);
     $1149 = HEAP32[$1148>>2]|0;
     $1150 = HEAP32[$0>>2]|0;
     $1151 = ((($$1$reg2mem955$0)) + 4|0);
     $1152 = HEAP16[$1151>>1]|0;
     $1153 = $1152&65535;
     $1154 = (($1150) + ($1153<<2)|0);
     $1155 = HEAP32[$1154>>2]|0;
     __THREW__ = 0;
     invoke_vii(30,($1155|0),($1149|0));
     $1156 = __THREW__; __THREW__ = 0;
     if ((($1156|0) != 0) & ((threwValue|0) != 0)) { $1157 = _testSetjmp(HEAP32[$1156>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1157|0) == 0) { _longjmp($1156|0, threwValue|0); } tempRet0 = (threwValue); } else { $1157 = -1; };
     $1158 = tempRet0;
     $cond986 = ($1157|0)==(1);
     if ($cond986) {
      $$reg2mem967$0 = $1158;
      continue L4;
     }
     $1159 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1159;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 0:  {
     $1160 = ((($$1$reg2mem955$0)) + 2|0);
     $1161 = HEAP16[$1160>>1]|0;
     $1162 = $1161&65535;
     $1163 = (($$0687$reg2mem957$0) + ($1162<<2)|0);
     $1164 = HEAP32[$1163>>2]|0;
     $1165 = ((($$1$reg2mem955$0)) + 4|0);
     $1166 = HEAP16[$1165>>1]|0;
     $1167 = $1166&65535;
     $1168 = (($$0687$reg2mem957$0) + ($1167<<2)|0);
     $1169 = HEAP32[$1168>>2]|0;
     __THREW__ = 0;
     invoke_vii(30,($1169|0),($1164|0));
     $1170 = __THREW__; __THREW__ = 0;
     if ((($1170|0) != 0) & ((threwValue|0) != 0)) { $1171 = _testSetjmp(HEAP32[$1170>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1171|0) == 0) { _longjmp($1170|0, threwValue|0); } tempRet0 = (threwValue); } else { $1171 = -1; };
     $1172 = tempRet0;
     $cond985 = ($1171|0)==(1);
     if ($cond985) {
      $$reg2mem967$0 = $1172;
      continue L4;
     }
     $1173 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1173;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 37:  {
     $1174 = ((($$1$reg2mem955$0)) + 10|0);
     $1175 = ((($$1689$reg2mem959$0)) + 12|0);
     HEAP32[$1175>>2] = $1174;
     __THREW__ = 0;
     invoke_vii(31,($0|0),($$1$reg2mem955$0|0));
     $1176 = __THREW__; __THREW__ = 0;
     if ((($1176|0) != 0) & ((threwValue|0) != 0)) { $1177 = _testSetjmp(HEAP32[$1176>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1177|0) == 0) { _longjmp($1176|0, threwValue|0); } tempRet0 = (threwValue); } else { $1177 = -1; };
     $1178 = tempRet0;
     $cond984 = ($1177|0)==(1);
     if ($cond984) {
      $$reg2mem967$0 = $1178;
      continue L4;
     }
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1174;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 47:  {
     __THREW__ = 0;
     invoke_vii(32,($0|0),($$1$reg2mem955$0|0));
     $1179 = __THREW__; __THREW__ = 0;
     if ((($1179|0) != 0) & ((threwValue|0) != 0)) { $1180 = _testSetjmp(HEAP32[$1179>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1180|0) == 0) { _longjmp($1179|0, threwValue|0); } tempRet0 = (threwValue); } else { $1180 = -1; };
     $1181 = tempRet0;
     $cond983 = ($1180|0)==(1);
     if ($cond983) {
      $$reg2mem967$0 = $1181;
      continue L4;
     }
     $1182 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1182;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 38:  {
     $1183 = ((($$1$reg2mem955$0)) + 10|0);
     $1184 = ((($$1689$reg2mem959$0)) + 12|0);
     HEAP32[$1184>>2] = $1183;
     __THREW__ = 0;
     invoke_vii(33,($0|0),($$1$reg2mem955$0|0));
     $1185 = __THREW__; __THREW__ = 0;
     if ((($1185|0) != 0) & ((threwValue|0) != 0)) { $1186 = _testSetjmp(HEAP32[$1185>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1186|0) == 0) { _longjmp($1185|0, threwValue|0); } tempRet0 = (threwValue); } else { $1186 = -1; };
     $1187 = tempRet0;
     $cond982 = ($1186|0)==(1);
     if ($cond982) {
      $$reg2mem967$0 = $1187;
      continue L4;
     }
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1183;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 48:  {
     __THREW__ = 0;
     invoke_vii(34,($0|0),($$1$reg2mem955$0|0));
     $1188 = __THREW__; __THREW__ = 0;
     if ((($1188|0) != 0) & ((threwValue|0) != 0)) { $1189 = _testSetjmp(HEAP32[$1188>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1189|0) == 0) { _longjmp($1188|0, threwValue|0); } tempRet0 = (threwValue); } else { $1189 = -1; };
     $1190 = tempRet0;
     $cond981 = ($1189|0)==(1);
     if ($cond981) {
      $$reg2mem967$0 = $1190;
      continue L4;
     }
     $1191 = ((($$1$reg2mem955$0)) + 10|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1191;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 35:  {
     __THREW__ = 0;
     invoke_vii(35,($0|0),($$1$reg2mem955$0|0));
     $1192 = __THREW__; __THREW__ = 0;
     if ((($1192|0) != 0) & ((threwValue|0) != 0)) { $1193 = _testSetjmp(HEAP32[$1192>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1193|0) == 0) { _longjmp($1192|0, threwValue|0); } tempRet0 = (threwValue); } else { $1193 = -1; };
     $1194 = tempRet0;
     $cond980 = ($1193|0)==(1);
     if ($cond980) {
      $$reg2mem967$0 = $1194;
      continue L4;
     }
     $1195 = ((($$1$reg2mem955$0)) + 4|0);
     $1196 = HEAP16[$1195>>1]|0;
     $1197 = $1196&65535;
     $1198 = (($1197) + 5)|0;
     $1199 = (($$1$reg2mem955$0) + ($1198<<1)|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1199;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 34: case 33:  {
     __THREW__ = 0;
     invoke_vii(36,($0|0),($$1$reg2mem955$0|0));
     $1200 = __THREW__; __THREW__ = 0;
     if ((($1200|0) != 0) & ((threwValue|0) != 0)) { $1201 = _testSetjmp(HEAP32[$1200>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1201|0) == 0) { _longjmp($1200|0, threwValue|0); } tempRet0 = (threwValue); } else { $1201 = -1; };
     $1202 = tempRet0;
     $cond979 = ($1201|0)==(1);
     if ($cond979) {
      $$reg2mem967$0 = $1202;
      continue L4;
     }
     $1203 = ((($$1$reg2mem955$0)) + 2|0);
     $1204 = HEAP16[$1203>>1]|0;
     $1205 = $1204&65535;
     $1206 = (($1205) + 4)|0;
     $1207 = (($$1$reg2mem955$0) + ($1206<<1)|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1207;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 36:  {
     __THREW__ = 0;
     invoke_vii(37,($0|0),($$1$reg2mem955$0|0));
     $1208 = __THREW__; __THREW__ = 0;
     if ((($1208|0) != 0) & ((threwValue|0) != 0)) { $1209 = _testSetjmp(HEAP32[$1208>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1209|0) == 0) { _longjmp($1208|0, threwValue|0); } tempRet0 = (threwValue); } else { $1209 = -1; };
     $1210 = tempRet0;
     $cond978 = ($1209|0)==(1);
     if ($cond978) {
      $$reg2mem967$0 = $1210;
      continue L4;
     }
     $1211 = ((($$1$reg2mem955$0)) + 4|0);
     $1212 = HEAP16[$1211>>1]|0;
     $1213 = $1212&65535;
     $1214 = (($1213) + 5)|0;
     $1215 = (($$1$reg2mem955$0) + ($1214<<1)|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1215;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 57:  {
     __THREW__ = 0;
     invoke_vii(38,($0|0),($$1$reg2mem955$0|0));
     $1216 = __THREW__; __THREW__ = 0;
     if ((($1216|0) != 0) & ((threwValue|0) != 0)) { $1217 = _testSetjmp(HEAP32[$1216>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1217|0) == 0) { _longjmp($1216|0, threwValue|0); } tempRet0 = (threwValue); } else { $1217 = -1; };
     $1218 = tempRet0;
     $cond977 = ($1217|0)==(1);
     if ($cond977) {
      $$reg2mem967$0 = $1218;
      continue L4;
     }
     $1219 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1219;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 55:  {
     $1220 = ((($$1$reg2mem955$0)) + 2|0);
     $1221 = HEAP16[$1220>>1]|0;
     $1222 = $1221&65535;
     $1223 = (($$0690$reg2mem961$0) + ($1222<<2)|0);
     $1224 = HEAP32[$1223>>2]|0;
     $1225 = ((($$1$reg2mem955$0)) + 4|0);
     $1226 = HEAP16[$1225>>1]|0;
     $1227 = $1226&65535;
     $1228 = (($$0687$reg2mem957$0) + ($1227<<2)|0);
     $1229 = HEAP32[$1228>>2]|0;
     $1230 = ($1224|0)==(0|0);
     if ($1230) {
      __THREW__ = 0;
      $1231 = (invoke_ii(3,($1229|0))|0);
      $1232 = __THREW__; __THREW__ = 0;
      if ((($1232|0) != 0) & ((threwValue|0) != 0)) { $1233 = _testSetjmp(HEAP32[$1232>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1233|0) == 0) { _longjmp($1232|0, threwValue|0); } tempRet0 = (threwValue); } else { $1233 = -1; };
      $1234 = tempRet0;
      $cond976 = ($1233|0)==(1);
      if ($cond976) {
       $$reg2mem967$0 = $1234;
       continue L4;
      }
      $1235 = HEAP16[$1220>>1]|0;
      $1236 = $1235&65535;
      $1237 = (($$0690$reg2mem961$0) + ($1236<<2)|0);
      HEAP32[$1237>>2] = $1231;
     } else {
      __THREW__ = 0;
      invoke_vii(30,($1224|0),($1229|0));
      $1238 = __THREW__; __THREW__ = 0;
      if ((($1238|0) != 0) & ((threwValue|0) != 0)) { $1239 = _testSetjmp(HEAP32[$1238>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1239|0) == 0) { _longjmp($1238|0, threwValue|0); } tempRet0 = (threwValue); } else { $1239 = -1; };
      $1240 = tempRet0;
      $cond975 = ($1239|0)==(1);
      if ($cond975) {
       $$reg2mem967$0 = $1240;
       continue L4;
      }
     }
     $1241 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1241;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 54:  {
     $1242 = ((($$1$reg2mem955$0)) + 4|0);
     $1243 = HEAP16[$1242>>1]|0;
     $1244 = $1243&65535;
     $1245 = (($$0687$reg2mem957$0) + ($1244<<2)|0);
     $1246 = HEAP32[$1245>>2]|0;
     $1247 = ((($$1$reg2mem955$0)) + 2|0);
     $1248 = HEAP16[$1247>>1]|0;
     $1249 = $1248&65535;
     $1250 = (($$0690$reg2mem961$0) + ($1249<<2)|0);
     $1251 = HEAP32[$1250>>2]|0;
     __THREW__ = 0;
     invoke_vii(30,($1246|0),($1251|0));
     $1252 = __THREW__; __THREW__ = 0;
     if ((($1252|0) != 0) & ((threwValue|0) != 0)) { $1253 = _testSetjmp(HEAP32[$1252>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1253|0) == 0) { _longjmp($1252|0, threwValue|0); } tempRet0 = (threwValue); } else { $1253 = -1; };
     $1254 = tempRet0;
     $cond974 = ($1253|0)==(1);
     if ($cond974) {
      $$reg2mem967$0 = $1254;
      continue L4;
     }
     $1255 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1255;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 26:  {
     $1256 = ((($$1$reg2mem955$0)) + 2|0);
     $1257 = HEAP16[$1256>>1]|0;
     $1258 = $1257&65535;
     $1259 = (($$0687$reg2mem957$0) + ($1258<<2)|0);
     $1260 = HEAP32[$1259>>2]|0;
     $1261 = ((($$1$reg2mem955$0)) + 4|0);
     $1262 = HEAP16[$1261>>1]|0;
     $1263 = $1262&65535;
     $1264 = (($$0687$reg2mem957$0) + ($1263<<2)|0);
     $1265 = HEAP32[$1264>>2]|0;
     $1266 = ((($$1$reg2mem955$0)) + 6|0);
     $1267 = HEAP16[$1266>>1]|0;
     $1268 = $1267&65535;
     $1269 = (($$0687$reg2mem957$0) + ($1268<<2)|0);
     $1270 = HEAP32[$1269>>2]|0;
     $1271 = ((($1260)) + 8|0);
     $1272 = $1271;
     $1273 = $1272;
     $1274 = HEAP32[$1273>>2]|0;
     $1275 = (($1272) + 4)|0;
     $1276 = $1275;
     $1277 = HEAP32[$1276>>2]|0;
     $1278 = ((($1270)) + 8|0);
     $1279 = $1278;
     $1280 = $1279;
     $1281 = HEAP32[$1280>>2]|0;
     $1282 = (($1279) + 4)|0;
     $1283 = $1282;
     $1284 = HEAP32[$1283>>2]|0;
     $1285 = (_i64Add(($1281|0),($1284|0),($1274|0),($1277|0))|0);
     $1286 = tempRet0;
     $1287 = ($1284|0)>(0);
     $1288 = ($1281>>>0)>(0);
     $1289 = ($1284|0)==(0);
     $1290 = $1289 & $1288;
     $1291 = $1287 | $1290;
     $1292 = ((($1265)) + 8|0);
     $1293 = $1292;
     $1294 = $1293;
     $1295 = HEAP32[$1294>>2]|0;
     $1296 = (($1293) + 4)|0;
     $1297 = $1296;
     $1298 = HEAP32[$1297>>2]|0;
     if ($1291) {
      $1299 = ($1286|0)>($1298|0);
      $1300 = ($1285>>>0)>($1295>>>0);
      $1301 = ($1286|0)==($1298|0);
      $1302 = $1301 & $1300;
      $1303 = $1299 | $1302;
      if ($1303) {
       label = 134;
      } else {
       label = 133;
      }
     } else {
      $1304 = ($1286|0)<($1298|0);
      $1305 = ($1285>>>0)<($1295>>>0);
      $1306 = ($1286|0)==($1298|0);
      $1307 = $1306 & $1305;
      $1308 = $1304 | $1307;
      if ($1308) {
       label = 134;
      } else {
       label = 133;
      }
     }
     if ((label|0) == 133) {
      label = 0;
      $1309 = ((($$1$reg2mem955$0)) + 8|0);
      $1310 = HEAP16[$1309>>1]|0;
      $1311 = $1310&65535;
      $1312 = (($$0687$reg2mem957$0) + ($1311<<2)|0);
      $1313 = HEAP32[$1312>>2]|0;
      $1314 = ((($1313)) + 8|0);
      $1315 = $1314;
      $1316 = $1315;
      HEAP32[$1316>>2] = $1285;
      $1317 = (($1315) + 4)|0;
      $1318 = $1317;
      HEAP32[$1318>>2] = $1286;
      $1319 = $1271;
      $1320 = $1319;
      HEAP32[$1320>>2] = $1285;
      $1321 = (($1319) + 4)|0;
      $1322 = $1321;
      HEAP32[$1322>>2] = $1286;
      $1323 = ((($$1$reg2mem955$0)) + 14|0);
      $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1323;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
      continue L9;
     }
     else if ((label|0) == 134) {
      label = 0;
      $1324 = ((($$1$reg2mem955$0)) + 10|0);
      $1325 = HEAP16[$1324>>1]|0;
      $1326 = $1325&65535;
      $1327 = (($$1$reg2mem955$0) + ($1326<<1)|0);
      $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1327;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
      continue L9;
     }
     break;
    }
    case 49:  {
     $1328 = HEAP32[$32>>2]|0;
     $1329 = ((($1328)) + 20|0);
     $1330 = HEAP32[$1329>>2]|0;
     $1331 = ($1330|0)==(0|0);
     if ($1331) {
      __THREW__ = 0;
      invoke_vi(3,($0|0));
      $1332 = __THREW__; __THREW__ = 0;
      if ((($1332|0) != 0) & ((threwValue|0) != 0)) { $1333 = _testSetjmp(HEAP32[$1332>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1333|0) == 0) { _longjmp($1332|0, threwValue|0); } tempRet0 = (threwValue); } else { $1333 = -1; };
      $1334 = tempRet0;
      $cond973 = ($1333|0)==(1);
      if ($cond973) {
       $$reg2mem967$0 = $1334;
       continue L4;
      }
     }
     $1335 = HEAP32[$32>>2]|0;
     HEAP32[$1335>>2] = $$1689$reg2mem959$0;
     $1336 = HEAP32[$33>>2]|0;
     $1337 = ((($1335)) + 8|0);
     HEAP32[$1337>>2] = $1336;
     $1338 = ((($$1689$reg2mem959$0)) + 16|0);
     $1339 = HEAP32[$1338>>2]|0;
     $1340 = ((($1339)) + 28|0);
     $1341 = HEAP32[$1340>>2]|0;
     $1342 = $$1$reg2mem955$0;
     $1343 = (($1342) - ($1341))|0;
     $1344 = $1343 >> 1;
     $1345 = (($1344) + 1)|0;
     $1346 = ((($1335)) + 4|0);
     HEAP32[$1346>>2] = $1345;
     $1347 = HEAP32[$7>>2]|0;
     $1348 = HEAP32[$1347>>2]|0;
     $1349 = ((($1335)) + 16|0);
     HEAP32[$1349>>2] = $1348;
     $1350 = ((($1335)) + 12|0);
     HEAP32[$1350>>2] = 0;
     $1351 = HEAP32[$32>>2]|0;
     $1352 = ((($1351)) + 20|0);
     $1353 = HEAP32[$1352>>2]|0;
     HEAP32[$32>>2] = $1353;
     $1354 = ((($$1$reg2mem955$0)) + 6|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1354;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 50:  {
     $1355 = HEAP32[$34>>2]|0;
     $1356 = ((($1355)) + 24|0);
     $1357 = HEAP32[$1356>>2]|0;
     HEAP32[$34>>2] = $1357;
     $1358 = ((($$1$reg2mem955$0)) + 2|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1358;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 46:  {
     __THREW__ = 0;
     invoke_vii(40,($0|0),($$1$reg2mem955$0|0));
     $1369 = __THREW__; __THREW__ = 0;
     if ((($1369|0) != 0) & ((threwValue|0) != 0)) { $1370 = _testSetjmp(HEAP32[$1369>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1370|0) == 0) { _longjmp($1369|0, threwValue|0); } tempRet0 = (threwValue); } else { $1370 = -1; };
     $1371 = tempRet0;
     $cond972 = ($1370|0)==(1);
     if ($cond972) {
      $$reg2mem967$0 = $1371;
      continue L4;
     }
     $1372 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1372;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 25:  {
     $1373 = ((($$1$reg2mem955$0)) + 2|0);
     $1374 = HEAP16[$1373>>1]|0;
     $1375 = ((($$1$reg2mem955$0)) + 4|0);
     $1376 = HEAP16[$1375>>1]|0;
     $1377 = $1376&65535;
     $1378 = (($$0687$reg2mem957$0) + ($1377<<2)|0);
     $1379 = HEAP32[$1378>>2]|0;
     $1380 = HEAP16[$1379>>1]|0;
     $1381 = ($1380<<16>>16)==($1374<<16>>16);
     if ($1381) {
      $1382 = ((($$1$reg2mem955$0)) + 8|0);
      $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1382;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
      continue L9;
     } else {
      $1383 = ((($$1$reg2mem955$0)) + 6|0);
      $1384 = HEAP16[$1383>>1]|0;
      $1385 = $1384&65535;
      $1386 = (($$1$reg2mem955$0) + ($1385<<1)|0);
      $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1386;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
      continue L9;
     }
     break;
    }
    case 56:  {
     __THREW__ = 0;
     invoke_vii(41,($0|0),($$1$reg2mem955$0|0));
     $1387 = __THREW__; __THREW__ = 0;
     if ((($1387|0) != 0) & ((threwValue|0) != 0)) { $1388 = _testSetjmp(HEAP32[$1387>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1388|0) == 0) { _longjmp($1387|0, threwValue|0); } tempRet0 = (threwValue); } else { $1388 = -1; };
     $1389 = tempRet0;
     $cond971 = ($1388|0)==(1);
     if ($cond971) {
      $$reg2mem967$0 = $1389;
      continue L4;
     }
     $1390 = ((($$1689$reg2mem959$0)) + 16|0);
     $1391 = HEAP32[$1390>>2]|0;
     $1392 = ((($1391)) + 32|0);
     $1393 = HEAP32[$1392>>2]|0;
     $1394 = ((($$1$reg2mem955$0)) + 8|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$0690$reg2mem961$0 = $1393;$$1$reg2mem955$0 = $1394;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    case 27:  {
     $1395 = ((($$1$reg2mem955$0)) + 6|0);
     $1396 = HEAP16[$1395>>1]|0;
     $1397 = $1396&65535;
     $1398 = (($$0687$reg2mem957$0) + ($1397<<2)|0);
     $1399 = HEAP32[$1398>>2]|0;
     $1400 = ((($$1$reg2mem955$0)) + 8|0);
     $1401 = HEAP16[$1400>>1]|0;
     $1402 = $1401&65535;
     $1403 = (($$0687$reg2mem957$0) + ($1402<<2)|0);
     $1404 = HEAP32[$1403>>2]|0;
     $1405 = ((($1399)) + 8|0);
     $1406 = $1405;
     $1407 = $1406;
     $1408 = HEAP32[$1407>>2]|0;
     $1409 = (($1406) + 4)|0;
     $1410 = $1409;
     $1411 = HEAP32[$1410>>2]|0;
     $1412 = ($1408|0)==(0);
     $1413 = ($1411|0)==(0);
     $1414 = $1412 & $1413;
     if ($1414) {
      label = 149;
      break L9;
     }
     $1418 = ((($$1$reg2mem955$0)) + 2|0);
     $1419 = HEAP16[$1418>>1]|0;
     $1420 = $1419&65535;
     $1421 = (($$0687$reg2mem957$0) + ($1420<<2)|0);
     $1422 = HEAP32[$1421>>2]|0;
     $1423 = ((($1422)) + 8|0);
     $1424 = $1423;
     $1425 = $1424;
     $1426 = HEAP32[$1425>>2]|0;
     $1427 = (($1424) + 4)|0;
     $1428 = $1427;
     $1429 = HEAP32[$1428>>2]|0;
     $1430 = (_i64Subtract(($1426|0),($1429|0),($1408|0),($1411|0))|0);
     $1431 = tempRet0;
     $1432 = ((($1404)) + 8|0);
     $1433 = $1432;
     $1434 = $1433;
     HEAP32[$1434>>2] = $1430;
     $1435 = (($1433) + 4)|0;
     $1436 = $1435;
     HEAP32[$1436>>2] = $1431;
     $1437 = $1423;
     $1438 = $1437;
     HEAP32[$1438>>2] = $1430;
     $1439 = (($1437) + 4)|0;
     $1440 = $1439;
     HEAP32[$1440>>2] = $1431;
     HEAP32[$1404>>2] = 1;
     $1441 = ((($$1$reg2mem955$0)) + 12|0);
     $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0$phi = $$0687$reg2mem957$0;$$1$reg2mem955$0 = $1441;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;$$0687$reg2mem957$0 = $$0687$reg2mem957$0$phi;
     continue L9;
     break;
    }
    default: {
     label = 153;
     break L4;
    }
    }
   } while(0);
   if ((label|0) == 75) {
    label = 0;
    __THREW__ = 0;
    invoke_vii(26,($0|0),($$1$reg2mem955$0|0));
    $934 = __THREW__; __THREW__ = 0;
    if ((($934|0) != 0) & ((threwValue|0) != 0)) { $935 = _testSetjmp(HEAP32[$934>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($935|0) == 0) { _longjmp($934|0, threwValue|0); } tempRet0 = (threwValue); } else { $935 = -1; };
    $936 = tempRet0;
    $cond994 = ($935|0)==(1);
    if ($cond994) {
     $$reg2mem967$0 = $936;
     continue L4;
    }
    $937 = ((($$1$reg2mem955$0)) + 4|0);
    $938 = HEAP16[$937>>1]|0;
    $939 = $938&65535;
    $940 = ((($$1689$reg2mem959$0)) + 28|0);
    $941 = HEAP32[$940>>2]|0;
    $942 = ((($941)) + 16|0);
    HEAP32[$942>>2] = $$0691$reg2mem953$0;
    $943 = HEAP32[$941>>2]|0;
    $944 = (($943) + ($939<<2)|0);
    $945 = ((($941)) + 4|0);
    HEAP32[$945>>2] = $944;
    $946 = ((($941)) + 8|0);
    $947 = HEAP32[$946>>2]|0;
    $948 = ($944>>>0)<($947>>>0);
    if (!($948)) {
     $949 = (($939) + 1)|0;
     HEAP32[$1>>2] = $941;
     __THREW__ = 0;
     invoke_vii(27,($0|0),($949|0));
     $950 = __THREW__; __THREW__ = 0;
     if ((($950|0) != 0) & ((threwValue|0) != 0)) { $951 = _testSetjmp(HEAP32[$950>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($951|0) == 0) { _longjmp($950|0, threwValue|0); } tempRet0 = (threwValue); } else { $951 = -1; };
     $952 = tempRet0;
     $cond995 = ($951|0)==(1);
     if ($cond995) {
      $$reg2mem967$0 = $952;
      continue L4;
     }
    }
    __THREW__ = 0;
    invoke_vii(28,($$1689$reg2mem959$0|0),($$1$reg2mem955$0|0));
    $953 = __THREW__; __THREW__ = 0;
    if ((($953|0) != 0) & ((threwValue|0) != 0)) { $954 = _testSetjmp(HEAP32[$953>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($954|0) == 0) { _longjmp($953|0, threwValue|0); } tempRet0 = (threwValue); } else { $954 = -1; };
    $955 = tempRet0;
    $cond996 = ($954|0)==(1);
    if ($cond996) {
     $$reg2mem967$0 = $955;
     continue L4;
    }
    HEAP32[$1>>2] = $941;
    $956 = HEAP32[$28>>2]|0;
    $957 = (($956) + 1)|0;
    HEAP32[$28>>2] = $957;
    $958 = ((($$0691$reg2mem953$0)) + 24|0);
    $959 = HEAP32[$958>>2]|0;
    __THREW__ = 0;
    invoke_vi($959|0,($0|0));
    $960 = __THREW__; __THREW__ = 0;
    if ((($960|0) != 0) & ((threwValue|0) != 0)) { $961 = _testSetjmp(HEAP32[$960>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($961|0) == 0) { _longjmp($960|0, threwValue|0); } tempRet0 = (threwValue); } else { $961 = -1; };
    $962 = tempRet0;
    $cond997 = ($961|0)==(1);
    if ($cond997) {
     $$reg2mem967$0 = $962;
     continue L4;
    }
    $963 = HEAP32[$28>>2]|0;
    $964 = (($963) + -1)|0;
    HEAP32[$28>>2] = $964;
    HEAP32[$1>>2] = $$1689$reg2mem959$0;
    $965 = HEAP32[$$1689$reg2mem959$0>>2]|0;
    $966 = ((($$1689$reg2mem959$0)) + 12|0);
    $967 = HEAP32[$966>>2]|0;
    $$1689$reg2mem959$0$phi = $$1689$reg2mem959$0;$$0690$reg2mem961$0$phi = $$0690$reg2mem961$0;$$0687$reg2mem957$0 = $965;$$1$reg2mem955$0 = $967;$$1689$reg2mem959$0 = $$1689$reg2mem959$0$phi;$$0690$reg2mem961$0 = $$0690$reg2mem961$0$phi;
    continue;
   }
   else if ((label|0) == 83) {
    label = 0;
    __THREW__ = 0;
    invoke_vii(26,($0|0),($$1$reg2mem955$0|0));
    $976 = __THREW__; __THREW__ = 0;
    if ((($976|0) != 0) & ((threwValue|0) != 0)) { $977 = _testSetjmp(HEAP32[$976>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($977|0) == 0) { _longjmp($976|0, threwValue|0); } tempRet0 = (threwValue); } else { $977 = -1; };
    $978 = tempRet0;
    $cond991 = ($977|0)==(1);
    if ($cond991) {
     $$reg2mem967$0 = $978;
     continue L4;
    }
    $979 = ((($$1689$reg2mem959$0)) + 28|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = ((($980)) + 16|0);
    HEAP32[$981>>2] = $$1692$reg2mem951$0;
    $982 = HEAP32[$980>>2]|0;
    $983 = ((($$1692$reg2mem951$0)) + 14|0);
    $984 = HEAP16[$983>>1]|0;
    $985 = $984&65535;
    $986 = (($982) + ($985<<2)|0);
    $987 = ((($980)) + 4|0);
    HEAP32[$987>>2] = $986;
    $988 = ((($980)) + 8|0);
    $989 = HEAP32[$988>>2]|0;
    $990 = ($986>>>0)<($989>>>0);
    if (!($990)) {
     HEAP32[$1>>2] = $980;
     $991 = HEAP16[$983>>1]|0;
     $992 = $991&65535;
     __THREW__ = 0;
     invoke_vii(27,($0|0),($992|0));
     $993 = __THREW__; __THREW__ = 0;
     if ((($993|0) != 0) & ((threwValue|0) != 0)) { $994 = _testSetjmp(HEAP32[$993>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($994|0) == 0) { _longjmp($993|0, threwValue|0); } tempRet0 = (threwValue); } else { $994 = -1; };
     $995 = tempRet0;
     $cond992 = ($994|0)==(1);
     if ($cond992) {
      $$reg2mem967$0 = $995;
      continue L4;
     }
    }
    __THREW__ = 0;
    invoke_vii(28,($$1689$reg2mem959$0|0),($$1$reg2mem955$0|0));
    $996 = __THREW__; __THREW__ = 0;
    if ((($996|0) != 0) & ((threwValue|0) != 0)) { $997 = _testSetjmp(HEAP32[$996>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($997|0) == 0) { _longjmp($996|0, threwValue|0); } tempRet0 = (threwValue); } else { $997 = -1; };
    $998 = tempRet0;
    $cond993 = ($997|0)==(1);
    if ($cond993) {
     $$reg2mem967$0 = $998;
     continue L4;
    }
    $999 = HEAP32[$979>>2]|0;
    HEAP32[$1>>2] = $999;
    $1000 = HEAP32[$30>>2]|0;
    $1001 = (($1000) + 1)|0;
    HEAP32[$30>>2] = $1001;
    $1002 = HEAP32[$999>>2]|0;
    $1003 = ((($$1692$reg2mem951$0)) + 28|0);
    $1004 = HEAP32[$1003>>2]|0;
    $1005 = ((($$1692$reg2mem951$0)) + 32|0);
    $1006 = HEAP32[$1005>>2]|0;
    $$0687$reg2mem957$0 = $1002;$$0690$reg2mem961$0 = $1006;$$1$reg2mem955$0 = $1004;$$1689$reg2mem959$0 = $999;
    continue;
   }
   else if ((label|0) == 99) {
    label = 0;
    $1119 = ((($$1689$reg2mem959$0)) + 24|0);
    $1120 = HEAP32[$1119>>2]|0;
    HEAP32[$1>>2] = $1120;
    $1121 = HEAP32[$31>>2]|0;
    $1122 = (($1121) + -1)|0;
    HEAP32[$31>>2] = $1122;
    $1123 = HEAP32[$1120>>2]|0;
    $1124 = ((($1120)) + 16|0);
    $1125 = HEAP32[$1124>>2]|0;
    $1126 = ((($1125)) + 32|0);
    $1127 = HEAP32[$1126>>2]|0;
    $1128 = ((($1120)) + 12|0);
    $1129 = HEAP32[$1128>>2]|0;
    $$0687$reg2mem957$0 = $1123;$$0690$reg2mem961$0 = $1127;$$1$reg2mem955$0 = $1129;$$1689$reg2mem959$0 = $1120;
    continue;
   }
  }
  if ((label|0) == 54) {
   label = 0;
   $604 = ((($$1$reg2mem955$0)) + 10|0);
   $605 = ((($$1689$reg2mem959$0)) + 12|0);
   HEAP32[$605>>2] = $604;
   __THREW__ = 0;
   invoke_viii(1,($0|0),25,(4985|0));
   $606 = __THREW__; __THREW__ = 0;
   if ((($606|0) != 0) & ((threwValue|0) != 0)) { $607 = _testSetjmp(HEAP32[$606>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($607|0) == 0) { _longjmp($606|0, threwValue|0); } tempRet0 = (threwValue); } else { $607 = -1; };
   $608 = tempRet0;
   $$reg2mem967$0 = $608;
   continue;
  }
  else if ((label|0) == 57) {
   label = 0;
   $649 = ((($$1$reg2mem955$0)) + 10|0);
   $650 = ((($$1689$reg2mem959$0)) + 12|0);
   HEAP32[$650>>2] = $649;
   __THREW__ = 0;
   invoke_viii(1,($0|0),25,(4985|0));
   $651 = __THREW__; __THREW__ = 0;
   if ((($651|0) != 0) & ((threwValue|0) != 0)) { $652 = _testSetjmp(HEAP32[$651>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($652|0) == 0) { _longjmp($651|0, threwValue|0); } tempRet0 = (threwValue); } else { $652 = -1; };
   $653 = tempRet0;
   $$reg2mem967$0 = $653;
   continue;
  }
  else if ((label|0) == 65) {
   label = 0;
   $872 = ((($$1$reg2mem955$0)) + 10|0);
   $873 = ((($$1689$reg2mem959$0)) + 12|0);
   HEAP32[$873>>2] = $872;
   __THREW__ = 0;
   invoke_viii(1,($0|0),25,(4985|0));
   $874 = __THREW__; __THREW__ = 0;
   if ((($874|0) != 0) & ((threwValue|0) != 0)) { $875 = _testSetjmp(HEAP32[$874>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($875|0) == 0) { _longjmp($874|0, threwValue|0); } tempRet0 = (threwValue); } else { $875 = -1; };
   $876 = tempRet0;
   $$reg2mem967$0 = $876;
   continue;
  }
  else if ((label|0) == 140) {
   label = 0;
   $1359 = ((($$1$reg2mem955$0)) + 6|0);
   $1360 = ((($$1689$reg2mem959$0)) + 12|0);
   HEAP32[$1360>>2] = $1359;
   $1361 = ((($$1$reg2mem955$0)) + 2|0);
   $1362 = HEAP16[$1361>>1]|0;
   $1363 = $1362&65535;
   $1364 = (($$0687$reg2mem957$0) + ($1363<<2)|0);
   $1365 = HEAP32[$1364>>2]|0;
   __THREW__ = 0;
   invoke_vii(39,($0|0),($1365|0));
   $1366 = __THREW__; __THREW__ = 0;
   if ((($1366|0) != 0) & ((threwValue|0) != 0)) { $1367 = _testSetjmp(HEAP32[$1366>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1367|0) == 0) { _longjmp($1366|0, threwValue|0); } tempRet0 = (threwValue); } else { $1367 = -1; };
   $1368 = tempRet0;
   $$reg2mem967$0 = $1368;
   continue;
  }
  else if ((label|0) == 149) {
   label = 0;
   __THREW__ = 0;
   invoke_viii(1,($0|0),23,(5012|0));
   $1415 = __THREW__; __THREW__ = 0;
   if ((($1415|0) != 0) & ((threwValue|0) != 0)) { $1416 = _testSetjmp(HEAP32[$1415>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1416|0) == 0) { _longjmp($1415|0, threwValue|0); } tempRet0 = (threwValue); } else { $1416 = -1; };
   $1417 = tempRet0;
   $$reg2mem967$0 = $1417;
   continue;
  }
  else if ((label|0) == 151) {
   label = 0;
   $1442 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_vi(4,($1442|0));
   $1443 = __THREW__; __THREW__ = 0;
   if ((($1443|0) != 0) & ((threwValue|0) != 0)) { $1444 = _testSetjmp(HEAP32[$1443>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1444|0) == 0) { _longjmp($1443|0, threwValue|0); } tempRet0 = (threwValue); } else { $1444 = -1; };
   $1445 = tempRet0;
   $cond970 = ($1444|0)==(1);
   if ($cond970) {
    $$reg2mem967$0 = $1445;
    continue;
   } else {
    break;
   }
  }
 }
 if ((label|0) == 153) {
  _free(_setjmpTable|0);
  return;
 }
 _free(_setjmpTable|0);
 return;
}
function _vm_setup_before_call($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $7 = ((($0)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)>($10>>>0);
   if ($11) {
    $12 = ((($1)) + 4|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13&65535;
    $15 = (($1) + ($14<<1)|0);
    $16 = ((($15)) + 10|0);
    $17 = ((($3)) + 12|0);
    HEAP32[$17>>2] = $16;
    _vm_error($0,22,5080);
    // unreachable;
   } else {
    _add_call_frame($0);
    break;
   }
  }
 } while(0);
 $18 = ((($1)) + 4|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = (($1) + ($20<<1)|0);
 $22 = ((($21)) + 10|0);
 $23 = ((($3)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$4>>2]|0;
 $25 = ((($3)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$24>>2] = $26;
 $27 = ((($24)) + 12|0);
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$3>>2]|0;
 $29 = (($20) + 3)|0;
 $30 = (($1) + ($29<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = (($28) + ($32<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($24)) + 20|0);
 HEAP32[$35>>2] = $34;
 return;
}
function _prep_registers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$037 = 0, $$136 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(0);
 if ($8) {
  $$0$lcssa = 0;
 } else {
  $$037 = 0;
  while(1) {
   $15 = (($$037) + 3)|0;
   $16 = (($1) + ($15<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = (($4) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($5) + ($$037<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$20>>2]|0;
   $24 = $23 & 524288;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $26 = ((($20)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$27>>2] = $29;
   }
   $30 = HEAP32[$22>>2]|0;
   $31 = $30 & 524288;
   $32 = ($31|0)==(0);
   if (!($32)) {
    _lily_deref($22);
   }
   ;HEAP32[$22>>2]=HEAP32[$20>>2]|0;HEAP32[$22+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$20+12>>2]|0;
   $33 = (($$037) + 1)|0;
   $34 = HEAP16[$6>>1]|0;
   $35 = $34&65535;
   $36 = ($33|0)<($35|0);
   if ($36) {
    $$037 = $33;
   } else {
    $$0$lcssa = $33;
    break;
   }
  }
 }
 $9 = ((($3)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 14|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($$0$lcssa|0)<($13|0);
 if ($14) {
  $$136 = $$0$lcssa;
 } else {
  return;
 }
 while(1) {
  $37 = (($5) + ($$136<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  _lily_deref($38);
  HEAP32[$38>>2] = 0;
  $39 = (($$136) + 1)|0;
  $40 = HEAP32[$9>>2]|0;
  $41 = ((($40)) + 14|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42&65535;
  $44 = ($39|0)<($43|0);
  if ($44) {
   $$136 = $39;
  } else {
   break;
  }
 }
 return;
}
function _do_o_interpolation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$030 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($0)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_mb_flush($9)|0);
 $11 = ($6<<16>>16)==(0);
 $12 = ((($1)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = (($4) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 if ($11) {
  $$lcssa = $16;
  $25 = (_lily_mb_raw($10)|0);
  $26 = (_lily_new_string_raw($25)|0);
  _move_string($$lcssa,$26);
  return;
 } else {
  $$030 = 0;$17 = $16;
 }
 while(1) {
  _lily_mb_add_value($10,$0,$17);
  $18 = (($$030) + 1)|0;
  $19 = (($$030) + 3)|0;
  $20 = (($1) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($4) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $exitcond = ($18|0)==($7|0);
  if ($exitcond) {
   $$lcssa = $24;
   break;
  } else {
   $$030 = $18;$17 = $24;
  }
 }
 $25 = (_lily_mb_raw($10)|0);
 $26 = (_lily_new_string_raw($25)|0);
 _move_string($$lcssa,$26);
 return;
}
function _move_unit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 524288;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _lily_deref($0);
 }
 $4 = ((($0)) + 8|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[$0>>2] = 26;
 return;
}
function _do_o_subscript_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$off0 = 0, $$1$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($4) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($4) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($4) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP16[$9>>1]|0;
 $21 = ($20<<16>>16)==(10);
 if ($21) {
  $62 = ((($9)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (_lily_hash_get($0,$63,$14)|0);
  $65 = ($64|0)==(0|0);
  if ($65) {
   _key_error($0,$14);
   // unreachable;
  }
  _lily_value_assign($19,$64);
  return;
 }
 $22 = ((($14)) + 8|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($20<<16>>16)==(5);
 $30 = ($28|0)<(0);
 $31 = ((($9)) + 8|0);
 if ($29) {
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  do {
   if ($30) {
    $35 = (_i64Add(($34|0),0,($25|0),($28|0))|0);
    $36 = tempRet0;
    $37 = ($36|0)<(0);
    if ($37) {
     _boundary_error($0,$25,$28);
     // unreachable;
    } else {
     $$0$off0 = $35;
     break;
    }
   } else {
    $38 = ($28|0)<(0);
    $39 = ($25>>>0)<($34>>>0);
    $40 = ($28|0)==(0);
    $41 = $40 & $39;
    $42 = $38 | $41;
    if ($42) {
     $$0$off0 = $25;
    } else {
     _boundary_error($0,$25,$28);
     // unreachable;
    }
   }
  } while(0);
  $43 = ((($32)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($$0$off0)|0);
  $46 = HEAP8[$45>>0]|0;
  _move_byte($19,$46);
  return;
 } else {
  $47 = HEAP32[$31>>2]|0;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  do {
   if ($30) {
    $50 = (_i64Add(($49|0),0,($25|0),($28|0))|0);
    $51 = tempRet0;
    $52 = ($51|0)<(0);
    if ($52) {
     _boundary_error($0,$25,$28);
     // unreachable;
    } else {
     $$1$off0 = $50;
     break;
    }
   } else {
    $53 = ($28|0)<(0);
    $54 = ($25>>>0)<($49>>>0);
    $55 = ($28|0)==(0);
    $56 = $55 & $54;
    $57 = $53 | $56;
    if ($57) {
     $$1$off0 = $25;
    } else {
     _boundary_error($0,$25,$28);
     // unreachable;
    }
   }
  } while(0);
  $58 = ((($47)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($$1$off0<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  _lily_value_assign($19,$61);
  return;
 }
}
function _do_o_property_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($4) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($4) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($14)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($7<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_value_assign($19,$23);
 return;
}
function _do_o_subscript_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$off0 = 0, $$1$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($4) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($4) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($4) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP16[$9>>1]|0;
 $21 = ($20<<16>>16)==(10);
 if ($21) {
  $69 = ((($9)) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  _lily_hash_set($0,$70,$14,$19);
  return;
 }
 $22 = ((($14)) + 8|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($20<<16>>16)==(5);
 $30 = ($28|0)<(0);
 $31 = ((($9)) + 8|0);
 if ($29) {
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  do {
   if ($30) {
    $35 = (_i64Add(($34|0),0,($25|0),($28|0))|0);
    $36 = tempRet0;
    $37 = ($36|0)<(0);
    if ($37) {
     _boundary_error($0,$25,$28);
     // unreachable;
    } else {
     $$0$off0 = $35;
     break;
    }
   } else {
    $38 = ($28|0)<(0);
    $39 = ($25>>>0)<($34>>>0);
    $40 = ($28|0)==(0);
    $41 = $40 & $39;
    $42 = $38 | $41;
    if ($42) {
     $$0$off0 = $25;
    } else {
     _boundary_error($0,$25,$28);
     // unreachable;
    }
   }
  } while(0);
  $43 = ((($19)) + 8|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $46&255;
  $51 = ((($32)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($$0$off0)|0);
  HEAP8[$53>>0] = $50;
  return;
 } else {
  $54 = HEAP32[$31>>2]|0;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  do {
   if ($30) {
    $57 = (_i64Add(($56|0),0,($25|0),($28|0))|0);
    $58 = tempRet0;
    $59 = ($58|0)<(0);
    if ($59) {
     _boundary_error($0,$25,$28);
     // unreachable;
    } else {
     $$1$off0 = $57;
     break;
    }
   } else {
    $60 = ($28|0)<(0);
    $61 = ($25>>>0)<($56>>>0);
    $62 = ($28|0)==(0);
    $63 = $62 & $61;
    $64 = $60 | $63;
    if ($64) {
     $$1$off0 = $25;
    } else {
     _boundary_error($0,$25,$28);
     // unreachable;
    }
   }
  } while(0);
  $65 = ((($54)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($$1$off0<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  _lily_value_assign($68,$19);
  return;
 }
}
function _do_o_property_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($4) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($4) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($14)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($7<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_value_assign($23,$19);
 return;
}
function _do_o_build_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$033 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + 3)|0;
 $9 = (($1) + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($4) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $div = ($6&65535) >>> 1;
 $14 = $div&65535;
 $15 = (_lily_new_hash_raw($14)|0);
 $16 = ($6<<16>>16)==(0);
 if ($16) {
  _move_hash_f($13,$15);
  return;
 } else {
  $$033 = 0;
 }
 while(1) {
  $17 = (($$033) + 3)|0;
  $18 = (($1) + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($4) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($$033) + 4)|0;
  $24 = (($1) + ($23<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = (($4) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  _lily_hash_set($0,$15,$22,$28);
  $29 = (($$033) + 2)|0;
  $30 = ($29|0)<($7|0);
  if ($30) {
   $$033 = $29;
  } else {
   break;
  }
 }
 _move_hash_f($13,$15);
 return;
}
function _do_o_build_list_tuple($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03233 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + 2)|0;
 $9 = (($1) + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($4) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP16[$1>>1]|0;
 $15 = ($14<<16>>16)==(33);
 $$sink = $15 ? 9 : 11;
 $16 = (_new_container($$sink,$7)|0);
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($6<<16>>16)==(0);
 if (!($19)) {
  $$03233 = 0;
  while(1) {
   $20 = (($$03233) + 2)|0;
   $21 = (($1) + ($20<<1)|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22&65535;
   $24 = (($4) + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($18) + ($$03233<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   _lily_value_assign($27,$25);
   $28 = (($$03233) + 1)|0;
   $exitcond = ($28|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$03233 = $28;
   }
  }
 }
 $29 = HEAP16[$1>>1]|0;
 $30 = ($29<<16>>16)==(33);
 if ($30) {
  _move_list_f(131072,$13,$16);
  return;
 } else {
  _move_tuple_f($13,$16);
  return;
 }
}
function _do_o_build_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + 3)|0;
 $11 = (($1) + ($10<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($4) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_new_container($6,$9)|0);
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($8<<16>>16)==(0);
 if ($19) {
  _move_variant_f($15,$16);
  return;
 } else {
  $$034 = 0;
 }
 while(1) {
  $20 = (($$034) + 3)|0;
  $21 = (($1) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (($4) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($18) + ($$034<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  _lily_value_assign($27,$25);
  $28 = (($$034) + 1)|0;
  $exitcond = ($28|0)==($9|0);
  if ($exitcond) {
   break;
  } else {
   $$034 = $28;
  }
 }
 _move_variant_f($15,$16);
 return;
}
function _do_o_closure_function($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$051 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($8) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($1)) + 4|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($4) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_new_function_copy($15)|0);
 _copy_upvalues($21,$6);
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  _move_function_f(131072,$20,$21);
  _lily_value_tag($0,$20);
  return;
 }
 $27 = ((($21)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP16[$25>>1]|0;
 $30 = $29&65535;
 $31 = ($29&65535)>(1);
 if ($31) {
  $$051 = 1;
 } else {
  _move_function_f(131072,$20,$21);
  _lily_value_tag($0,$20);
  return;
 }
 while(1) {
  $32 = (($25) + ($$051<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = (($28) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if (!($37)) {
   $38 = ((($36)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + -1)|0;
   HEAP32[$38>>2] = $40;
   HEAP32[$35>>2] = 0;
  }
  $41 = (($$051) + 1)|0;
  $exitcond = ($41|0)==($30|0);
  if ($exitcond) {
   break;
  } else {
   $$051 = $41;
  }
 }
 _move_function_f(131072,$20,$21);
 _lily_value_tag($0,$20);
 return;
}
function _make_cell_from($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 ;HEAP32[$1>>2]=HEAP32[$0>>2]|0;HEAP32[$1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$0+12>>2]|0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 1;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if ($5) {
  return ($1|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 return ($1|0);
}
function _add_catch_entry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(28)|0);
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($1)) + 24|0);
 HEAP32[$7>>2] = $6;
 return;
}
function _do_o_exception_raise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($3)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($12) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 60|0);
 HEAP32[$18>>2] = $1;
 $19 = ((($0)) + 64|0);
 HEAP32[$19>>2] = $17;
 $20 = ((($0)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_lily_mb_flush($23)|0);
 _lily_mb_add($24,$10);
 _dispatch_exception($0);
 // unreachable;
}
function _do_o_new_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($7) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($4<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 44|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = ((($6)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 262144;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = ((($21)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 6|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = ($28<<16>>16)==(0);
  if (!($29)) {
   $30 = (($28) + -1)<<16>>16;
   HEAP16[$27>>1] = $30;
   _lily_value_assign($12,$21);
   return;
  }
 }
 $31 = ((($16)) + 6|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 & 768;
 $34 = (_new_container($3,$19)|0);
 $35 = ((($16)) + 40|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = ((($34)) + 6|0);
 HEAP16[$37>>1] = $36;
 $38 = ($33<<16>>16)==(512);
 if ($38) {
  _move_instance_f(131072,$12,$34);
  return;
 }
 _move_instance_f(0,$12,$34);
 $39 = ($33<<16>>16)==(768);
 if (!($39)) {
  return;
 }
 _lily_value_tag($0,$12);
 return;
}
function _do_o_closure_new($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($7) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($6)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_new_function_copy($14)|0);
 $16 = $4 << 2;
 $17 = (_lily_malloc($16)|0);
 $18 = ($3<<16>>16)==(0);
 if (!($18)) {
  _memset(($17|0),0,($16|0))|0;
 }
 $19 = ((($15)) + 12|0);
 HEAP16[$19>>1] = $3;
 $20 = ((($15)) + 32|0);
 HEAP32[$20>>2] = $17;
 _move_function_f(0,$12,$15);
 _lily_value_tag($0,$12);
 $21 = HEAP32[$5>>2]|0;
 $22 = ((($21)) + 16|0);
 HEAP32[$22>>2] = $15;
 return;
}
function _new_function_copy($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(40)|0);
 dest=$1; src=$0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$1>>2] = 1;
 return ($1|0);
}
function _move_function_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _lily_deref($1);
 }
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = $0 | 524295;
 HEAP32[$1>>2] = $7;
 return;
}
function _copy_upvalues($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 << 2;
 $8 = (_lily_malloc($7)|0);
 $9 = ($5<<16>>16)==(0);
 if ($9) {
  $18 = ((($0)) + 32|0);
  HEAP32[$18>>2] = $8;
  $19 = ((($0)) + 12|0);
  HEAP16[$19>>1] = $5;
  return;
 } else {
  $$025 = 0;
 }
 while(1) {
  $10 = (($3) + ($$025<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
  }
  $16 = (($8) + ($$025<<2)|0);
  HEAP32[$16>>2] = $11;
  $17 = (($$025) + 1)|0;
  $exitcond = ($17|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$025 = $17;
  }
 }
 $18 = ((($0)) + 32|0);
 HEAP32[$18>>2] = $8;
 $19 = ((($0)) + 12|0);
 HEAP16[$19>>1] = $5;
 return;
}
function _move_variant_f($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 | 6946816;
 HEAP32[$0>>2] = $9;
 return;
}
function _move_tuple_f($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $1;
 HEAP32[$0>>2] = 4849675;
 return;
}
function _move_hash_f($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $1;
 HEAP32[$0>>2] = 655370;
 return;
}
function _boundary_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_flush($6)|0);
 $8 = $vararg_buffer;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 _lily_mb_add_fmt($7,5039,$vararg_buffer);
 $12 = (_lily_mb_raw($7)|0);
 _vm_error($0,24,$12);
 // unreachable;
}
function _move_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_deref($0);
 }
 $5 = $1&255;
 $6 = ((($0)) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $5;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 HEAP32[$0>>2] = 4;
 return;
}
function _key_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_mb_flush($5)|0);
 $7 = HEAP16[$1>>1]|0;
 $8 = ($7<<16>>16)==(3);
 $9 = ((($1)) + 8|0);
 if ($8) {
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_mb_escape_add_str($6,$12);
  $23 = (_lily_mb_raw($6)|0);
  _vm_error($0,21,$23);
  // unreachable;
 } else {
  $13 = $9;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = $vararg_buffer;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $18;
  _lily_mb_add_fmt($6,5076,$vararg_buffer);
  $23 = (_lily_mb_raw($6)|0);
  _vm_error($0,21,$23);
  // unreachable;
 }
}
function _lily_error_callback_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _add_catch_entry($0);
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($7)) + 16|0);
 HEAP32[$13>>2] = $1;
 $14 = ((($7)) + 12|0);
 HEAP32[$14>>2] = 1;
 $15 = HEAP32[$2>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$2>>2] = $17;
 return;
}
function _lily_error_callback_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $4;
 return;
}
function _lily_vm_ensure_class_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if ($4) {
  return;
 }
 $5 = ($3|0)==(0);
 if ($5) {
  $$sink = 1;
  label = 3;
 }
 while(1) {
  if ((label|0) == 3) {
   label = 0;
   HEAP32[$2>>2] = $$sink;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6>>>0)>($1>>>0);
  if ($7) {
   break;
  }
  $8 = $6 << 1;
  $$sink = $8;
  label = 3;
 }
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $6 << 2;
 $12 = (_lily_realloc($10,$11)|0);
 HEAP32[$9>>2] = $12;
 $13 = ($3|0)==(0);
 if (!($13)) {
  return;
 }
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 76|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$14>>2]|0;
 $18 = ((($17)) + 80|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$14>>2]|0;
 $20 = ((($19)) + 84|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$14>>2]|0;
 $22 = ((($21)) + 88|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$14>>2]|0;
 $24 = ((($23)) + 92|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$14>>2]|0;
 $26 = ((($25)) + 96|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$14>>2]|0;
 $28 = ((($27)) + 100|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$14>>2]|0;
 $30 = ((($29)) + 104|0);
 HEAP32[$30>>2] = 0;
 return;
}
function _lily_vm_add_class_unchecked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($3) + ($6<<2)|0);
 HEAP32[$7>>2] = $1;
 return;
}
function _lily_arg_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 return ($10|0);
}
function _lily_arg_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10&255;
 return ($14|0);
}
function _lily_arg_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_container($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 return (+$8);
}
function _lily_arg_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_function($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_generic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 tempRet0 = ($13);
 return ($10|0);
}
function _lily_arg_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 return ($8|0);
}
function _lily_arg_string_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 return ($10|0);
}
function _lily_arg_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_as_boolean($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 return ($4|0);
}
function _lily_as_container($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_as_file($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_as_string_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_con_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _lily_con_set($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_value_assign($6,$2);
 return;
}
function _lily_value_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 524288;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($1)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 & 524288;
 $11 = ($10|0)==(0);
 if (!($11)) {
  _lily_deref($0);
 }
 $12 = ((($1)) + 8|0);
 $13 = ((($0)) + 8|0);
 $14 = $12;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $13;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 $24 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $24;
 return;
}
function _lily_deref($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 524288;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  return;
 }
 _lily_value_destroy($0);
 return;
}
function _lily_value_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 | 2;
 $3 = ($2<<16>>16)==(11);
 if ($3) {
  _destroy_list($0);
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 4194304;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _destroy_container($0);
  return;
 }
 switch ($1<<16>>16) {
 case 3: case 5:  {
  _destroy_string($0);
  return;
  break;
 }
 case 7:  {
  _destroy_function($0);
  return;
  break;
 }
 case 10:  {
  _lily_destroy_hash($0);
  return;
  break;
 }
 case 12:  {
  _destroy_file($0);
  return;
  break;
 }
 default: {
  $7 = $4 & 1048576;
  $8 = ($7|0)==(0);
  if ($8) {
   return;
  }
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vi[$12 & 127]($10);
  $13 = HEAP32[$9>>2]|0;
  _lily_free($13);
  return;
 }
 }
}
function _destroy_list($0) {
 $0 = $0|0;
 var $$011 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($2)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $$lcssa = $7;
  _lily_free($$lcssa);
  _lily_free($2);
  return;
 } else {
  $$011 = 0;$9 = $7;
 }
 while(1) {
  $8 = (($9) + ($$011<<2)|0);
  $10 = HEAP32[$8>>2]|0;
  _lily_deref($10);
  $11 = HEAP32[$6>>2]|0;
  $12 = (($11) + ($$011<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_free($13);
  $14 = (($$011) + 1)|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  $17 = HEAP32[$6>>2]|0;
  if ($16) {
   $$011 = $14;$9 = $17;
  } else {
   $$lcssa = $17;
   break;
  }
 }
 _lily_free($$lcssa);
 _lily_free($2);
 return;
}
function _destroy_container($0) {
 $0 = $0|0;
 var $$019 = 0, $$020 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[130]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = ($4|0)==(0|0);
 do {
  if ($7) {
   $$019 = 1;
  } else {
   $8 = ((($4)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(-1);
   if ($10) {
    HEAP32[$3>>2] = $5;
    $$019 = 0;
    break;
   } else {
    $11 = ((($4)) + 8|0);
    HEAP32[$11>>2] = 0;
    $$019 = 1;
    break;
   }
  }
 } while(0);
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 $15 = ((($2)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 if ($14) {
  $$lcssa = $16;
 } else {
  $$020 = 0;$18 = $16;
  while(1) {
   $17 = (($18) + ($$020<<2)|0);
   $19 = HEAP32[$17>>2]|0;
   _lily_deref($19);
   $20 = HEAP32[$15>>2]|0;
   $21 = (($20) + ($$020<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   _lily_free($22);
   $23 = (($$020) + 1)|0;
   $24 = HEAP32[$12>>2]|0;
   $25 = ($23>>>0)<($24>>>0);
   $26 = HEAP32[$15>>2]|0;
   if ($25) {
    $$020 = $23;$18 = $26;
   } else {
    $$lcssa = $26;
    break;
   }
  }
 }
 _lily_free($$lcssa);
 $27 = ($$019|0)==(0);
 if ($27) {
  return;
 }
 _lily_free($2);
 return;
}
function _destroy_string($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_free($4);
 _lily_free($2);
 return;
}
function _destroy_function($0) {
 $0 = $0|0;
 var $$031 = 0, $$032 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[130]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = ($4|0)==(0|0);
 do {
  if ($7) {
   $$031 = 1;
  } else {
   $8 = ((($4)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(-1);
   if ($10) {
    HEAP32[$3>>2] = $5;
    $$031 = 0;
    break;
   } else {
    $11 = ((($4)) + 8|0);
    HEAP32[$11>>2] = 0;
    $$031 = 1;
    break;
   }
  }
 } while(0);
 $12 = ((($2)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 12|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = ($15<<16>>16)==(0);
 if (!($17)) {
  $$032 = 0;
  while(1) {
   $18 = (($13) + ($$032<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = ((($19)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + -1)|0;
    HEAP32[$21>>2] = $23;
    $24 = ($23|0)==(0);
    if ($24) {
     _lily_deref($19);
     _lily_free($19);
    }
   }
   $25 = (($$032) + 1)|0;
   $exitcond = ($25|0)==($16|0);
   if ($exitcond) {
    break;
   } else {
    $$032 = $25;
   }
  }
 }
 _lily_free($13);
 $26 = ($$031|0)==(0);
 if ($26) {
  return;
 }
 _lily_free($2);
 return;
}
function _destroy_file($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($2)) + 6|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   (_fclose($4)|0);
  }
 }
 _lily_free($2);
 return;
}
function _lily_con_set_from_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 524288;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _lily_deref($6);
 }
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + -4|0);
 HEAP32[$12>>2] = $14;
 $15 = HEAP32[$14>>2]|0;
 ;HEAP32[$6>>2]=HEAP32[$15>>2]|0;HEAP32[$6+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$15+12>>2]|0;
 HEAP32[$15>>2] = 0;
 return;
}
function _lily_con_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_arg_count($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _lily_arg_isa($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==($2<<16>>16);
 $10 = $9&1;
 return ($10|0);
}
function _lily_stack_take($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -4|0);
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_stack_push_and_destroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lily_push_value($0,$1);
 _lily_deref($1);
 _lily_free($1);
 return;
}
function _lily_stack_get_top($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_stack_drop_top($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -4|0);
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$5>>2]|0;
 _lily_deref($6);
 HEAP32[$6>>2] = 0;
 return;
}
function _lily_list_take($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_push_value($0,$6);
 _lily_deref($6);
 _lily_free($6);
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($2|0);
 if (!($9)) {
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($2<<2)|0);
  $12 = ((($11)) + 4|0);
  $13 = (($8) - ($2))|0;
  $14 = $13 << 2;
  $15 = (($14) + -4)|0;
  _memmove(($11|0),($12|0),($15|0))|0;
 }
 $16 = HEAP32[$7>>2]|0;
 $17 = (($16) + -1)|0;
 HEAP32[$7>>2] = $17;
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$18>>2] = $20;
 return;
}
function _lily_list_reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = ($6|0)>($1|0);
 if ($7) {
  return;
 }
 $8 = ($6|0)==(0);
 $$ = $8 ? 8 : $6;
 $$0 = $$;
 while(1) {
  $9 = ($$0|0)<($1|0);
  $10 = $$0 << 1;
  if ($9) {
   $$0 = $10;
  } else {
   break;
  }
 }
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $$0 << 2;
 $14 = (_lily_realloc($12,$13)|0);
 HEAP32[$11>>2] = $14;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($$0) - ($15))|0;
 HEAP32[$4>>2] = $16;
 return;
}
function _lily_list_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _grow_list($0);
 }
 $5 = (_lily_value_copy($1)|0);
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9<<2)|0);
 HEAP32[$10>>2] = $5;
 $11 = HEAP32[$8>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$8>>2] = $12;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$2>>2] = $14;
 return;
}
function _grow_list($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8)|0;
 $4 = $3 >>> 2;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + ($2))|0;
 $8 = $7 << 2;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$5>>2] = $9;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $4;
 return;
}
function _lily_value_copy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 524288;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
 }
 $8 = (_lily_malloc(16)|0);
 $9 = HEAP32[$0>>2]|0;
 HEAP32[$8>>2] = $9;
 $10 = ((($8)) + 8|0);
 $11 = ((($0)) + 8|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $10;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 return ($8|0);
}
function _lily_list_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _grow_list($0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($1|0);
 if (!($8)) {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1<<2)|0);
  $12 = ((($11)) + 4|0);
  $13 = (($7) - ($1))|0;
  $14 = $13 << 2;
  _memmove(($12|0),($11|0),($14|0))|0;
 }
 $15 = (_lily_value_copy($2)|0);
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($1<<2)|0);
 HEAP32[$18>>2] = $15;
 $19 = HEAP32[$6>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[$6>>2] = $20;
 $21 = HEAP32[$3>>2]|0;
 $22 = (($21) + -1)|0;
 HEAP32[$3>>2] = $22;
 return;
}
function _lily_bytestring_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_bytestring_length($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_file_for_write($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _lily_IOError($0,5119,$vararg_buffer);
  // unreachable;
 }
 $5 = ((($1)) + 5|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  _lily_IOError($0,5148,$vararg_buffer1);
  // unreachable;
 } else {
  $8 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _lily_file_for_read($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _lily_IOError($0,5119,$vararg_buffer);
  // unreachable;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  _lily_IOError($0,5175,$vararg_buffer1);
  // unreachable;
 } else {
  $8 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _lily_string_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_string_length($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_value_compare($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = 0;
 $4 = (_lily_value_compare_raw($0,$3,$1,$2)|0);
 STACKTOP = sp;return ($4|0);
}
function _lily_value_compare_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0101110 = 0, $$099 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP16[$2>>1]|0;
 $5 = HEAP16[$3>>1]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(100);
 if ($7) {
  _lily_RuntimeError($0,5202,$vararg_buffer);
  // unreachable;
 }
 $8 = ($4<<16>>16)==($5<<16>>16);
 if (!($8)) {
  $$099 = 0;
  STACKTOP = sp;return ($$099|0);
 }
 switch ($4<<16>>16) {
 case 1: case 6:  {
  $9 = ((($2)) + 8|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($3)) + 8|0);
  $17 = $16;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($12|0)==($19|0);
  $24 = ($15|0)==($22|0);
  $25 = $23 & $24;
  $26 = $25&1;
  $$099 = $26;
  STACKTOP = sp;return ($$099|0);
  break;
 }
 case 2:  {
  $27 = ((($2)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $29 = ((($3)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $28 == $30;
  $32 = $31&1;
  $$099 = $32;
  STACKTOP = sp;return ($$099|0);
  break;
 }
 case 3:  {
  $33 = ((($2)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($3)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_strcmp($36,$40)|0);
  $42 = ($41|0)==(0);
  $43 = $42&1;
  $$099 = $43;
  STACKTOP = sp;return ($$099|0);
  break;
 }
 case 5:  {
  $44 = ((($2)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($3)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($45)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($47)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($49|0)==($51|0);
  if ($52) {
   $53 = ((($47)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($45)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_memcmp($56,$54,$49)|0);
   $58 = ($57|0)==(0);
   $60 = $58;
  } else {
   $60 = 0;
  }
  $59 = $60&1;
  $$099 = $59;
  STACKTOP = sp;return ($$099|0);
  break;
 }
 default: {
  $61 = $4 | 2;
  $62 = ($61<<16>>16)==(11);
  if ($62) {
   $63 = (_subvalue_eq($0,$1,$2,$3)|0);
   $$099 = $63;
   STACKTOP = sp;return ($$099|0);
  }
  $64 = ($4<<16>>16)==(10);
  if (!($64)) {
   $96 = HEAP32[$2>>2]|0;
   $97 = $96 & 2097152;
   $98 = ($97|0)==(0);
   $99 = ((($2)) + 8|0);
   if ($98) {
    $103 = HEAP32[$99>>2]|0;
    $104 = ((($3)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ($103|0)==($105|0);
    $107 = $106&1;
    $$099 = $107;
    STACKTOP = sp;return ($$099|0);
   }
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==(0|0);
   if ($101) {
    $$099 = 1;
    STACKTOP = sp;return ($$099|0);
   }
   $102 = (_subvalue_eq($0,$1,$2,$3)|0);
   $$099 = $102;
   STACKTOP = sp;return ($$099|0);
  }
  $65 = ((($2)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($3)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($66)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($68)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $not$ = ($70|0)==($72|0);
  $$ = $not$&1;
  if (!($not$)) {
   $$099 = $$;
   STACKTOP = sp;return ($$099|0);
  }
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$1>>2] = $74;
  $75 = ((($66)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)>(0);
  L27: do {
   if ($77) {
    $78 = ((($66)) + 16|0);
    $$0101110 = 0;
    while(1) {
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($$0101110<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(0|0);
     if (!($82)) {
      $83 = ((($81)) + 16|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (_lily_hash_get($0,$68,$84)|0);
      $86 = ($85|0)==(0|0);
      if ($86) {
       $$4 = 0;
       break L27;
      }
      $87 = ((($81)) + 20|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (_lily_value_compare_raw($0,$1,$88,$85)|0);
      $90 = ($89|0)==(0);
      if ($90) {
       $$4 = 0;
       break L27;
      }
     }
     $91 = (($$0101110) + 1)|0;
     $92 = HEAP32[$75>>2]|0;
     $93 = ($91|0)<($92|0);
     if ($93) {
      $$0101110 = $91;
     } else {
      $$4 = $$;
      break;
     }
    }
   } else {
    $$4 = $$;
   }
  } while(0);
  $94 = HEAP32[$1>>2]|0;
  $95 = (($94) + -1)|0;
  HEAP32[$1>>2] = $95;
  $$099 = $$4;
  STACKTOP = sp;return ($$099|0);
 }
 }
 return (0)|0;
}
function _subvalue_eq($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03031 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if (!($12)) {
  $$3 = 0;
  return ($$3|0);
 }
 $13 = ((($5)) + 16|0);
 $14 = HEAP32[$8>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$3 = 1;
  return ($$3|0);
 }
 $16 = ((($7)) + 16|0);
 $$03031 = 0;
 while(1) {
  $20 = HEAP32[$13>>2]|0;
  $21 = (($20) + ($$03031<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$16>>2]|0;
  $24 = (($23) + ($$03031<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$1>>2] = $27;
  $28 = (_lily_value_compare_raw($0,$1,$22,$25)|0);
  $29 = ($28|0)==(0);
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + -1)|0;
  HEAP32[$1>>2] = $31;
  $18 = (($$03031) + 1)|0;
  if ($29) {
   $$3 = 0;
   label = 6;
   break;
  }
  $17 = HEAP32[$8>>2]|0;
  $19 = ($18>>>0)<($17>>>0);
  if ($19) {
   $$03031 = $18;
  } else {
   $$3 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$3|0);
 }
 return (0)|0;
}
function _lily_cid_at($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 return ($9|0);
}
function _lily_malloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  _abort();
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function _lily_realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _abort();
  // unreachable;
 } else {
  return ($2|0);
 }
 return (0)|0;
}
function _lily_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _lily_time_loader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 2:  {
  $$0 = 5;
  break;
 }
 case 3:  {
  $$0 = 6;
  break;
 }
 case 4:  {
  $$0 = 7;
  break;
 }
 case 5:  {
  $$0 = 8;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _lily_time_Time_since_epoch($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_generic($0,0)|0);
 $2 = ((($1)) + 12|0);
 $3 = (_mktime(($2|0))|0);
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 _lily_return_integer($0,$3,$5);
 return;
}
function _lily_time_Time_to_s($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = sp;
 $2 = (_lily_arg_generic($0,0)|0);
 $3 = ((($2)) + 12|0);
 (_strftime(($1|0),64,(5328|0),($3|0))|0);
 _lily_push_string($0,$1);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_time_Time_now($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_lily_cid_at($0,0)|0);
 $3 = (_lily_push_foreign($0,$2,9,56)|0);
 (_time(($1|0))|0);
 $4 = (_localtime(($1|0))|0);
 $5 = ((($3)) + 12|0);
 dest=$5; src=$4; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_time_Time_clock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_clock()|0);
 $2 = (+($1|0));
 $3 = $2 / 1.0E+6;
 _lily_return_double($0,$3);
 return;
}
function _destroy_Time($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _lily_sys_loader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 1:  {
  $$0 = 10;
  break;
 }
 case 2:  {
  $$0 = 11;
  break;
 }
 case 3:  {
  $$0 = 12;
  break;
 }
 case 4:  {
  _lily_sys_var_argv($0);
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _lily_sys_var_argv($0) {
 $0 = $0|0;
 var $$022 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_config_get($0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_push_list($0,$2)|0);
 $6 = ($2|0)>(0);
 if ($6) {
  $$022 = 0;
 } else {
  return;
 }
 while(1) {
  $7 = (($4) + ($$022<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_push_string($0,$8);
  _lily_con_set_from_stack($0,$5,$$022);
  $9 = (($$022) + 1)|0;
  $exitcond = ($9|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$022 = $9;
  }
 }
 return;
}
function _lily_sys__set_recursion_limit($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = (_i64Add(($1|0),($2|0),-1,-1)|0);
 $4 = tempRet0;
 $5 = ($4>>>0)>(0);
 $6 = ($3>>>0)>(2147483646);
 $7 = ($4|0)==(0);
 $8 = $7 & $6;
 $9 = $5 | $8;
 if ($9) {
  $10 = $vararg_buffer;
  $11 = $10;
  HEAP32[$11>>2] = $1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $2;
  _lily_ValueError($0,5463,$vararg_buffer);
 }
 $14 = ((($0)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($2|0)<(0);
 $17 = ($1>>>0)<($15>>>0);
 $18 = ($2|0)==(0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 if (!($20)) {
  $25 = ((($0)) + 8|0);
  HEAP32[$25>>2] = $1;
  _lily_return_unit($0);
  STACKTOP = sp;return;
 }
 $21 = $vararg_buffer1;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $2;
 _lily_ValueError($0,5500,$vararg_buffer1);
 $25 = ((($0)) + 8|0);
 HEAP32[$25>>2] = $1;
 _lily_return_unit($0);
 STACKTOP = sp;return;
}
function _lily_sys__recursion_limit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_return_integer($0,$2,0);
 return;
}
function _lily_sys__getenv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string_raw($0,0)|0);
 $2 = (_getenv(($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _lily_return_none($0);
  return;
 } else {
  $4 = (_lily_push_variant($0,14,1)|0);
  _lily_push_string($0,$2);
  _lily_con_set_from_stack($0,$4,0);
  _lily_return_top($0);
  return;
 }
}
function _lily_config_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 100;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 4;
 $4 = ((($0)) + 24|0);
 dest=$4; src=5726; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 2;
 $7 = HEAP32[824]|0;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $7;
 return;
}
function _lily_default_import_func($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = (_lily_msgbuf_get($0)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $5 = (_lily_mb_sprintf($4,5742,$vararg_buffer)|0);
 $6 = (_lily_load_file($0,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer2>>2] = $2;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $3;
 $8 = (_lily_mb_sprintf($4,5753,$vararg_buffer2)|0);
 $9 = (_lily_load_library($0,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer6>>2] = $2;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $3;
 $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
 HEAP32[$vararg_ptr10>>2] = $3;
 $11 = (_lily_mb_sprintf($4,5762,$vararg_buffer6)|0);
 $12 = (_lily_load_file_package($0,$11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer11>>2] = $2;
 $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $3;
 $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
 HEAP32[$vararg_ptr15>>2] = $3;
 $14 = (_lily_mb_sprintf($4,5789,$vararg_buffer11)|0);
 $15 = (_lily_load_library($0,$14)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = (_strcmp($2,$1)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer16>>2] = $1;
 $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
 HEAP32[$vararg_ptr19>>2] = $3;
 $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
 HEAP32[$vararg_ptr20>>2] = $3;
 $19 = (_lily_mb_sprintf($4,5762,$vararg_buffer16)|0);
 $20 = (_lily_load_file_package($0,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  HEAP32[$vararg_buffer21>>2] = $1;
  $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
  HEAP32[$vararg_ptr24>>2] = $3;
  $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
  HEAP32[$vararg_ptr25>>2] = $3;
  $22 = (_lily_mb_sprintf($4,5789,$vararg_buffer21)|0);
  (_lily_load_library($0,$22)|0);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _lily_load_file($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_import_check($4,$1,$2)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = HEAP32[$2>>2]|0;
  $$1 = $7;
  STACKTOP = sp;return ($$1|0);
 }
 $8 = (_fopen($1,15683)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $10 = ((($4)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_lexer_load($11,0,$8);
 $12 = (_new_module($4)|0);
 $13 = ((($4)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($12)) + 40|0);
 HEAP32[$19>>2] = $18;
 _add_path_to_module($12,$1);
 $20 = ((($12)) + 6|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21 | 2;
 HEAP16[$20>>1] = $22;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _lily_load_library($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_import_check($4,$1,$2)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = HEAP32[$2>>2]|0;
  $$2 = $7;
  STACKTOP = sp;return ($$2|0);
 }
 $8 = (_lily_library_load($1)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $10 = ((($4)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_lily_mb_flush($11)|0);
 $13 = (_loadname_from_path($1)|0);
 $14 = (_strlen($1)|0);
 $15 = (($14) + 1)|0;
 $16 = (_lily_malloc($15)|0);
 (_strcpy($16,$1)|0);
 HEAP32[$vararg_buffer>>2] = $13;
 $17 = (_lily_mb_sprintf($12,5814,$vararg_buffer)|0);
 $18 = (_lily_library_get($8,$17)|0);
 HEAP32[$vararg_buffer1>>2] = $13;
 $19 = (_lily_mb_sprintf($12,5828,$vararg_buffer1)|0);
 $20 = (_lily_library_get($8,$19)|0);
 $21 = ($18|0)==(0|0);
 $22 = ($20|0)==(0|0);
 $or$cond = $21 | $22;
 if ($or$cond) {
  _lily_free($13);
  _lily_free($16);
  _lily_library_free($8);
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 } else {
  $23 = (_new_module($4)|0);
  $24 = ((($4)) + 80|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($23)) + 40|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($23)) + 12|0);
  HEAP32[$31>>2] = $13;
  $32 = (_dir_from_path($1)|0);
  $33 = ((($23)) + 16|0);
  HEAP32[$33>>2] = $32;
  $34 = ((($23)) + 20|0);
  HEAP32[$34>>2] = $16;
  $35 = (_strlen($1)|0);
  $36 = $35&65535;
  $37 = ((($23)) + 10|0);
  HEAP16[$37>>1] = $36;
  _add_data_to_module($23,$8,$18,$20);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _lily_load_file_package($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_load_file($0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  return ($2|0);
 }
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 40|0);
 HEAP32[$10>>2] = $9;
 return ($2|0);
}
function _import_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  HEAP32[$2>>2] = 0;
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $7 = (_find_existing_module($0,$1)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($10)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + -1)|0;
  $15 = (($11) + ($14<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  HEAP16[$3>>1] = $16;
  $17 = ((($0)) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  _lily_sp_insert($18,$1,$3);
  $19 = HEAP16[$3>>1]|0;
  _lily_u16_write_1($10,$19);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 } else {
  HEAP32[$4>>2] = $7;
  HEAP32[$2>>2] = 1;
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _loadname_from_path($0) {
 $0 = $0|0;
 var $$0 = 0, $$022 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strrchr($0,47)|0);
 $2 = ($1|0)==(0|0);
 $3 = ((($1)) + 1|0);
 $$0 = $2 ? $0 : $3;
 $4 = (_strrchr($$0,46)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $9 = (_strlen($0)|0);
  $$022 = $9;
 } else {
  $6 = $4;
  $7 = $$0;
  $8 = (($6) - ($7))|0;
  $$022 = $8;
 }
 $10 = (($$022) + 1)|0;
 $11 = (_lily_malloc($10)|0);
 (_strncpy($11,$$0,$$022)|0);
 $12 = (($11) + ($$022)|0);
 HEAP8[$12>>0] = 0;
 return ($11|0);
}
function _new_module($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(60)|0);
 $2 = ((($1)) + 10|0);
 HEAP32[$1>>2] = 0;
 $3 = ((($1)) + 44|0);
 $4 = ((($1)) + 4|0);
 dest=$2; stop=dest+30|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 HEAP16[$4>>1] = 5;
 $5 = ((($1)) + 6|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($1)) + 40|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$sink = $0;
 } else {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $$sink = $10;
 }
 HEAP32[$$sink>>2] = $1;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($0)) + 12|0);
 HEAP32[$12>>2] = $1;
 return ($1|0);
}
function _dir_from_path($0) {
 $0 = $0|0;
 var $$0 = 0, $$sink = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strrchr($0,47)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_lily_malloc(1)|0);
  $$0 = $3;$$sink = $3;
  HEAP8[$$sink>>0] = 0;
  return ($$0|0);
 } else {
  $4 = $1;
  $5 = $0;
  $6 = (($4) - ($5))|0;
  $7 = (($6) + 1)|0;
  $8 = (_lily_malloc($7)|0);
  (_strncpy($8,$0,$6)|0);
  $9 = (($8) + ($6)|0);
  $$0 = $8;$$sink = $9;
  HEAP8[$$sink>>0] = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _add_data_to_module($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 44|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 48|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 52|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 $10 = $8&255;
 $11 = $10 << 1;
 if ($9) {
  return;
 }
 $12 = ((($0)) + 56|0);
 $13 = (_lily_malloc($11)|0);
 HEAP32[$12>>2] = $13;
 _memset(($13|0),0,($11|0))|0;
 return;
}
function _find_existing_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $$011 = HEAP32[$0>>2]|0;
 $3 = ($$011|0)==(0|0);
 if ($3) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$012 = $$011;
 }
 while(1) {
  $4 = ((($$012)) + 10|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = ($6|0)==($2|0);
  if ($7) {
   $8 = ((($$012)) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,$1)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0$lcssa = $$012;
    label = 5;
    break;
   }
  }
  $$0 = HEAP32[$$012>>2]|0;
  $12 = ($$0|0)==(0|0);
  if ($12) {
   $$0$lcssa = 0;
   label = 5;
   break;
  } else {
   $$012 = $$0;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _add_path_to_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_loadname_from_path($1)|0);
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = (_dir_from_path($1)|0);
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = (_strlen($1)|0);
 $7 = (($6) + 1)|0;
 $8 = (_lily_malloc($7)|0);
 $9 = ((($0)) + 20|0);
 HEAP32[$9>>2] = $8;
 $10 = (_strlen($1)|0);
 $11 = $10&65535;
 $12 = ((($0)) + 10|0);
 HEAP16[$12>>1] = $11;
 (_strcpy($8,$1)|0);
 return;
}
function _lily_new_state($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(104)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$1>>2] = 0;
 $3 = ((($1)) + 96|0);
 HEAP32[$3>>2] = $0;
 $4 = (_lily_new_raiser()|0);
 $5 = ((($1)) + 22|0);
 HEAP16[$5>>1] = 1;
 $6 = ((($1)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 60|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 92|0);
 HEAP32[$8>>2] = $4;
 $9 = (_lily_new_expr_state()|0);
 $10 = ((($1)) + 36|0);
 HEAP32[$10>>2] = $9;
 $11 = (_lily_new_generic_pool()|0);
 $12 = ((($1)) + 52|0);
 HEAP32[$12>>2] = $11;
 $13 = (_lily_new_symtab($11)|0);
 $14 = ((($1)) + 80|0);
 HEAP32[$14>>2] = $13;
 $15 = (_lily_new_vm_state($4)|0);
 $16 = ((($1)) + 84|0);
 HEAP32[$16>>2] = $15;
 $17 = (_lily_malloc(28)|0);
 $18 = ((($1)) + 100|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($17)) + 24|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$16>>2]|0;
 $21 = ((($20)) + 72|0);
 HEAP32[$21>>2] = $1;
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$16>>2]|0;
 $25 = ((($24)) + 52|0);
 HEAP32[$25>>2] = $23;
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$16>>2]|0;
 $29 = ((($28)) + 44|0);
 HEAP32[$29>>2] = $27;
 $30 = HEAP32[$16>>2]|0;
 _lily_module_register($30,21807,2012,3);
 $31 = HEAP32[$14>>2]|0;
 $32 = HEAP32[$2>>2]|0;
 _lily_set_builtin($31,$32);
 $33 = HEAP32[$14>>2]|0;
 _lily_init_pkg_builtin($33);
 $34 = HEAP32[$14>>2]|0;
 $35 = (_lily_new_emit_state($34,$4)|0);
 $36 = ((($1)) + 76|0);
 HEAP32[$36>>2] = $35;
 $37 = (_lily_new_lex_state($4)|0);
 $38 = ((($1)) + 72|0);
 HEAP32[$38>>2] = $37;
 $39 = (_lily_new_msgbuf(64)|0);
 $40 = ((($1)) + 64|0);
 HEAP32[$40>>2] = $39;
 $41 = (_lily_new_buffer_u16(4)|0);
 $42 = ((($1)) + 16|0);
 HEAP32[$42>>2] = $41;
 $43 = (_lily_new_string_pile()|0);
 $44 = ((($1)) + 40|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($1)) + 28|0);
 HEAP16[$45>>1] = 0;
 $46 = HEAP32[$36>>2]|0;
 $47 = ((($46)) + 84|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($1)) + 88|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$38>>2]|0;
 $51 = ((($50)) + 16|0);
 $52 = HEAP32[$10>>2]|0;
 $53 = ((($52)) + 40|0);
 HEAP32[$53>>2] = $51;
 $54 = HEAP32[$38>>2]|0;
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$36>>2]|0;
 $57 = ((($56)) + 68|0);
 HEAP32[$57>>2] = $55;
 $58 = HEAP32[$14>>2]|0;
 $59 = HEAP32[$36>>2]|0;
 $60 = ((($59)) + 92|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$36>>2]|0;
 $62 = ((($61)) + 88|0);
 HEAP32[$62>>2] = $1;
 $63 = HEAP32[$14>>2]|0;
 $64 = HEAP32[$38>>2]|0;
 $65 = ((($64)) + 48|0);
 HEAP32[$65>>2] = $63;
 $66 = HEAP32[$36>>2]|0;
 $67 = ((($66)) + 76|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($1)) + 44|0);
 HEAP32[$69>>2] = $68;
 $70 = (_lily_new_string_pile()|0);
 $71 = ((($1)) + 48|0);
 HEAP32[$71>>2] = $70;
 $72 = (_new_module($1)|0);
 $73 = ((($1)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = HEAP32[$14>>2]|0;
 $75 = ((($74)) + 8|0);
 HEAP32[$75>>2] = $72;
 _create_main_func($1);
 $76 = HEAP32[$16>>2]|0;
 _lily_module_register($76,5843,1132,4);
 $77 = HEAP32[$16>>2]|0;
 _lily_module_register($77,5847,2660,5);
 $78 = HEAP32[$16>>2]|0;
 _lily_module_register($78,5854,1104,6);
 $79 = ((($1)) + 20|0);
 HEAP16[$79>>1] = 0;
 $80 = HEAP32[$16>>2]|0;
 return ($80|0);
}
function _lily_module_register($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_new_module($5)|0);
 $7 = (_strlen($1)|0);
 $8 = (($7) + 1)|0;
 $9 = (_lily_malloc($8)|0);
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $9;
 (_strcpy($9,$1)|0);
 _add_data_to_module($6,0,$2,$3);
 $11 = ((($6)) + 10|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($6)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 | 1;
 HEAP16[$12>>1] = $14;
 return;
}
function _create_main_func($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[628]|0;
 _lily_tm_add($4,$5);
 $6 = ((($0)) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_tm_make_call($4,0,$9,1)|0);
 $11 = (_new_native_define_var($0,0,5859,0)|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($11)) + 12|0);
 HEAP32[$18>>2] = $10;
 $19 = ((($0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = $17;
 $24 = ((($0)) + 56|0);
 HEAP32[$24>>2] = $17;
 $25 = ((($0)) + 68|0);
 HEAP32[$25>>2] = $10;
 return;
}
function _new_native_define_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_make_new_var(0,$2,$3)|0);
 $5 = ((($0)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 $11 = ((($4)) + 8|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($4)) + 36|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($4)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 | 32;
 HEAP16[$13>>1] = $15;
 $16 = ($1|0)==(0|0);
 if ($16) {
  $22 = HEAP32[$5>>2]|0;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$4>>2] = $26;
  HEAP32[$25>>2] = $4;
  $27 = ((($0)) + 76|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 56|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 10|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = (($32) + 1)<<16>>16;
  HEAP16[$31>>1] = $33;
  $$0 = 0;
  _make_new_function($0,$$0,$4,0);
  return ($4|0);
 } else {
  $17 = ((($1)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($4)) + 40|0);
  HEAP32[$19>>2] = $1;
  $20 = ((($1)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$4>>2] = $21;
  HEAP32[$20>>2] = $4;
  $$0 = $18;
  _make_new_function($0,$$0,$4,0);
  return ($4|0);
 }
 return (0)|0;
}
function _make_new_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(48)|0);
 $4 = (_strlen($1)|0);
 $5 = (($4) + 1)|0;
 $6 = (_lily_malloc($5)|0);
 $7 = ((($3)) + 16|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($3)) + 4|0);
 HEAP16[$8>>1] = 1;
 $9 = ((($3)) + 6|0);
 HEAP16[$9>>1] = 0;
 $10 = HEAP32[$7>>2]|0;
 (_strcpy($10,$1)|0);
 $11 = $2&65535;
 $12 = ((($3)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = (_shorthash_for_name($1)|0);
 $14 = tempRet0;
 $15 = ((($3)) + 24|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = ((($3)) + 12|0);
 HEAP32[$20>>2] = $0;
 HEAP32[$3>>2] = 0;
 $21 = ((($3)) + 40|0);
 HEAP32[$21>>2] = 0;
 return ($3|0);
}
function _make_new_function($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_lily_malloc(40)|0);
 $5 = ((($0)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 76|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_lily_emit_new_proto($10,$12,$1,$14)|0);
 HEAP32[$4>>2] = 1;
 $16 = ((($4)) + 24|0);
 HEAP32[$16>>2] = $3;
 $17 = ((($4)) + 28|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($4)) + 12|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($4)) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($4)) + 20|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($8)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($4)) + 36|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($4)) + 16|0);
 HEAP32[$24>>2] = $15;
 $25 = (_lily_malloc(16)|0);
 HEAP32[$25>>2] = 7;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $4;
 $27 = HEAP32[$5>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 _lily_vs_push($28,$25);
 return;
}
function _shorthash_for_name($0) {
 $0 = $0|0;
 var $$01621 = 0, $$01720 = 0, $$01819 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $20 = 0;$21 = 0;
  tempRet0 = ($20);
  return ($21|0);
 } else {
  $$01621 = 0;$$01720 = 0;$$01819 = $0;$10 = 0;$12 = 0;$4 = $1;
 }
 while(1) {
  $3 = $4 << 24 >> 24;
  $5 = ($3|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = (_bitshift64Shl(($3|0),($6|0),($$01621|0))|0);
  $8 = tempRet0;
  $9 = $7 | $10;
  $11 = $8 | $12;
  $13 = ((($$01819)) + 1|0);
  $14 = (($$01720) + 1)|0;
  $15 = (($$01621) + 8)|0;
  $16 = HEAP8[$13>>0]|0;
  $17 = ($16<<24>>24)!=(0);
  $18 = ($14|0)!=(8);
  $19 = $18 & $17;
  if ($19) {
   $$01621 = $15;$$01720 = $14;$$01819 = $13;$10 = $9;$12 = $11;$4 = $16;
  } else {
   $20 = $11;$21 = $9;
   break;
  }
 }
 tempRet0 = ($20);
 return ($21|0);
}
function _lily_free_state($0) {
 $0 = $0|0;
 var $$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_free_raiser($9);
 $10 = ((($2)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_free_expr_state($11);
 $12 = ((($2)) + 84|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_free_vm($13);
 $14 = ((($2)) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free_lex_state($15);
 $16 = ((($2)) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_free_emit_state($17);
 $18 = ((($2)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_free_buffer_u16($19);
 $20 = ((($2)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 20|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$2>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = ((($2)) + 80|0);
  $$in = $23;
  while(1) {
   $26 = ((($$in)) + 24|0);
   $27 = HEAP32[$26>>2]|0;
   _free_links_until($27);
   $28 = HEAP32[$$in>>2]|0;
   $29 = ((($$in)) + 44|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    _lily_library_free($30);
   }
   $32 = HEAP32[$25>>2]|0;
   _lily_free_module_symbols($32,$$in);
   $33 = ((($$in)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   _lily_free($34);
   $35 = ((($$in)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   _lily_free($36);
   $37 = ((($$in)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   _lily_free($38);
   $39 = ((($$in)) + 56|0);
   $40 = HEAP32[$39>>2]|0;
   _lily_free($40);
   _lily_free($$in);
   $41 = ($28|0)==(0|0);
   if ($41) {
    break;
   } else {
    $$in = $28;
   }
  }
 }
 $42 = ((($2)) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 _lily_free_string_pile($43);
 $44 = ((($2)) + 40|0);
 $45 = HEAP32[$44>>2]|0;
 _lily_free_string_pile($45);
 $46 = ((($2)) + 80|0);
 $47 = HEAP32[$46>>2]|0;
 _lily_free_symtab($47);
 $48 = ((($2)) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 _lily_free_generic_pool($49);
 $50 = ((($2)) + 64|0);
 $51 = HEAP32[$50>>2]|0;
 _lily_free_msgbuf($51);
 $52 = ((($2)) + 100|0);
 $53 = HEAP32[$52>>2]|0;
 _lily_free($53);
 _lily_free($2);
 return;
}
function _free_links_until($0) {
 $0 = $0|0;
 var $$01 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 } else {
  $$01 = $0;
 }
 while(1) {
  $2 = ((($$01)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($$01)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_free($5);
  _lily_free($$01);
  $6 = ($3|0)==(0|0);
  if ($6) {
   break;
  } else {
   $$01 = $3;
  }
 }
 return;
}
function _try_method_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$029 = 0, $$1 = 0, $$130 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 46|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($1)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($5<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $5;$$029 = $11;
 while(1) {
  $12 = ((($$029)) + 2|0);
  $13 = (_strcmp($2,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$1 = $$0;$$130 = $$029;
   break;
  }
  $15 = (($$0) + 1)|0;
  $16 = (($9) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(109);
  if ($19) {
   $$0 = $15;$$029 = $17;
  } else {
   $$1 = $15;$$130 = $17;
   break;
  }
 }
 $20 = HEAP8[$$130>>0]|0;
 $21 = ($20<<24>>24)==(109);
 if (!($21)) {
  $$028 = 0;
  return ($$028|0);
 }
 $22 = HEAP32[$6>>2]|0;
 $23 = (_new_foreign_define_var($0,$22,$1,$$1)|0);
 $$028 = $23;
 return ($$028|0);
}
function _new_foreign_define_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 2|0);
 $9 = ((($0)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_make_new_var(0,$8,0)|0);
 $14 = HEAP32[$9>>2]|0;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $1;
 $16 = HEAP32[$9>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19&65535;
 $21 = ((($13)) + 8|0);
 HEAP16[$21>>1] = $20;
 $22 = ((($13)) + 36|0);
 HEAP32[$22>>2] = 1;
 $23 = ((($13)) + 6|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 | 288;
 HEAP16[$23>>1] = $25;
 $26 = ($2|0)==(0|0);
 if ($26) {
  $27 = ((($1)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$13>>2] = $28;
  HEAP32[$27>>2] = $13;
  $$0 = 0;
 } else {
  $29 = ((($2)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$13>>2] = $30;
  HEAP32[$29>>2] = $13;
  $31 = ((($13)) + 40|0);
  HEAP32[$31>>2] = $2;
  $32 = ((($2)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $$0 = $33;
 }
 $34 = ((($1)) + 52|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($0)) + 84|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_iii[$35 & 15]($37,$3)|0);
 _make_new_function($0,$$0,$13,$38);
 _dynaload_function($0,$1,$13,$3);
 $39 = HEAP32[$9>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP16[$21>>1]|0;
 $43 = $42&65535;
 $44 = (($41) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($13)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 10|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = ((($47)) + 14|0);
 HEAP16[$52>>1] = $51;
 $53 = HEAP32[$9>>2]|0;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $12;
 return ($13|0);
}
function _dynaload_function($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 2|0);
 $11 = (_strlen($10)|0);
 $12 = (($10) + ($11)|0);
 $13 = ((($12)) + 1|0);
 $14 = ((($0)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_gp_save_and_hide($15)|0);
 _lily_lexer_load($5,1,$13);
 _lily_lexer($5);
 _collect_generics($0);
 $17 = ((($0)) + 88|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[628]|0;
 _lily_tm_add($18,$19);
 _collect_call_args($0,$2,2359296);
 $20 = HEAP32[$14>>2]|0;
 _lily_gp_restore_and_unhide($20,$16);
 _lily_pop_lex_entry($5);
 return;
}
function _collect_generics($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(4);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_gp_num_in_scope($8)|0);
 $10 = (($9) + 65)|0;
 $11 = $10&255;
 HEAP8[$1>>0] = $11;
 $12 = ((($1)) + 1|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($3)) + 12|0);
 $14 = ((($0)) + 92|0);
 $15 = ((($0)) + 92|0);
 $16 = ((($0)) + 92|0);
 $$0 = $11;
 L4: while(1) {
  _lily_lexer($3);
  $17 = HEAP32[$4>>2]|0;
  $18 = ($17|0)==(38);
  if (!($18)) {
   label = 4;
   break;
  }
  $23 = HEAP32[$13>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $$0 << 24 >> 24;
  $26 = ($24<<24>>24)==($$0<<24>>24);
  if (!($26)) {
   label = 7;
   break;
  }
  $27 = ((($23)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if (!($29)) {
   label = 7;
   break;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = (($25) + -65)|0;
  _lily_gp_push($32,$1,$33);
  _lily_lexer($3);
  $34 = (($$0) + 1)<<24>>24;
  $35 = HEAP32[$4>>2]|0;
  switch ($35|0) {
  case 36:  {
   label = 11;
   break L4;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   label = 12;
   break L4;
  }
  }
  HEAP8[$1>>0] = $34;
  $$0 = $34;
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$16>>2]|0;
  $20 = (_tokname(38)|0);
  $21 = HEAP32[$4>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  _lily_raise_syn($19,6220,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $30 = ($$0<<24>>24)==(91);
  $31 = HEAP32[$15>>2]|0;
  if ($30) {
   _lily_raise_syn($31,7419,$vararg_buffer2);
   // unreachable;
  } else {
   HEAP32[$vararg_buffer4>>2] = $1;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $23;
   _lily_raise_syn($31,7438,$vararg_buffer4);
   // unreachable;
  }
 }
 else if ((label|0) == 11) {
  _lily_lexer($3);
  $36 = $34 << 24 >> 24;
  $37 = (($36) + -65)|0;
  $38 = ((($0)) + 76|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 80|0);
  $41 = HEAP32[$40>>2]|0;
  _lily_ts_generics_seen($41,$37);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $42 = HEAP32[$14>>2]|0;
  $43 = (_tokname($35)|0);
  HEAP32[$vararg_buffer8>>2] = $43;
  _lily_raise_syn($42,6289,$vararg_buffer8);
  // unreachable;
 }
}
function _collect_call_args($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0105 = 0, $$0110 = 0, $$1106$lcssa = 0, $$1106119 = 0, $$111 = 0, $$113 = 0, $$2 = 0, $$2104 = 0, $$2104$shrunk = 0, $$2107 = 0, $$3 = 0, $$3108 = 0, $$4 = 0, $$4109118 = 0, $$lcssa = 0, $$lcssa117 = 0, $$pr = 0, $$pr114 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $not$115 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 36|0;
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = ((($0)) + 28|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $2 & 1048576;
 $15 = ($14|0)==(0);
 if ($15) {
  $24 = $2 & 2359296;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $2 & 4194304;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $2 & 8388608;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $2 & 524288;
     $31 = ($30|0)==(0);
     if ($31) {
      $$0110 = 0;$$2 = $10;$$2104$shrunk = 0;
     } else {
      $32 = ((($0)) + 76|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($33)) + 56|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($35)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0|0);
      $39 = (($9) + -2)|0;
      $not$115 = $38 ^ 1;
      $$113 = $38 ? $10 : $39;
      $$0110 = 8;$$2 = $$113;$$2104$shrunk = $not$115;
     }
    } else {
     $$0110 = 10;$$2 = $10;$$2104$shrunk = 0;
    }
   } else {
    $$0110 = 9;$$2 = $10;$$2104$shrunk = 0;
   }
  } else {
   $$0110 = 8;$$2 = $10;$$2104$shrunk = 0;
  }
 } else {
  $16 = ((($0)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  $23 = (($9) + -2)|0;
  $not$ = $22 ^ 1;
  $$111 = $22 ? $10 : $23;
  $$0110 = 7;$$2 = $$111;$$2104$shrunk = $not$;
 }
 $$2104 = $$2104$shrunk&1;
 $40 = ((($5)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(32);
 do {
  if ($42) {
   _lily_lexer($5);
   $43 = HEAP32[$40>>2]|0;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = ((($0)) + 92|0);
    $46 = HEAP32[$45>>2]|0;
    _lily_raise_syn($46,5868,$vararg_buffer);
    // unreachable;
   } else {
    $$0105 = 0;$$3 = $$2104;$47 = $43;
   }
   L13: while(1) {
    $48 = ($47|0)==(46);
    if ($48) {
     $49 = ($$3|0)==($$0105|0);
     $50 = ((($0)) + 40|0);
     $51 = HEAP32[$50>>2]|0;
     if ($49) {
      $$1106$lcssa = $$0105;$$lcssa117 = $51;
     } else {
      $$1106119 = $$0105;$53 = $51;
      while(1) {
       $52 = (($$1106119) + 1)|0;
       _lily_sp_insert($53,15418,$11);
       $54 = ($$3|0)==($52|0);
       $55 = HEAP32[$50>>2]|0;
       if ($54) {
        $$1106$lcssa = $$3;$$lcssa117 = $55;
        break;
       } else {
        $$1106119 = $52;$53 = $55;
       }
      }
     }
     $56 = ((($5)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     _lily_sp_insert($$lcssa117,$57,$11);
     $58 = (($$1106$lcssa) + 1)|0;
     _lily_lexer($5);
     $$2107 = $58;
    } else {
     $$2107 = $$0105;
    }
    $59 = HEAP32[$6>>2]|0;
    $60 = (FUNCTION_TABLE_iii[$$0110 & 15]($0,$3)|0);
    _lily_tm_add($59,$60);
    $61 = (($$3) + 1)|0;
    $62 = HEAP32[$40>>2]|0;
    switch ($62|0) {
    case 0:  {
     label = 17;
     break L13;
     break;
    }
    case 1:  {
     break;
    }
    default: {
     label = 18;
     break L13;
    }
    }
    _lily_lexer($5);
    $$pr = HEAP32[$40>>2]|0;
    $$0105 = $$2107;$$3 = $61;$47 = $$pr;
   }
   if ((label|0) == 17) {
    _lily_lexer($5);
    $$pr114 = HEAP32[$40>>2]|0;
    $$3108 = $$2107;$$4 = $61;$66 = $$pr114;
    break;
   }
   else if ((label|0) == 18) {
    $63 = ((($0)) + 92|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (_tokname($62)|0);
    HEAP32[$vararg_buffer1>>2] = $65;
    _lily_raise_syn($64,5928,$vararg_buffer1);
    // unreachable;
   }
  } else {
   $$3108 = 0;$$4 = $$2104;$66 = $41;
  }
 } while(0);
 $67 = ($66|0)==(5);
 do {
  if ($67) {
   $68 = HEAP32[$3>>2]|0;
   $69 = $68 & 12582912;
   $70 = ($69|0)==(0);
   if ($70) {
    _lily_lexer($5);
    $71 = HEAP32[$3>>2]|0;
    $72 = $71 & 1048576;
    $73 = ($72|0)==(0);
    if (!($73)) {
     $74 = ((($5)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (_strcmp($75,14664)|0);
     $77 = ($76|0)==(0);
     if ($77) {
      $78 = ((($0)) + 76|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($79)) + 56|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($81)) + 44|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==(0|0);
      if ($84) {
       $88 = ((($0)) + 92|0);
       $89 = HEAP32[$88>>2]|0;
       _lily_raise_syn($89,5966,$vararg_buffer3);
       // unreachable;
      }
      $85 = ((($83)) + 13|0);
      $86 = HEAP8[$85>>0]|0;
      $87 = ($86<<24>>24)==(12);
      if (!($87)) {
       $88 = ((($0)) + 92|0);
       $89 = HEAP32[$88>>2]|0;
       _lily_raise_syn($89,5966,$vararg_buffer3);
       // unreachable;
      }
      $90 = ((($1)) + 6|0);
      $91 = HEAP16[$90>>1]|0;
      $92 = $91 & 512;
      $93 = ($92<<16>>16)==(0);
      if ($93) {
       $96 = HEAP32[$6>>2]|0;
       $97 = HEAP32[627]|0;
       $98 = ((($97)) + 12|0);
       $99 = HEAP32[$98>>2]|0;
       _lily_tm_insert($96,$$2,$99);
       _lily_lexer($5);
       break;
      } else {
       $94 = ((($0)) + 92|0);
       $95 = HEAP32[$94>>2]|0;
       _lily_raise_syn($95,6016,$vararg_buffer5);
       // unreachable;
      }
     }
    }
    $100 = HEAP32[$6>>2]|0;
    $101 = HEAP32[$3>>2]|0;
    $102 = (_get_type_raw($0,$101)|0);
    _lily_tm_insert($100,$$2,$102);
   }
  }
 } while(0);
 $103 = ($$3108|0)==(0);
 if (!($103)) {
  $104 = ((($1)) + 6|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 & 1024;
  $107 = ($106<<16>>16)==(0);
  if (!($107)) {
   $108 = ((($0)) + 92|0);
   $109 = HEAP32[$108>>2]|0;
   _lily_raise_syn($109,6067,$vararg_buffer7);
   // unreachable;
  }
  $110 = ($$3108|0)==($$4|0);
  $111 = ((($0)) + 40|0);
  $112 = HEAP32[$111>>2]|0;
  if ($110) {
   $$lcssa = $112;
  } else {
   $$4109118 = $$3108;$114 = $112;
   while(1) {
    $113 = (($$4109118) + 1)|0;
    _lily_sp_insert($114,15418,$11);
    $115 = ($113|0)==($$4|0);
    $116 = HEAP32[$111>>2]|0;
    if ($115) {
     $$lcssa = $116;
     break;
    } else {
     $$4109118 = $113;$114 = $116;
    }
   }
  }
  _lily_sp_insert($$lcssa,6127,$11);
  _put_keyargs_in_target($0,$1,$13);
  HEAP16[$11>>1] = $12;
 }
 $117 = HEAP32[$6>>2]|0;
 $118 = HEAP32[$3>>2]|0;
 $119 = $118 & 65535;
 $120 = ((($0)) + 80|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($121)) + 60|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($$4) + 1)|0;
 $125 = (_lily_tm_make_call($117,$119,$123,$124)|0);
 $126 = HEAP32[$3>>2]|0;
 $127 = $126 & 8388608;
 $128 = ($127|0)==(0);
 $129 = ((($1)) + 12|0);
 if (!($128)) {
  HEAP32[$129>>2] = $125;
  STACKTOP = sp;return;
 }
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)==(0|0);
 $132 = ($130|0)==($125|0);
 $or$cond = $131 | $132;
 if ($or$cond) {
  HEAP32[$129>>2] = $125;
  STACKTOP = sp;return;
 }
 _error_forward_decl_type($0,$1,$125);
 HEAP32[$129>>2] = $125;
 STACKTOP = sp;return;
}
function _get_define_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(38);
 if (!($6)) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(38)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6220,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($0)) + 80|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_find_var($13,0,$15)|0);
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = ((($0)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $20;
  _lily_raise_syn($19,7389,$vararg_buffer2);
  // unreachable;
 }
 $21 = HEAP32[$14>>2]|0;
 $22 = ((($3)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23&65535;
 $25 = (_new_scoped_var($0,$21,$24)|0);
 _lily_lexer($3);
 $26 = HEAP32[$4>>2]|0;
 $27 = ($26|0)==(5);
 if (!($27)) {
  $28 = ((($0)) + 92|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_tokname(5)|0);
  $31 = HEAP32[$4>>2]|0;
  $32 = (_tokname($31)|0);
  HEAP32[$vararg_buffer5>>2] = $30;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $32;
  _lily_raise_syn($29,6220,$vararg_buffer5);
  // unreachable;
 }
 _lily_lexer($3);
 $33 = (_get_nameless_arg($0,$1)|0);
 $34 = HEAP32[$1>>2]|0;
 $35 = $34 & 4;
 $36 = ($35|0)==(0);
 if ($36) {
  $41 = ((($25)) + 12|0);
  HEAP32[$41>>2] = $33;
  STACKTOP = sp;return ($33|0);
 } else {
  $37 = ((($33)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($25)) + 12|0);
  HEAP32[$40>>2] = $39;
  _collect_optarg_for($0,$25);
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _get_nameless_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(13);
 $7 = HEAP32[$1>>2]|0;
 if ($6) {
  $8 = $7 | 4;
  HEAP32[$1>>2] = $8;
  _lily_lexer($3);
 } else {
  $9 = $7 & 4;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = ((($0)) + 92|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_raise_syn($12,7243,$vararg_buffer);
   // unreachable;
  }
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (_get_type_raw($0,$13)|0);
 $15 = ((($14)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 & 32;
 $18 = ($17<<16>>16)==(0);
 do {
  if (!($18)) {
   $19 = HEAP32[$1>>2]|0;
   $20 = $19 & 262144;
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = ((($0)) + 92|0);
    $23 = HEAP32[$22>>2]|0;
    _lily_raise_syn($23,7292,$vararg_buffer1);
    // unreachable;
   } else {
    $24 = HEAP32[$1>>2]|0;
    $25 = $24 | 32;
    HEAP32[$1>>2] = $25;
    break;
   }
  }
 } while(0);
 $26 = HEAP32[$4>>2]|0;
 $27 = ($26|0)==(55);
 L12: do {
  if ($27) {
   $28 = ((($0)) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 64|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_make_type_of_class($0,$31,$14)|0);
   _lily_lexer($3);
   $33 = HEAP32[$4>>2]|0;
   switch ($33|0) {
   case 30: case 0: case 37:  {
    $36 = HEAP32[$1>>2]|0;
    $37 = $36 | 1;
    HEAP32[$1>>2] = $37;
    $$0 = $32;
    break L12;
    break;
   }
   default: {
    $34 = ((($0)) + 92|0);
    $35 = HEAP32[$34>>2]|0;
    _lily_raise_syn($35,7346,$vararg_buffer3);
    // unreachable;
   }
   }
  } else {
   $$0 = $14;
  }
 } while(0);
 $38 = HEAP32[$1>>2]|0;
 $39 = $38 & 4;
 $40 = ($39|0)==(0);
 if ($40) {
  $$1 = $$0;
  STACKTOP = sp;return ($$1|0);
 }
 $41 = ((($0)) + 80|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 76|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (_make_type_of_class($0,$44,$$0)|0);
 $$1 = $45;
 STACKTOP = sp;return ($$1|0);
}
function _get_class_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$045 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(38);
 if (!($6)) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(38)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6220,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($3)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(118);
 do {
  if ($15) {
   $16 = (_strcmp($13,5598)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    _lily_lexer($3);
    $18 = HEAP32[$4>>2]|0;
    $19 = ($18|0)==(39);
    if ($19) {
     $25 = (_get_named_property($0,0)|0);
     $26 = ((($25)) + 6|0);
     $27 = HEAP16[$26>>1]|0;
     $28 = $27 | 1;
     HEAP16[$26>>1] = $28;
     $29 = ((($3)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $30&65535;
     $32 = (_new_scoped_var($0,21807,$31)|0);
     $$0 = $25;$$045 = $32;
     break;
    } else {
     $20 = ((($0)) + 92|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_tokname(39)|0);
     $23 = HEAP32[$4>>2]|0;
     $24 = (_tokname($23)|0);
     HEAP32[$vararg_buffer2>>2] = $22;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $24;
     _lily_raise_syn($21,6220,$vararg_buffer2);
     // unreachable;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $33 = ((($3)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($3)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36&65535;
  $38 = (_new_scoped_var($0,$34,$37)|0);
  _lily_lexer($3);
  $$0 = 0;$$045 = $38;
 }
 $39 = HEAP32[$4>>2]|0;
 $40 = ($39|0)==(5);
 if (!($40)) {
  $41 = ((($0)) + 92|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_tokname(5)|0);
  $44 = HEAP32[$4>>2]|0;
  $45 = (_tokname($44)|0);
  HEAP32[$vararg_buffer6>>2] = $43;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $45;
  _lily_raise_syn($42,6220,$vararg_buffer6);
  // unreachable;
 }
 _lily_lexer($3);
 $46 = (_get_nameless_arg($0,$1)|0);
 $47 = HEAP32[$1>>2]|0;
 $48 = $47 & 4;
 $49 = ($48|0)==(0);
 if ($49) {
  $54 = ((($$045)) + 12|0);
  HEAP32[$54>>2] = $46;
 } else {
  $50 = ((($46)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($$045)) + 12|0);
  HEAP32[$53>>2] = $52;
  _collect_optarg_for($0,$$045);
 }
 $55 = ($$0|0)==(0|0);
 if ($55) {
  STACKTOP = sp;return ($46|0);
 }
 $56 = ((($$045)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($$0)) + 12|0);
 HEAP32[$58>>2] = $57;
 STACKTOP = sp;return ($46|0);
}
function _get_variant_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_get_nameless_arg($0,$1)|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return ($2|0);
 } else {
  $6 = ((($0)) + 92|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,6525,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _get_type_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$073 = 0, $$074 = 0, $$1 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, $phitmp = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer11 = 0;
 var $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(38);
 do {
  if ($7) {
   $8 = (_resolve_class_name($0)|0);
   $$074 = $8;
  } else {
   $9 = $1 & 262144;
   $10 = ($9|0)!=(0);
   $$off = (($6) + -57)|0;
   $switch = ($$off>>>0)<(2);
   $or$cond = $10 & $switch;
   if ($or$cond) {
    $11 = ((($4)) + 32|0);
    $12 = $11;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = (($12) + 4)|0;
    $16 = $15;
    $17 = HEAP32[$16>>2]|0;
    $18 = (_get_scoop_class($0,$14)|0);
    $$074 = $18;
    break;
   } else {
    $19 = ((($0)) + 92|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_tokname(38)|0);
    $22 = HEAP32[$5>>2]|0;
    $23 = (_tokname($22)|0);
    HEAP32[$vararg_buffer>>2] = $21;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $23;
    _lily_raise_syn($20,6220,$vararg_buffer);
    // unreachable;
   }
  }
 } while(0);
 $24 = ((($$074)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($25<<16>>16)==(3);
 if ($26) {
  $27 = ((($0)) + 92|0);
  $28 = HEAP32[$27>>2]|0;
  _lily_raise_syn($28,6245,$vararg_buffer2);
  // unreachable;
 }
 $29 = ((($$074)) + 42|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = ($30<<16>>16)==(0);
 if ($31) {
  $32 = ((($$074)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $$0 = $33;
  _lily_lexer($4);
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ((($$074)) + 8|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = ($35<<16>>16)==(7);
 _lily_lexer($4);
 $37 = HEAP32[$5>>2]|0;
 if (!($36)) {
  $38 = ($37|0)==(4);
  if (!($38)) {
   $39 = ((($0)) + 92|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_tokname(4)|0);
   $42 = HEAP32[$5>>2]|0;
   $43 = (_tokname($42)|0);
   HEAP32[$vararg_buffer4>>2] = $41;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $43;
   _lily_raise_syn($40,6220,$vararg_buffer4);
   // unreachable;
  }
  $44 = ((($0)) + 88|0);
  $45 = ((($0)) + 92|0);
  $$073 = 0;
  L20: while(1) {
   _lily_lexer($4);
   $46 = HEAP32[$44>>2]|0;
   $47 = (_get_type_raw($0,$1)|0);
   _lily_tm_add($46,$47);
   $48 = (($$073) + 1)|0;
   $49 = HEAP32[$5>>2]|0;
   switch ($49|0) {
   case 1:  {
    $$073 = $48;
    break;
   }
   case 36:  {
    break L20;
    break;
   }
   default: {
    label = 15;
    break L20;
   }
   }
  }
  if ((label|0) == 15) {
   $50 = HEAP32[$45>>2]|0;
   $51 = (_tokname($49)|0);
   HEAP32[$vararg_buffer8>>2] = $51;
   _lily_raise_syn($50,6289,$vararg_buffer8);
   // unreachable;
  }
  $52 = HEAP32[$44>>2]|0;
  $53 = (_lily_tm_make($52,$$074,$48)|0);
  _ensure_valid_type($0,$53);
  $$0 = $53;
  _lily_lexer($4);
  STACKTOP = sp;return ($$0|0);
 }
 $54 = ($37|0)==(32);
 if (!($54)) {
  $55 = ((($0)) + 92|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_tokname(32)|0);
  $58 = HEAP32[$5>>2]|0;
  $59 = (_tokname($58)|0);
  HEAP32[$vararg_buffer11>>2] = $57;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $59;
  _lily_raise_syn($56,6220,$vararg_buffer11);
  // unreachable;
 }
 _lily_lexer($4);
 $60 = $1 & 262144;
 HEAP32[$2>>2] = $60;
 $61 = ((($0)) + 88|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[628]|0;
 _lily_tm_add($62,$65);
 $66 = HEAP32[$5>>2]|0;
 switch ($66|0) {
 case 0: case 37:  {
  $$1 = 1;$77 = $66;
  break;
 }
 default: {
  $67 = HEAP32[$61>>2]|0;
  $68 = (_get_nameless_arg($0,$2)|0);
  _lily_tm_add($67,$68);
  $69 = HEAP32[$5>>2]|0;
  $70 = ($69|0)==(1);
  if ($70) {
   $74 = 1;
   while(1) {
    _lily_lexer($4);
    $71 = HEAP32[$61>>2]|0;
    $72 = (_get_nameless_arg($0,$2)|0);
    _lily_tm_add($71,$72);
    $73 = (($74) + 1)|0;
    $75 = HEAP32[$5>>2]|0;
    $76 = ($75|0)==(1);
    if ($76) {
     $74 = $73;
    } else {
     break;
    }
   }
   $phitmp = (($74) + 2)|0;
   $$1 = $phitmp;$77 = $75;
  } else {
   $$1 = 2;$77 = $69;
  }
 }
 }
 $78 = ($77|0)==(37);
 if ($78) {
  _lily_lexer($4);
  $79 = HEAP32[$61>>2]|0;
  $80 = (_get_type_raw($0,$1)|0);
  _lily_tm_insert($79,$64,$80);
 }
 $81 = HEAP32[$5>>2]|0;
 $82 = ($81|0)==(0);
 if (!($82)) {
  $83 = ((($0)) + 92|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_tokname(0)|0);
  $86 = HEAP32[$5>>2]|0;
  $87 = (_tokname($86)|0);
  HEAP32[$vararg_buffer15>>2] = $85;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $87;
  _lily_raise_syn($84,6220,$vararg_buffer15);
  // unreachable;
 }
 $88 = HEAP32[$61>>2]|0;
 $89 = HEAP32[$2>>2]|0;
 $90 = $89 & 65535;
 $91 = (_lily_tm_make_call($88,$90,$$074,$$1)|0);
 $$0 = $91;
 _lily_lexer($4);
 STACKTOP = sp;return ($$0|0);
}
function _put_keyargs_in_target($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_sp_get($4,$2)|0);
 $6 = ((($0)) + 28|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($8) - ($2))|0;
 $10 = (($9) + 1)|0;
 $11 = (_lily_malloc($10)|0);
 _memcpy(($11|0),($5|0),($10|0))|0;
 $12 = ((($1)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(1);
 if ($14) {
  $15 = ((($0)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_lily_emit_proto_for_var($16,$1)|0);
  $18 = ((($17)) + 16|0);
  $$sink = $18;
  HEAP32[$$sink>>2] = $11;
  return;
 } else {
  $19 = ((($1)) + 36|0);
  $$sink = $19;
  HEAP32[$$sink>>2] = $11;
  return;
 }
}
function _error_forward_decl_type($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 _lily_raise_syn($4,6129,$vararg_buffer);
 // unreachable;
}
function _resolve_class_name($0) {
 $0 = $0|0;
 var $$036 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(38);
 if (!($7)) {
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_tokname(38)|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  _lily_raise_syn($9,6220,$vararg_buffer);
  // unreachable;
 }
 $13 = (_resolve_module($0)|0);
 $14 = ((($4)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_lily_find_class($2,$13,$15)|0);
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $$3 = $16;
  STACKTOP = sp;return ($$3|0);
 }
 $18 = ($13|0)==(0|0);
 if ($18) {
  $19 = ((($2)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $$036 = $20;
 } else {
  $$036 = $13;
 }
 $21 = ((($$036)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = HEAP32[$14>>2]|0;
  $25 = (_find_run_class_dynaload($0,$$036,$24)|0);
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $$3 = $25;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $27 = ((($2)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = HEAP32[$14>>2]|0;
  $33 = (_find_run_class_dynaload($0,$28,$32)|0);
  $34 = ($33|0)==(0|0);
  if (!($34)) {
   $$3 = $33;
   STACKTOP = sp;return ($$3|0);
  }
 }
 $35 = ((($2)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($$036|0)==($36|0);
 if ($37) {
  $38 = HEAP32[$14>>2]|0;
  $39 = (_strcmp($38,14669)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $41 = HEAP32[628]|0;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0|0);
   if (!($44)) {
    $$3 = $43;
    STACKTOP = sp;return ($$3|0);
   }
  }
 }
 $45 = ((($0)) + 92|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$14>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $47;
 _lily_raise_syn($46,6410,$vararg_buffer2);
 // unreachable;
 return (0)|0;
}
function _get_scoop_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = (65535 - ($1))|0;
 $$09 = HEAP32[$4>>2]|0;
 $6 = ($$09|0)==(0|0);
 if ($6) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$010 = $$09;
 }
 while(1) {
  $7 = ((($$010)) + 8|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8&65535;
  $10 = ($9|0)==($5|0);
  if ($10) {
   $$0$lcssa = $$010;
   label = 4;
   break;
  }
  $$0 = HEAP32[$$010>>2]|0;
  $11 = ($$0|0)==(0|0);
  if ($11) {
   $$0$lcssa = 0;
   label = 4;
   break;
  } else {
   $$010 = $$0;
  }
 }
 if ((label|0) == 4) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _ensure_valid_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 42|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($4|0)==($9|0);
 $11 = ($8<<16>>16)==(-1);
 $or$cond = $11 | $10;
 if (!($or$cond)) {
  $12 = ((($0)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($6)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  _lily_raise_syn($13,6327,$vararg_buffer);
  // unreachable;
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = ((($0)) + 80|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 68|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($16|0)==($20|0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = ((($1)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 & 64;
 $30 = ($29<<16>>16)==(0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = ((($26)) + 8|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = ($32<<16>>16)==(-5);
 if ($33) {
  STACKTOP = sp;return;
 } else {
  $34 = ((($0)) + 92|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $24;
  _lily_raise_syn($35,6376,$vararg_buffer3);
  // unreachable;
 }
}
function _resolve_module($0) {
 $0 = $0|0;
 var $$025$lcssa = 0, $$026 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_find_module($2,0,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$025$lcssa = 0;
  STACKTOP = sp;return ($$025$lcssa|0);
 }
 $9 = ((($4)) + 40|0);
 $10 = ((($0)) + 92|0);
 $11 = ((($0)) + 92|0);
 $$026 = $7;
 while(1) {
  _lily_lexer($4);
  $12 = HEAP32[$9>>2]|0;
  $13 = ($12|0)==(47);
  if (!($13)) {
   label = 4;
   break;
  }
  _lily_lexer($4);
  $18 = HEAP32[$9>>2]|0;
  $19 = ($18|0)==(38);
  if (!($19)) {
   label = 6;
   break;
  }
  $24 = HEAP32[$5>>2]|0;
  $25 = (_lily_find_module($2,$$026,$24)|0);
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$025$lcssa = $$026;
   label = 8;
   break;
  } else {
   $$026 = $25;
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$11>>2]|0;
  $15 = (_tokname(47)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = (_tokname($16)|0);
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  _lily_raise_syn($14,6220,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = (_tokname(38)|0);
  $22 = HEAP32[$9>>2]|0;
  $23 = (_tokname($22)|0);
  HEAP32[$vararg_buffer2>>2] = $21;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $23;
  _lily_raise_syn($20,6220,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$025$lcssa|0);
 }
 return (0)|0;
}
function _find_run_class_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_try_toplevel_dynaload($0,$1,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  return (0|0);
 } else {
  $5 = ((($3)) + 4|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(1);
  $$ = $7 ? 0 : $3;
  return ($$|0);
 }
 return (0)|0;
}
function _try_toplevel_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $$020 = $6;$$021 = 1;
 while(1) {
  $7 = ((($$020)) + 2|0);
  $8 = (_strcmp($7,$2)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  }
  $11 = ((($$020)) + 1|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = (($$021) + 1)|0;
  $15 = (($14) + ($13))|0;
  $16 = (($4) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(90);
  if ($19) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $$020 = $17;$$021 = $15;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 $10 = (_run_dynaload($0,$1,$$021)|0);
 $$0 = $10;
 return ($$0|0);
}
function _run_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = ((($4)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = $1;
 switch ($9<<24>>24) {
 case 82:  {
  $12 = HEAP32[$7>>2]|0;
  $13 = ((($12)) + 2|0);
  $14 = (_strlen($13)|0);
  $15 = (($13) + ($14)|0);
  $16 = ((($15)) + 1|0);
  $17 = (_type_by_name($0,$16)|0);
  $18 = (_new_global_var($0,$17,$13)|0);
  _update_cid_table($0,$1);
  $19 = ((($1)) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 36|0);
  HEAP32[$23>>2] = $20;
  $24 = ((($1)) + 52|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 84|0);
  $27 = HEAP32[$26>>2]|0;
  (FUNCTION_TABLE_iii[$25 & 15]($27,$2)|0);
  $$0 = $18;
  break;
 }
 case 70:  {
  $28 = (_new_foreign_define_var($0,$1,0,$2)|0);
  $$0 = $28;
  break;
 }
 case 67:  {
  $29 = (_dynaload_class($0,$1,$2)|0);
  $$0 = $29;
  break;
 }
 case 86:  {
  $30 = (_dynaload_variant($0,$1,$2)|0);
  $$0 = $30;
  break;
 }
 case 69:  {
  $31 = (_dynaload_enum($0,$1,$2)|0);
  $$0 = $31;
  break;
 }
 case 78:  {
  $32 = (_dynaload_native($0,$1,$2)|0);
  $$0 = $32;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 HEAP32[$10>>2] = $11;
 return ($$0|0);
}
function _type_by_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer_load($3,2,$1);
 $4 = HEAP32[$2>>2]|0;
 _lily_lexer($4);
 $5 = (_get_type_raw($0,0)|0);
 $6 = HEAP32[$2>>2]|0;
 _lily_pop_lex_entry($6);
 return ($5|0);
}
function _new_global_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_make_new_var($1,$2,0)|0);
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$3>>2] = $9;
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 32|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($3)) + 36|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($3)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 | 128;
 HEAP16[$15>>1] = $17;
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($18)) + 30|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ((($3)) + 8|0);
 HEAP16[$21>>1] = $20;
 $22 = HEAP32[$4>>2]|0;
 $23 = ((($22)) + 30|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (($24) + 1)<<16>>16;
 HEAP16[$23>>1] = $25;
 return ($3|0);
}
function _update_cid_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03539 = 0, $$03638 = 0, $$037 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ((($1)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ($5<<24>>24)>(0);
 if (!($12)) {
  return;
 }
 $13 = ((($4)) + 1|0);
 $$03539 = $13;$$03638 = 0;
 while(1) {
  $14 = (($8) + ($$03638<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)==(0);
  do {
   if ($16) {
    $17 = (_lily_find_class($10,$1,$$03539)|0);
    $18 = ($17|0)==(0|0);
    if ($18) {
     $19 = (_lily_find_class($10,$11,$$03539)|0);
     $20 = ($19|0)==(0|0);
     if ($20) {
      break;
     } else {
      $$037 = $19;
     }
    } else {
     $$037 = $17;
    }
    $21 = ((($$037)) + 8|0);
    $22 = HEAP16[$21>>1]|0;
    HEAP16[$14>>1] = $22;
   }
  } while(0);
  $23 = (_strlen($$03539)|0);
  $24 = (($23) + 1)|0;
  $25 = (($$03539) + ($24)|0);
  $26 = (($$03638) + 1)|0;
  $exitcond = ($26|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$03539 = $25;$$03638 = $26;
  }
 }
 return;
}
function _dynaload_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 2|0);
 $10 = (_lily_new_class($8,$9)|0);
 $11 = ((($10)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 | 4096;
 HEAP16[$11>>1] = $13;
 $14 = $2&65535;
 $15 = ((($10)) + 46|0);
 HEAP16[$15>>1] = $14;
 return ($10|0);
}
function _dynaload_variant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $$0$in = $2;
 while(1) {
  $$0 = (($$0$in) + -1)|0;
  $5 = (($4) + ($$0<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(69);
  if ($8) {
   break;
  } else {
   $$0$in = $$0;
  }
 }
 (_dynaload_enum($0,$1,$$0)|0);
 $9 = (($4) + ($2<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 80|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 2|0);
 $14 = (_lily_find_class($12,$1,$13)|0);
 return ($14|0);
}
function _dynaload_enum($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$091$lcssa = 0, $$09198 = 0, $$093 = 0, $$094 = 0, $$099 = 0, $$197 = 0, $$lcssa = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==($1|0);
 if ($11) {
  $12 = ((($0)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 28|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = HEAP8[$9>>0]|0;
  $17 = ($16<<24>>24)==(79);
  $$sink = $17 ? 13 : 16;
  HEAP16[$14>>1] = $$sink;
  $$094 = $15;
 } else {
  $$094 = 0;
 }
 $18 = ((($0)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_lily_gp_save_and_hide($19)|0);
 $21 = ((($0)) + 80|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_lily_new_enum_class($22,$9)|0);
 $24 = (_strlen($9)|0);
 $25 = (($9) + ($24)|0);
 $26 = ((($25)) + 1|0);
 _lily_lexer_load($4,1,$26);
 _lily_lexer($4);
 _collect_generics($0);
 _lily_pop_lex_entry($4);
 $27 = HEAP32[$18>>2]|0;
 $28 = (_lily_gp_num_in_scope($27)|0);
 $29 = $28&65535;
 $30 = ((($23)) + 42|0);
 HEAP16[$30>>1] = $29;
 $31 = ((($0)) + 60|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_build_self_type($0,$23)|0);
 HEAP32[$31>>2] = $33;
 $34 = HEAP32[$5>>2]|0;
 $35 = (($2) + 1)|0;
 $36 = ((($8)) + 1|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 << 24 >> 24;
 $39 = (($38) + ($35))|0;
 $40 = (($34) + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)==(86);
 if (!($43)) {
  $44 = ((($23)) + 6|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 | 1024;
  HEAP16[$44>>1] = $46;
 }
 $47 = $35&65535;
 $48 = ((($23)) + 46|0);
 HEAP16[$48>>1] = $47;
 $$093 = $2;
 while(1) {
  $49 = (($$093) + 1)|0;
  $50 = (($6) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP8[$51>>0]|0;
  $53 = ($52<<24>>24)==(86);
  if ($53) {
   break;
  } else {
   $$093 = $49;
  }
 }
 $54 = HEAP8[$51>>0]|0;
 $55 = ($54<<24>>24)==(86);
 $56 = HEAP32[$21>>2]|0;
 if ($55) {
  $57 = ((($4)) + 40|0);
  $$09198 = 0;$$099 = $51;$$197 = $49;$59 = $56;
  while(1) {
   $58 = ((($$099)) + 2|0);
   $60 = (_lily_new_variant_class($59,$23,$58)|0);
   $61 = (_strlen($58)|0);
   $62 = (($58) + ($61)|0);
   $63 = ((($62)) + 1|0);
   _lily_lexer_load($4,1,$63);
   _lily_lexer($4);
   $64 = HEAP32[$57>>2]|0;
   $65 = ($64|0)==(32);
   if ($65) {
    _parse_variant_header($0,$60);
   }
   $66 = (($$197) + 1)|0;
   $67 = (($$09198) + 1)|0;
   $68 = (($6) + ($66<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   _lily_pop_lex_entry($4);
   $70 = HEAP8[$69>>0]|0;
   $71 = ($70<<24>>24)==(86);
   $72 = HEAP32[$21>>2]|0;
   if ($71) {
    $$09198 = $67;$$099 = $69;$$197 = $66;$59 = $72;
   } else {
    break;
   }
  }
  $phitmp = $67&65535;
  $$091$lcssa = $phitmp;$$lcssa = $72;
 } else {
  $$091$lcssa = 0;$$lcssa = $56;
 }
 $73 = ((($23)) + 44|0);
 HEAP16[$73>>1] = $$091$lcssa;
 _lily_fix_enum_variant_ids($$lcssa,$23);
 $74 = HEAP32[$18>>2]|0;
 _lily_gp_restore_and_unhide($74,$20);
 $75 = ($$094<<16>>16)==(0);
 if ($75) {
  HEAP32[$31>>2] = $32;
  return ($23|0);
 }
 $76 = HEAP32[$21>>2]|0;
 $77 = ((($76)) + 28|0);
 HEAP16[$77>>1] = $$094;
 HEAP32[$31>>2] = $32;
 return ($23|0);
}
function _dynaload_native($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$095 = 0, $$098 = 0, $$099 = 0, $$196 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 2|0);
 $8 = (_strlen($7)|0);
 $9 = (($7) + ($8)|0);
 $10 = ((($9)) + 1|0);
 $11 = ((($0)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_lexer_load($12,1,$10);
 _lily_lexer($12);
 $13 = ((($0)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_lily_new_class($14,$7)|0);
 $16 = ((($0)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_lily_gp_save_and_hide($17)|0);
 _collect_generics($0);
 $19 = HEAP32[$16>>2]|0;
 $20 = (_lily_gp_num_in_scope($19)|0);
 $21 = $20&65535;
 $22 = ((($15)) + 42|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($12)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(22);
 if ($25) {
  _lily_lexer($12);
  $26 = HEAP32[$13>>2]|0;
  $27 = ((($12)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_lily_find_class($26,$1,$28)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = HEAP32[$27>>2]|0;
   $32 = (_try_toplevel_dynaload($0,$1,$31)|0);
   $$098 = $32;
  } else {
   $$098 = $29;
  }
  $33 = ((($15)) + 32|0);
  HEAP32[$33>>2] = $$098;
  $34 = ((($$098)) + 44|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = ((($15)) + 44|0);
  HEAP16[$36>>1] = $35;
 }
 $37 = HEAP32[$11>>2]|0;
 _lily_pop_lex_entry($37);
 $38 = (($2) + 1)|0;
 $39 = $38&65535;
 $40 = ((($15)) + 46|0);
 HEAP16[$40>>1] = $39;
 $41 = HEAP32[$0>>2]|0;
 $42 = ($41|0)==($1|0);
 do {
  if ($42) {
   $43 = HEAP32[$13>>2]|0;
   $44 = ((($43)) + 28|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = (($45) + -1)<<16>>16;
   HEAP16[$44>>1] = $46;
   $47 = ((($15)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (_strcmp($48,6437)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = ((($15)) + 8|0);
    HEAP16[$51>>1] = 25;
    $$095 = $2;
    break;
   }
   $52 = (_strcmp($48,6457)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = ((($15)) + 8|0);
    HEAP16[$54>>1] = 19;
    $$095 = $2;
    break;
   }
   $55 = (_strcmp($48,6467)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = ((($15)) + 8|0);
    HEAP16[$57>>1] = 24;
    $$095 = $2;
    break;
   }
   $58 = (_strcmp($48,6478)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = ((($15)) + 8|0);
    HEAP16[$60>>1] = 20;
    $$095 = $2;
    break;
   }
   $61 = (_strcmp($48,6486)|0);
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = ((($15)) + 8|0);
    HEAP16[$63>>1] = 21;
    $$095 = $2;
    break;
   }
   $64 = (_strcmp($48,6495)|0);
   $65 = ($64|0)==(0);
   if ($65) {
    $66 = ((($15)) + 8|0);
    HEAP16[$66>>1] = 22;
    $$095 = $2;
    break;
   } else {
    $67 = (_strcmp($48,6508)|0);
    $68 = ($67|0)==(0);
    $69 = ((($15)) + 8|0);
    $$sink = $68 ? 23 : 12345;
    HEAP16[$69>>1] = $$sink;
    $$095 = $2;
    break;
   }
  } else {
   $$095 = $2;
  }
 } while(0);
 while(1) {
  $70 = (($$095) + 1)|0;
  $71 = (($4) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = HEAP8[$72>>0]|0;
  $74 = ($73<<24>>24)==(109);
  if ($74) {
   $$095 = $70;
  } else {
   $$0 = $72;$$196 = $70;
   break;
  }
 }
 L29: while(1) {
  $75 = HEAP8[$$0>>0]|0;
  switch ($75<<24>>24) {
  case 49:  {
   $$099 = 4;
   break;
  }
  case 50:  {
   $$099 = 8;
   break;
  }
  case 51:  {
   $$099 = 0;
   break;
  }
  default: {
   break L29;
  }
  }
  $76 = ((($$0)) + 2|0);
  $77 = (_strlen($76)|0);
  $78 = (($76) + ($77)|0);
  $79 = ((($78)) + 1|0);
  _lily_lexer_load($12,1,$79);
  _lily_lexer($12);
  $80 = HEAP32[$13>>2]|0;
  $81 = (_get_type_raw($0,0)|0);
  (_lily_add_class_property($80,$15,$81,$76,$$099)|0);
  _lily_pop_lex_entry($12);
  $82 = (($$196) + 1)|0;
  $83 = (($4) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $$0 = $84;$$196 = $82;
 }
 $85 = HEAP32[$16>>2]|0;
 _lily_gp_restore_and_unhide($85,$18);
 (_try_method_dynaload($0,$15,6519)|0);
 return ($15|0);
}
function _build_self_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_gp_num_in_scope($4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $25 = ((($1)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $$017 = $26;
  STACKTOP = sp;return ($$017|0);
 }
 HEAP16[$2>>1] = 65;
 $7 = ((($0)) + 80|0);
 $8 = ((($0)) + 88|0);
 $$018 = $5;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = (_lily_find_class($9,0,$2)|0);
  $11 = HEAP32[$8>>2]|0;
  $12 = ((($10)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_tm_add($11,$13);
  $14 = HEAP8[$2>>0]|0;
  $15 = (($14) + 1)<<24>>24;
  HEAP8[$2>>0] = $15;
  $16 = (($$018) + -1)|0;
  $17 = ($16|0)==(0);
  if ($17) {
   break;
  } else {
   $$018 = $16;
  }
 }
 $18 = ((($0)) + 88|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP8[$2>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = (($21) + -65)|0;
 $23 = (_lily_tm_make($19,$1,$22)|0);
 $24 = ((($1)) + 12|0);
 HEAP32[$24>>2] = $23;
 $$017 = $23;
 STACKTOP = sp;return ($$017|0);
}
function _parse_variant_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_tm_add($3,$7);
 _collect_call_args($0,$1,8388608);
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & -2049;
 HEAP16[$8>>1] = $10;
 return;
}
function _get_named_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _ensure_unique_class_member($0,$5);
 $10 = ((($0)) + 80|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_lily_add_class_property($11,$9,0,$5,$1)|0);
 $13 = HEAP32[$2>>2]|0;
 _lily_lexer($13);
 return ($12|0);
}
function _new_scoped_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_make_new_var(0,$1,$2)|0);
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$3>>2] = $9;
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 32|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($0)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 62|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ((($3)) + 36|0);
 HEAP32[$19>>2] = $18;
 $20 = ($17<<16>>16)==(1);
 if ($20) {
  $21 = ((($0)) + 84|0);
  $22 = HEAP32[$21>>2]|0;
  _lily_push_unit($22);
  $23 = HEAP32[$4>>2]|0;
  $24 = ((($23)) + 30|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = ((($3)) + 8|0);
  HEAP16[$26>>1] = $25;
  $27 = HEAP32[$4>>2]|0;
  $28 = ((($27)) + 30|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = (($29) + 1)<<16>>16;
  HEAP16[$28>>1] = $30;
  $31 = ((($3)) + 6|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 | 128;
  HEAP16[$31>>1] = $33;
  $42 = HEAP32[$14>>2]|0;
  $43 = ((($42)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 10|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = (($46) + 1)<<16>>16;
  HEAP16[$45>>1] = $47;
  return ($3|0);
 } else {
  $34 = HEAP32[$14>>2]|0;
  $35 = ((($34)) + 52|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38&65535;
  $40 = ((($3)) + 8|0);
  HEAP16[$40>>1] = $39;
  $41 = (($38) + 1)|0;
  HEAP32[$37>>2] = $41;
  $42 = HEAP32[$14>>2]|0;
  $43 = ((($42)) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 10|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = (($46) + 1)<<16>>16;
  HEAP16[$45>>1] = $47;
  return ($3|0);
 }
 return (0)|0;
}
function _collect_optarg_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_es_checkpoint_save($3);
 $4 = HEAP32[$2>>2]|0;
 _lily_es_push_local_var($4,$1);
 $5 = HEAP32[$2>>2]|0;
 _lily_es_push_binary_op($5,23);
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_lexer($7);
 _expression_raw($0);
 return;
}
function _expression_raw($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = 1;
 $4 = ((($3)) + 40|0);
 $5 = ((($0)) + 36|0);
 $6 = ((($0)) + 92|0);
 $7 = ((($0)) + 36|0);
 $8 = ((($0)) + 36|0);
 $9 = ((($0)) + 36|0);
 $10 = ((($0)) + 36|0);
 $11 = ((($0)) + 36|0);
 $12 = ((($0)) + 36|0);
 $13 = ((($0)) + 36|0);
 $14 = ((($0)) + 36|0);
 $15 = ((($0)) + 36|0);
 $16 = ((($0)) + 36|0);
 $17 = ((($0)) + 44|0);
 $18 = ((($3)) + 12|0);
 $19 = ((($3)) + 20|0);
 $20 = ((($0)) + 36|0);
 L1: while(1) {
  $21 = HEAP32[$4>>2]|0;
  $22 = (((1156 + (($21*12)|0)|0)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21|0)==(38);
  L3: do {
   if ($24) {
    $25 = HEAP32[$1>>2]|0;
    $26 = ($25|0)==(2);
    if ($26) {
     label = 4;
     break L1;
    }
    _expression_word($0,$1);
    label = 49;
   } else {
    $31 = ($23|0)==(-1);
    if (!($31)) {
     $32 = HEAP32[$1>>2]|0;
     $33 = ($32|0)==(2);
     if ($33) {
      $34 = HEAP32[$20>>2]|0;
      _lily_es_push_binary_op($34,$23);
      HEAP32[$1>>2] = 1;
      break;
     }
     $35 = ($21|0)==(20);
     if (!($35)) {
      label = 13;
      break L1;
     }
     _expression_unary($0,$1);
     label = 49;
     break;
    }
    do {
     switch ($21|0) {
     case 32:  {
      $36 = HEAP32[$1>>2]|0;
      $37 = $36 | 2;
      $38 = ($37|0)==(3);
      if ($38) {
       $39 = HEAP32[$8>>2]|0;
       _lily_es_enter_tree($39,4);
       HEAP32[$1>>2] = 1;
       break L3;
      }
      $40 = ($36|0)==(2);
      if (!($40)) {
       label = 49;
       break L3;
      }
      $41 = HEAP32[$9>>2]|0;
      _lily_es_enter_tree($41,0);
      HEAP32[$1>>2] = 3;
      break L3;
      break;
     }
     case 4:  {
      $42 = HEAP32[$1>>2]|0;
      $43 = $42 | 2;
      $44 = ($43|0)==(3);
      if ($44) {
       $45 = HEAP32[$10>>2]|0;
       _lily_es_enter_tree($45,2);
       HEAP32[$1>>2] = 3;
       break L3;
      }
      $46 = ($42|0)==(2);
      if (!($46)) {
       label = 49;
       break L3;
      }
      $47 = HEAP32[$11>>2]|0;
      _lily_es_enter_tree($47,1);
      HEAP32[$1>>2] = 1;
      break L3;
      break;
     }
     case 39:  {
      $48 = HEAP32[$1>>2]|0;
      $49 = ($48|0)==(2);
      if ($49) {
       label = 24;
       break L1;
      }
      _expression_property($0,$1);
      label = 49;
      break L3;
      break;
     }
     case 34:  {
      $50 = HEAP32[$1>>2]|0;
      $51 = ($50|0)==(2);
      if ($51) {
       label = 27;
       break L1;
      }
      $52 = HEAP32[$12>>2]|0;
      _lily_es_enter_tree($52,12);
      HEAP32[$1>>2] = 3;
      break L3;
      break;
     }
     case 35: case 36: case 0:  {
      $53 = HEAP32[$1>>2]|0;
      switch ($53|0) {
      case 1:  {
       label = 30;
       break L1;
       break;
      }
      case 2:  {
       $54 = HEAP32[$14>>2]|0;
       $55 = ((($54)) + 20|0);
       $56 = HEAP16[$55>>1]|0;
       $57 = ($56<<16>>16)==(0);
       if ($57) {
        label = 32;
        break L1;
       }
       break;
      }
      default: {
      }
      }
      _check_valid_close_tok($0);
      $58 = HEAP32[$13>>2]|0;
      _lily_es_leave_tree($58);
      HEAP32[$1>>2] = 2;
      break L3;
      break;
     }
     case 42: case 41: case 40: case 44: case 43:  {
      _expression_literal($0,$1);
      label = 49;
      break L3;
      break;
     }
     case 47:  {
      _expression_dot($0,$1);
      label = 49;
      break L3;
      break;
     }
     case 6: case 9: case 20:  {
      _expression_unary($0,$1);
      label = 49;
      break L3;
      break;
     }
     case 33:  {
      $59 = HEAP32[$1>>2]|0;
      $60 = ($59|0)==(2);
      if ($60) {
       $61 = HEAP32[$15>>2]|0;
       _lily_es_enter_tree($61,0);
      }
      $62 = HEAP32[$16>>2]|0;
      $63 = ((($62)) + 24|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = HEAP32[$17>>2]|0;
      $67 = HEAP32[$18>>2]|0;
      _lily_sp_insert($66,$67,$63);
      $68 = HEAP32[$16>>2]|0;
      $69 = HEAP32[$19>>2]|0;
      _lily_es_push_text($68,15,$69,$65);
      $70 = HEAP32[$1>>2]|0;
      $71 = ($70|0)==(2);
      if ($71) {
       $72 = HEAP32[$16>>2]|0;
       _lily_es_leave_tree($72);
      }
      HEAP32[$1>>2] = 2;
      break L3;
      break;
     }
     default: {
      $73 = (((1156 + (($21*12)|0)|0)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==(0);
      if (!($75)) {
       $76 = HEAP32[$7>>2]|0;
       $77 = ((($76)) + 20|0);
       $78 = HEAP16[$77>>1]|0;
       $79 = ($78<<16>>16)==(0);
       $80 = HEAP32[$1>>2]|0;
       $81 = ($80|0)==(2);
       $or$cond5 = $79 & $81;
       if ($or$cond5) {
        label = 44;
        break L1;
       }
      }
      $82 = HEAP32[$4>>2]|0;
      switch ($82|0) {
      case 37: case 1:  {
       _expression_comma_arrow($0,$1);
       label = 49;
       break L3;
       break;
      }
      case 46:  {
       _expression_named_arg($0,$1);
       label = 49;
       break L3;
       break;
      }
      default: {
       label = 48;
       break L1;
      }
      }
     }
     }
    } while(0);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   $$pr = HEAP32[$1>>2]|0;
   switch ($$pr|0) {
   case 5:  {
    break L1;
    break;
   }
   case 4:  {
    label = 54;
    break L1;
    break;
   }
   default: {
   }
   }
   $86 = $$pr & 8;
   $87 = ($86|0)==(0);
   if (!($87)) {
    $88 = $$pr & -9;
    HEAP32[$1>>2] = $88;
    continue;
   }
  }
  _lily_lexer($3);
 }
 do {
  if ((label|0) == 4) {
   $27 = HEAP32[$5>>2]|0;
   $28 = ((($27)) + 20|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = ($29<<16>>16)==(0);
   if (!($30)) {
    HEAP32[$1>>2] = 5;
    break;
   }
   HEAP32[$1>>2] = 4;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 13) {
   HEAP32[$1>>2] = 5;
  }
  else if ((label|0) == 24) {
   HEAP32[$1>>2] = 4;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 27) {
   HEAP32[$1>>2] = 4;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 30) {
   HEAP32[$1>>2] = 5;
  }
  else if ((label|0) == 32) {
   HEAP32[$1>>2] = 4;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 44) {
   HEAP32[$1>>2] = 4;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 48) {
   HEAP32[$1>>2] = 5;
  }
  else if ((label|0) == 54) {
   STACKTOP = sp;return;
  }
 } while(0);
 $83 = HEAP32[$6>>2]|0;
 $84 = HEAP32[$4>>2]|0;
 $85 = (_tokname($84)|0);
 HEAP32[$vararg_buffer>>2] = $85;
 _lily_raise_syn($83,6567,$vararg_buffer);
 // unreachable;
}
function _expression_word($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_resolve_module($0)|0);
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_find_var($3,$6,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _dispatch_word_as_var($0,$9,$1);
  STACKTOP = sp;return;
 }
 $11 = ($6|0)==(0|0);
 L5: do {
  if ($11) {
   $12 = HEAP32[$7>>2]|0;
   $13 = (_constant_by_name($12)|0);
   switch ($13|0) {
   case -1:  {
    break L5;
    break;
   }
   case 1:  {
    $14 = ((($0)) + 60|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $17 = ((($0)) + 92|0);
     $18 = HEAP32[$17>>2]|0;
     _lily_raise_syn($18,6886,$vararg_buffer);
     // unreachable;
    }
    break;
   }
   default: {
   }
   }
   _push_constant($0,$13);
   HEAP32[$1>>2] = 2;
   STACKTOP = sp;return;
  }
 } while(0);
 $19 = HEAP32[$2>>2]|0;
 $20 = HEAP32[$7>>2]|0;
 $21 = (_lily_find_class($19,$6,$20)|0);
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _dispatch_word_as_class($0,$21,$1);
  STACKTOP = sp;return;
 }
 if ($11) {
  $23 = ((($0)) + 60|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($24)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$7>>2]|0;
   $29 = (_lily_find_method($27,$28)|0);
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    _lily_es_push_method($32,$29);
    HEAP32[$1>>2] = 2;
    STACKTOP = sp;return;
   }
  }
  $33 = ((($3)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $$0 = $34;
 } else {
  $$0 = $6;
 }
 $35 = ((($$0)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = HEAP32[$7>>2]|0;
  $39 = (_try_toplevel_dynaload($0,$$0,$38)|0);
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   _dispatch_dynaload($0,$39,$1);
   STACKTOP = sp;return;
  }
 }
 if (!($11)) {
  $54 = ((($0)) + 92|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $56;
  _lily_raise_syn($55,6922,$vararg_buffer4);
  // unreachable;
 }
 $41 = ((($0)) + 60|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $54 = ((($0)) + 92|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $56;
  _lily_raise_syn($55,6922,$vararg_buffer4);
  // unreachable;
 }
 $44 = ((($42)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$7>>2]|0;
 $47 = (_lily_find_class_of_member($45,$46)|0);
 $48 = ($47|0)==(0|0);
 if ($48) {
  $54 = ((($0)) + 92|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $56;
  _lily_raise_syn($55,6922,$vararg_buffer4);
  // unreachable;
 } else {
  $49 = ((($0)) + 92|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$7>>2]|0;
  $52 = ((($47)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $51;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $53;
  _lily_raise_syn($50,16707,$vararg_buffer1);
  // unreachable;
 }
}
function _expression_unary($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 L1: do {
  if ($3) {
   $storemerge = 5;
  } else {
   $4 = ((($0)) + 72|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   switch ($7|0) {
   case 20:  {
    $8 = ((($0)) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    _lily_es_push_unary_op($9,18);
    $storemerge = 1;
    break L1;
    break;
   }
   case 9:  {
    $10 = ((($0)) + 36|0);
    $11 = HEAP32[$10>>2]|0;
    _lily_es_push_unary_op($11,17);
    $storemerge = 1;
    break L1;
    break;
   }
   case 6:  {
    $12 = ((($0)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    _lily_es_push_unary_op($13,19);
    $storemerge = 1;
    break L1;
    break;
   }
   default: {
    $storemerge = 1;
    break L1;
   }
   }
  }
 } while(0);
 HEAP32[$1>>2] = $storemerge;
 return;
}
function _expression_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($0)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise_syn($6,6768,$vararg_buffer);
  // unreachable;
 }
 $7 = ((($0)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_lily_find_property($13,$10)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = ((($0)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 13|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(12);
  $$ = $22 ? 6826 : 21807;
  $23 = ((($0)) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($13)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $10;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $26;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $$;
  _lily_raise_syn($24,6852,$vararg_buffer1);
  // unreachable;
 } else {
  $27 = ((($0)) + 36|0);
  $28 = HEAP32[$27>>2]|0;
  _lily_es_push_property($28,$14);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
 }
}
function _check_valid_close_tok($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_es_get_saved_tree($6)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 switch ($9<<24>>24) {
 case 0: case 4: case 11: case 26:  {
  $$0 = 0;
  break;
 }
 case 12:  {
  $$0 = 35;
  break;
 }
 default: {
  $$0 = 36;
 }
 }
 $10 = ($4|0)==($$0|0);
 if ($10) {
  STACKTOP = sp;return;
 } else {
  $11 = ((($0)) + 92|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname($$0)|0);
  $14 = (_tokname($4)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  _lily_raise_syn($12,6729,$vararg_buffer);
  // unreachable;
 }
}
function _expression_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(2);
 L1: do {
  if ($7) {
   $$off = (($5) + -43)|0;
   $8 = ($$off>>>0)<(2);
   if ($8) {
    $9 = (_maybe_digit_fixup($0)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     break;
    }
   }
   $11 = ((($0)) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 20|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = ($14<<16>>16)==(0);
   $$sink = $15 ? 4 : 5;
   $storemerge = $$sink;
   HEAP32[$1>>2] = $storemerge;
   return;
  } else {
   switch ($5|0) {
   case 43:  {
    break L1;
    break;
   }
   case 42:  {
    $36 = ((($0)) + 36|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($3)) + 32|0);
    $39 = $38;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($39) + 4)|0;
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = $41&255;
    _lily_es_push_byte($37,$45);
    $storemerge = 2;
    HEAP32[$1>>2] = $storemerge;
    return;
    break;
   }
   default: {
    $46 = ((($3)) + 44|0);
    $47 = HEAP32[$46>>2]|0;
    _push_literal($0,$47);
    $storemerge = 2;
    HEAP32[$1>>2] = $storemerge;
    return;
   }
   }
  }
 } while(0);
 $16 = ((($3)) + 32|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_i64Add(($19|0),($22|0),32768,0)|0);
 $24 = tempRet0;
 $25 = ($24>>>0)<(0);
 $26 = ($23>>>0)<(65536);
 $27 = ($24|0)==(0);
 $28 = $27 & $26;
 $29 = $25 | $28;
 if ($29) {
  $30 = ((($0)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $19&65535;
  _lily_es_push_integer($31,$32);
  $storemerge = 2;
  HEAP32[$1>>2] = $storemerge;
  return;
 } else {
  $33 = ((($0)) + 80|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_lily_get_integer_literal($34,$19,$22)|0);
  _push_literal($0,$35);
  $storemerge = 2;
  HEAP32[$1>>2] = $storemerge;
  return;
 }
}
function _expression_dot($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer($3);
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 38:  {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  _lily_sp_insert($12,$14,$8);
  _lily_es_push_text($7,8,0,$10);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 case 54:  {
  _lily_lexer($3);
  $15 = (_get_type_raw($0,0)|0);
  $16 = ((($0)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  _lily_es_enter_typecast($17,$15);
  $18 = HEAP32[$16>>2]|0;
  _lily_es_leave_tree($18);
  HEAP32[$1>>2] = 2;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $19 = ((($0)) + 92|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_tokname(38)|0);
  $22 = (_tokname(54)|0);
  $23 = HEAP32[$4>>2]|0;
  $24 = (_tokname($23)|0);
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $22;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $24;
  _lily_raise_syn($20,6689,$vararg_buffer);
  // unreachable;
 }
 }
}
function _expression_comma_arrow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,6590,$vararg_buffer);
  // unreachable;
 }
 $11 = HEAP32[$4>>2]|0;
 $12 = (_lily_es_get_saved_tree($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $storemerge = 5;
  HEAP32[$1>>2] = $storemerge;
  STACKTOP = sp;return;
 }
 $14 = ((($3)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 L7: do {
  switch ($15|0) {
  case 1:  {
   $16 = ((($12)) + 4|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(3);
   do {
    if ($18) {
     $19 = ((($12)) + 22|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = $20 & 1;
     $22 = ($21<<16>>16)==(0);
     if ($22) {
      $23 = ((($0)) + 92|0);
      $24 = HEAP32[$23>>2]|0;
      _lily_raise_syn($24,6617,$vararg_buffer1);
      // unreachable;
     } else {
      $$pr = HEAP8[$16>>0]|0;
      $25 = $$pr;
      break;
     }
    } else {
     $25 = $17;
    }
   } while(0);
   $26 = ($25<<24>>24)==(1);
   if ($26) {
    $27 = ((($0)) + 92|0);
    $28 = HEAP32[$27>>2]|0;
    _lily_raise_syn($28,6658,$vararg_buffer3);
    // unreachable;
   }
   break;
  }
  case 37:  {
   $29 = ((($12)) + 4|0);
   $30 = HEAP8[$29>>0]|0;
   switch ($30<<24>>24) {
   case 2:  {
    $31 = ((($12)) + 22|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = ($32<<16>>16)==(0);
    if ($33) {
     HEAP8[$29>>0] = 3;
     break L7;
    } else {
     $34 = ((($0)) + 92|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (_tokname(37)|0);
     HEAP32[$vararg_buffer5>>2] = $36;
     _lily_raise_syn($35,6567,$vararg_buffer5);
     // unreachable;
    }
    break;
   }
   case 3:  {
    $37 = ((($12)) + 22|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38 & 1;
    $40 = ($39<<16>>16)==(0);
    if ($40) {
     break L7;
    }
    $41 = ((($0)) + 92|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (_tokname(37)|0);
    HEAP32[$vararg_buffer7>>2] = $43;
    _lily_raise_syn($42,6567,$vararg_buffer7);
    // unreachable;
    break;
   }
   default: {
    $41 = ((($0)) + 92|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (_tokname(37)|0);
    HEAP32[$vararg_buffer7>>2] = $43;
    _lily_raise_syn($42,6567,$vararg_buffer7);
    // unreachable;
   }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $44 = HEAP32[$4>>2]|0;
 _lily_es_collect_arg($44);
 $storemerge = 1;
 HEAP32[$1>>2] = $storemerge;
 STACKTOP = sp;return;
}
function _expression_named_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $6 = (_lily_es_get_saved_tree($3)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$sink$sink = 5;
   } else {
    $8 = ((($6)) + 4|0);
    $9 = HEAP8[$8>>0]|0;
    switch ($9<<24>>24) {
    case 26: case 0:  {
     break;
    }
    default: {
     $$sink$sink = 5;
     break L1;
    }
    }
    HEAP8[$8>>0] = 26;
    $10 = ((($3)) + 24|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11&65535;
    $13 = ((($0)) + 44|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($0)) + 72|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    _lily_sp_insert($14,$18,$10);
    _lily_es_push_text($3,8,0,$12);
    _lily_es_push_binary_op($3,34);
    $$sink$sink = 1;
   }
  } else {
   $$sink$sink = 5;
  }
 } while(0);
 HEAP32[$1>>2] = $$sink$sink;
 return;
}
function _maybe_digit_fixup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_lexer_digit_rescan($2)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ($9|0)>(-1);
 $13 = ($6>>>0)>(4294967295);
 $14 = ($9|0)==(-1);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $17 = ((($0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 if ($16) {
  _lily_es_push_binary_op($18,0);
  $$0 = 1;
  return ($$0|0);
 } else {
  _lily_es_push_binary_op($18,2);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _push_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 switch ($2<<16>>16) {
 case 1:  {
  $3 = ((($0)) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 36|0);
  $$0$in = $5;
  break;
 }
 case 2:  {
  $6 = ((($0)) + 80|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 40|0);
  $$0$in = $8;
  break;
 }
 case 3:  {
  $9 = ((($0)) + 80|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 44|0);
  $$0$in = $11;
  break;
 }
 case 5:  {
  $12 = ((($0)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 52|0);
  $$0$in = $14;
  break;
 }
 case 26:  {
  $15 = HEAP32[628]|0;
  $16 = ((($15)) + 12|0);
  $$0$in = $16;
  break;
 }
 default: {
  $17 = HEAP32[629]|0;
  $18 = ((($17)) + 12|0);
  $$0$in = $18;
 }
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $19 = ((($0)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($$0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($1)) + 6|0);
 $24 = HEAP16[$23>>1]|0;
 _lily_es_push_literal($20,$22,$24);
 return;
}
function _dispatch_word_as_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _lily_raise_syn($9,7103,$vararg_buffer);
  // unreachable;
 }
 $12 = $5 & 32;
 $13 = ($12|0)==(0);
 $14 = ((($0)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 if (!($13)) {
  _lily_es_push_defined_func($15,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 }
 $16 = $5 & 128;
 $17 = ($16|0)==(0);
 if (!($17)) {
  _lily_es_push_global_var($15,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 }
 $18 = ((($1)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 62|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = ($19|0)==($24|0);
 if ($25) {
  _lily_es_push_local_var($15,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 } else {
  _lily_es_push_upvalue($15,$1);
  HEAP32[$2>>2] = 2;
  STACKTOP = sp;return;
 }
}
function _constant_by_name($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_shorthash_for_name($0)|0);
 $2 = tempRet0;
 $3 = (16);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($1|0);
 $10 = ($8|0)==($2|0);
 $11 = $9 & $10;
 if ($11) {
  $12 = HEAP32[2]|0;
  $13 = (_strcmp($12,$0)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $15 = (16);
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)>($2>>>0);
 $22 = ($17>>>0)>($1>>>0);
 $23 = ($20|0)==($2|0);
 $24 = $23 & $22;
 $25 = $21 | $24;
 if ($25) {
  $$0 = -1;
  return ($$0|0);
 }
 $26 = (32);
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)==($1|0);
 $33 = ($31|0)==($2|0);
 $34 = $32 & $33;
 if ($34) {
  $35 = HEAP32[(24)>>2]|0;
  $36 = (_strcmp($35,$0)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $38 = (32);
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43>>>0)>($2>>>0);
 $45 = ($40>>>0)>($1>>>0);
 $46 = ($43|0)==($2|0);
 $47 = $46 & $45;
 $48 = $44 | $47;
 if ($48) {
  $$0 = -1;
  return ($$0|0);
 }
 $49 = (48);
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = ($51|0)==($1|0);
 $56 = ($54|0)==($2|0);
 $57 = $55 & $56;
 if ($57) {
  $58 = HEAP32[(40)>>2]|0;
  $59 = (_strcmp($58,$0)|0);
  $60 = ($59|0)==(0);
  if ($60) {
   $$0 = 2;
   return ($$0|0);
  }
 }
 $61 = (48);
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66>>>0)>($2>>>0);
 $68 = ($63>>>0)>($1>>>0);
 $69 = ($66|0)==($2|0);
 $70 = $69 & $68;
 $71 = $67 | $70;
 if ($71) {
  $$0 = -1;
  return ($$0|0);
 }
 $72 = (64);
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = ($74|0)==($1|0);
 $79 = ($77|0)==($2|0);
 $80 = $78 & $79;
 if ($80) {
  $81 = HEAP32[(56)>>2]|0;
  $82 = (_strcmp($81,$0)|0);
  $83 = ($82|0)==(0);
  if ($83) {
   $$0 = 3;
   return ($$0|0);
  }
 }
 $84 = (64);
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89>>>0)>($2>>>0);
 $91 = ($86>>>0)>($1>>>0);
 $92 = ($89|0)==($2|0);
 $93 = $92 & $91;
 $94 = $90 | $93;
 if ($94) {
  $$0 = -1;
  return ($$0|0);
 }
 $95 = (80);
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = ($97|0)==($1|0);
 $102 = ($100|0)==($2|0);
 $103 = $101 & $102;
 if ($103) {
  $104 = HEAP32[(72)>>2]|0;
  $105 = (_strcmp($104,$0)|0);
  $106 = ($105|0)==(0);
  if ($106) {
   $$0 = 4;
   return ($$0|0);
  }
 }
 $107 = (80);
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4)|0;
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112>>>0)>($2>>>0);
 $114 = ($109>>>0)>($1>>>0);
 $115 = ($112|0)==($2|0);
 $116 = $115 & $114;
 $117 = $113 | $116;
 if ($117) {
  $$0 = -1;
  return ($$0|0);
 }
 $118 = (96);
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + 4)|0;
 $122 = $121;
 $123 = HEAP32[$122>>2]|0;
 $124 = ($120|0)==($1|0);
 $125 = ($123|0)==($2|0);
 $126 = $124 & $125;
 if ($126) {
  $127 = HEAP32[(88)>>2]|0;
  $128 = (_strcmp($127,$0)|0);
  $129 = ($128|0)==(0);
  if ($129) {
   $$0 = 5;
   return ($$0|0);
  }
 }
 $130 = (96);
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135>>>0)>($2>>>0);
 $137 = ($132>>>0)>($1>>>0);
 $138 = ($135|0)==($2|0);
 $139 = $138 & $137;
 $140 = $136 | $139;
 if ($140) {
  $$0 = -1;
  return ($$0|0);
 }
 $141 = (112);
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = (($141) + 4)|0;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = ($143|0)==($1|0);
 $148 = ($146|0)==($2|0);
 $149 = $147 & $148;
 if ($149) {
  $150 = HEAP32[(104)>>2]|0;
  $151 = (_strcmp($150,$0)|0);
  $152 = ($151|0)==(0);
  if ($152) {
   $$0 = 6;
   return ($$0|0);
  }
 }
 $$0 = -1;
 return ($$0|0);
}
function _push_constant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($1|0) {
 case 5:  {
  $6 = ((($0)) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9&65535;
  _lily_es_push_integer($3,$10);
  return;
  break;
 }
 case 4:  {
  $11 = ((($5)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_lily_get_string_literal($5,$14)|0);
  _push_literal($0,$15);
  return;
  break;
 }
 case 6:  {
  $16 = ((($0)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_lily_get_string_literal($5,$22)|0);
  _push_literal($0,$23);
  return;
  break;
 }
 case 0:  {
  _lily_es_push_boolean($3,1);
  return;
  break;
 }
 case 3:  {
  _lily_es_push_boolean($3,0);
  return;
  break;
 }
 case 1:  {
  _lily_es_push_self($3);
  return;
  break;
 }
 case 2:  {
  $24 = (_lily_get_unit_literal($5)|0);
  _push_literal($0,$24);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _dispatch_word_as_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(3);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_es_push_variant($7,$1);
  HEAP32[$2>>2] = 2;
  return;
 } else {
  _expression_class_access($0,$1,$2);
  return;
 }
}
function _dispatch_dynaload($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(1);
 if (!($7)) {
  _dispatch_word_as_class($0,$1,$2);
  return;
 }
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 32;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  _lily_es_push_global_var($4,$1);
 } else {
  _lily_es_push_defined_func($4,$1);
 }
 HEAP32[$2>>2] = 2;
 return;
}
function _expression_class_access($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_lexer($4);
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(47);
 if (!($7)) {
  $8 = ((($1)) + 6|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 & 128;
  $11 = ($10<<16>>16)==(0);
  if (!($11)) {
   $12 = ((($0)) + 92|0);
   $13 = HEAP32[$12>>2]|0;
   _lily_raise_syn($13,6948,$vararg_buffer);
   // unreachable;
  }
  $14 = (_lily_find_or_dl_member($0,$1,6519,$1)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   $16 = ((($0)) + 92|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($1)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $19;
   _lily_raise_syn($17,6998,$vararg_buffer1);
   // unreachable;
  }
  $20 = ((($14)) + 6|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 & 1;
  $23 = ($22<<16>>16)==(0);
  if (!($23)) {
   $24 = ((($0)) + 92|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($1)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $27;
   _lily_raise_syn($25,7036,$vararg_buffer3);
   // unreachable;
  }
  $28 = ((($0)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  _lily_es_push_static_func($29,$14);
  HEAP32[$2>>2] = 10;
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 2;
 _lily_lexer($4);
 $30 = HEAP32[$5>>2]|0;
 $31 = ($30|0)==(38);
 if (!($31)) {
  $32 = ((($0)) + 92|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_tokname(38)|0);
  $35 = HEAP32[$5>>2]|0;
  $36 = (_tokname($35)|0);
  HEAP32[$vararg_buffer6>>2] = $34;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $36;
  _lily_raise_syn($33,6220,$vararg_buffer6);
  // unreachable;
 }
 $37 = ((($4)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_lily_find_or_dl_member($0,$1,$38,$1)|0);
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  $41 = ((($39)) + 4|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = ($42<<16>>16)==(1);
  if ($43) {
   $44 = ((($0)) + 36|0);
   $45 = HEAP32[$44>>2]|0;
   _lily_es_push_static_func($45,$39);
   STACKTOP = sp;return;
  }
 }
 $46 = ((($1)) + 6|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 & 128;
 $49 = ($48<<16>>16)==(0);
 if ($49) {
  $55 = ((($0)) + 92|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($1)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $58;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $59;
  _lily_raise_syn($56,7081,$vararg_buffer10);
  // unreachable;
 }
 $50 = HEAP32[$37>>2]|0;
 $51 = (_lily_find_variant($1,$50)|0);
 $52 = ($51|0)==(0|0);
 if ($52) {
  $55 = ((($0)) + 92|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($1)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $58;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $59;
  _lily_raise_syn($56,7081,$vararg_buffer10);
  // unreachable;
 }
 $53 = ((($0)) + 36|0);
 $54 = HEAP32[$53>>2]|0;
 _lily_es_push_variant($54,$51);
 STACKTOP = sp;return;
}
function _lily_find_or_dl_member($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_lily_find_member($1,$2,$3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($1)) + 46|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (_try_method_dynaload($0,$1,$2)|0);
 $$0 = $9;
 return ($$0|0);
}
function _ensure_unique_class_member($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_find_member($5,$1,0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($6)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(1);
 $11 = ((($0)) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($5)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  _lily_raise_syn($12,7144,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer2>>2] = $14;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $1;
  _lily_raise_syn($12,7194,$vararg_buffer2);
  // unreachable;
 }
}
function _make_type_of_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_tm_add($4,$2);
 $5 = HEAP32[$3>>2]|0;
 $6 = (_lily_tm_make($5,$1,1)|0);
 return ($6|0);
}
function _lily_dynaload_exception($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_try_toplevel_dynaload($0,$2,$1)|0);
 return ($3|0);
}
function _lily_parser_lambda_eval($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 _ensure_not_in_optargs($0,$1);
 _lily_lexer_load($5,3,$2);
 $10 = ((($5)) + 16|0);
 HEAP32[$10>>2] = $1;
 $11 = $1&65535;
 $12 = (_new_native_define_var($0,0,7480,$11)|0);
 $13 = ((($0)) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 _lily_emit_enter_call_block($14,13,$12);
 $15 = HEAP32[$6>>2]|0;
 $16 = HEAP32[628]|0;
 _lily_tm_add($15,$16);
 _lily_lexer($5);
 $17 = ((($5)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(51);
 if ($19) {
  $20 = (_collect_lambda_args($0,$3)|0);
  $phitmp = (($20) + 1)|0;
  $$048 = $phitmp;
 } else {
  $$048 = 1;
 }
 $21 = ((($0)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 _lily_es_checkpoint_save($22);
 $23 = (_parse_lambda_body($0,$3)|0);
 $24 = HEAP32[$21>>2]|0;
 _lily_es_checkpoint_restore($24);
 $25 = ($23|0)==(0|0);
 if (!($25)) {
  $26 = HEAP32[$6>>2]|0;
  _lily_tm_insert($26,$9,$23);
 }
 $27 = ($3|0)==(0|0);
 if ($27) {
  $$0 = 0;
 } else {
  $28 = ((($3)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 8|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = ($31<<16>>16)==(7);
  if ($32) {
   $33 = ((($3)) + 6|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34 & 1;
   $36 = $35&65535;
   $$0 = $36;
  } else {
   $$0 = 0;
  }
 }
 $37 = HEAP32[$6>>2]|0;
 $38 = ((($0)) + 80|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_lily_tm_make_call($37,$$0,$41,$$048)|0);
 $43 = ((($12)) + 12|0);
 HEAP32[$43>>2] = $42;
 _hide_block_vars($0);
 $44 = HEAP32[$13>>2]|0;
 $45 = HEAP32[$10>>2]|0;
 $46 = $45&65535;
 _lily_emit_leave_call_block($44,$46);
 _lily_pop_lex_entry($5);
 return ($12|0);
}
function _ensure_not_in_optargs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $$off = (($7) + -11)<<24>>24;
 $switch = ($$off&255)<(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $8 = ((($5)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  STACKTOP = sp;return;
 } else {
  $15 = ((($0)) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  HEAP32[$17>>2] = $1;
  $18 = ((($0)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  _lily_raise_syn($19,10828,$vararg_buffer);
  // unreachable;
 }
}
function _collect_lambda_args($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$043 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $26 = -1;
 } else {
  $3 = ((($1)) + 10|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $26 = $5;
 }
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = ((($0)) + 88|0);
 $10 = ((($0)) + 92|0);
 $11 = ((($1)) + 16|0);
 $12 = ((($0)) + 92|0);
 $13 = ((($7)) + 12|0);
 $14 = ((($0)) + 92|0);
 $$043 = 0;
 L4: while(1) {
  _lily_lexer($7);
  $15 = HEAP32[$8>>2]|0;
  $16 = ($15|0)==(38);
  if (!($16)) {
   label = 5;
   break;
  }
  $21 = (_get_named_var($0)|0);
  $22 = HEAP32[$8>>2]|0;
  $23 = ($22|0)==(5);
  if ($23) {
   _lily_lexer($7);
   $24 = (_get_type_raw($0,0)|0);
   $$1 = $24;
  } else {
   $25 = ($$043|0)<($26|0);
   if (!($25)) {
    label = 11;
    break;
   }
   $27 = (($$043) + 1)|0;
   $28 = HEAP32[$11>>2]|0;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if ($31) {
    label = 11;
    break;
   }
   $32 = ((($30)) + 6|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 & 16;
   $35 = ($34<<16>>16)==(0);
   if ($35) {
    $$1 = $30;
   } else {
    label = 11;
    break;
   }
  }
  $38 = ((($21)) + 12|0);
  HEAP32[$38>>2] = $$1;
  $39 = HEAP32[$9>>2]|0;
  _lily_tm_add($39,$$1);
  $40 = (($$043) + 1)|0;
  $41 = HEAP32[$8>>2]|0;
  switch ($41|0) {
  case 1:  {
   $$043 = $40;
   break;
  }
  case 51:  {
   label = 14;
   break L4;
   break;
  }
  default: {
   label = 13;
   break L4;
  }
  }
 }
 if ((label|0) == 5) {
  $17 = HEAP32[$14>>2]|0;
  $18 = (_tokname(38)|0);
  $19 = HEAP32[$8>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  _lily_raise_syn($17,6220,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $36 = HEAP32[$12>>2]|0;
  $37 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $37;
  _lily_raise_syn($36,10763,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 13) {
  $42 = HEAP32[$10>>2]|0;
  $43 = (_tokname($41)|0);
  HEAP32[$vararg_buffer5>>2] = $43;
  _lily_raise_syn($42,10790,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _parse_lambda_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer($3);
 $4 = ((($3)) + 40|0);
 $5 = ((($3)) + 12|0);
 $6 = ((($0)) + 76|0);
 $7 = ((($0)) + 36|0);
 L1: while(1) {
  $$pr = HEAP32[$4>>2]|0;
  $8 = $$pr;
  while(1) {
   $9 = ($8|0)==(38);
   if (!($9)) {
    break;
   }
   $10 = HEAP32[$5>>2]|0;
   $11 = (_keyword_by_name($10)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    break;
   }
   _lily_lexer($3);
   _handle_multiline($0,$11);
   $23 = HEAP32[$4>>2]|0;
   $24 = ($23|0)==(60);
   if ($24) {
    $$0 = 0;
    label = 10;
    break L1;
   } else {
    $8 = $23;
   }
  }
  _expression($0);
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(60);
  $15 = HEAP32[$6>>2]|0;
  $16 = HEAP32[$7>>2]|0;
  if ($14) {
   break;
  }
  _lily_emit_eval_expr($15,$16);
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 _lily_emit_eval_lambda_body($15,$16,$1);
 $17 = HEAP32[$7>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = ((($19)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $$0 = $22;
 return ($$0|0);
}
function _hide_block_vars($0) {
 $0 = $0|0;
 var $$024 = 0, $$1 = 0, $$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 10|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  return;
 }
 $8 = ((($0)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $6&65535;
 $$024 = $14;$$in = $13;
 while(1) {
  $15 = HEAP32[$$in>>2]|0;
  $16 = ((($$in)) + 6|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 & 32;
  $19 = ($18<<16>>16)==(0);
  if ($19) {
   $23 = ((($$in)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   _lily_free($24);
   _lily_free($$in);
  } else {
   $20 = HEAP32[$8>>2]|0;
   $21 = ((($20)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$$in>>2] = $22;
   HEAP32[$21>>2] = $$in;
  }
  $$1 = (($$024) + -1)|0;
  $25 = ($$1|0)==(0);
  if ($25) {
   break;
  } else {
   $$024 = $$1;$$in = $15;
  }
 }
 $26 = HEAP32[$8>>2]|0;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 32|0);
 HEAP32[$29>>2] = $15;
 $30 = HEAP32[$1>>2]|0;
 $31 = ((($30)) + 56|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 10|0);
 HEAP16[$33>>1] = 0;
 return;
}
function _keyword_by_name($0) {
 $0 = $0|0;
 var $$0 = 0, $$01314 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_shorthash_for_name($0)|0);
 $2 = tempRet0;
 $$01314 = 0;
 while(1) {
  $3 = (((120 + ($$01314<<4)|0)) + 8|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)==($1|0);
  $11 = ($9|0)==($2|0);
  $12 = $10 & $11;
  if ($12) {
   $13 = (120 + ($$01314<<4)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strcmp($14,$0)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = $$01314;
    label = 6;
    break;
   }
  }
  $17 = $3;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)>($2>>>0);
  $24 = ($19>>>0)>($1>>>0);
  $25 = ($22|0)==($2|0);
  $26 = $25 & $24;
  $27 = $23 | $26;
  if ($27) {
   $$0 = -1;
   label = 6;
   break;
  }
  $28 = (($$01314) + 1)|0;
  $29 = ($28|0)<(25);
  if ($29) {
   $$01314 = $28;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _expression($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_es_flush($2);
 _expression_raw($0);
 return;
}
function _handle_multiline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (1912 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63]($0,1);
 return;
}
function _keyword_if($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$068 = 0, $$068$ph = 0, $$cmp = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,0);
 _expression($0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_emit_eval_condition($6,$8);
 $9 = ((($3)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(5);
 if (!($11)) {
  $12 = ((($0)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_tokname(5)|0);
  $15 = HEAP32[$9>>2]|0;
  $16 = (_tokname($15)|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _lily_raise_syn($13,6220,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $17 = HEAP32[$9>>2]|0;
 $18 = ($17|0)==(2);
 $19 = $18&1;
 if ($18) {
  _lily_lexer($3);
  $$068$ph = 0;
  label = 5;
 } else {
  $$068 = 0;$20 = $17;
 }
 L6: while(1) {
  if ((label|0) == 5) {
   label = 0;
   $$pr = HEAP32[$9>>2]|0;
   $$068 = $$068$ph;$20 = $$pr;
  }
  L10: do {
   switch ($20|0) {
   case 38:  {
    $21 = ((($3)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_keyword_by_name($22)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     _expression($0);
     $25 = HEAP32[$4>>2]|0;
     $26 = HEAP32[$7>>2]|0;
     _lily_emit_eval_expr($25,$26);
     break L10;
    }
    $27 = $23 & -2;
    $$cmp = ($27|0)==(6);
    if ($$cmp) {
     $30 = ($$068|0)==(1);
     $or$cond3 = $18 & $30;
     if ($or$cond3) {
      label = 12;
      break L6;
     } else {
      break L10;
     }
    } else {
     _lily_lexer($3);
     $28 = (1912 + ($23<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_vii[$29 & 63]($0,$19);
     break L10;
    }
    break;
   }
   case 3:  {
    break;
   }
   default: {
    _expression($0);
    $34 = HEAP32[$4>>2]|0;
    $35 = HEAP32[$7>>2]|0;
    _lily_emit_eval_expr($34,$35);
   }
   }
  } while(0);
  $36 = HEAP32[$9>>2]|0;
  $37 = ($36|0)==(38);
  $38 = ($$068|0)==(0);
  $or$cond5 = $38 & $37;
  if (!($or$cond5)) {
   $45 = ($36|0)==(3);
   $46 = $18 ^ 1;
   $or$cond9 = $45 | $46;
   if ($or$cond9) {
    label = 21;
    break;
   } else {
    $$068$ph = $$068;
    label = 5;
    continue;
   }
  }
  $39 = ((($3)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_keyword_by_name($40)|0);
  $42 = $41 | 1;
  $43 = ($42|0)==(7);
  if (!($43)) {
   if ($18) {
    $$068$ph = 0;
    label = 5;
    continue;
   } else {
    label = 23;
    break;
   }
  }
  $44 = ($41|0)==(7);
  _lily_lexer($3);
  if ($44) {
   _do_elif($0);
   $$068$ph = 0;
   label = 5;
   continue;
  } else {
   _do_else($0);
   $$068$ph = 1;
   label = 5;
   continue;
  }
 }
 if ((label|0) == 12) {
  $31 = ((($0)) + 92|0);
  $32 = ($23|0)==(7);
  $$ = $32 ? 5620 : 5615;
  $33 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $$;
  _lily_raise_syn($33,10725,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 21) {
  if (!($18)) {
   _hide_block_vars($0);
   $47 = HEAP32[$4>>2]|0;
   _lily_emit_leave_block($47);
   STACKTOP = sp;return;
  }
  _lily_lexer($3);
  _hide_block_vars($0);
  $47 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($47);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 23) {
  _hide_block_vars($0);
  $47 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($47);
  STACKTOP = sp;return;
 }
}
function _keyword_do($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,4);
 $6 = ((($3)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(5);
 if (!($8)) {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_tokname(5)|0);
  $12 = HEAP32[$6>>2]|0;
  $13 = (_tokname($12)|0);
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  _lily_raise_syn($10,6220,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)==(2);
 if ($15) {
  _parse_multiline_block_body($0,$1);
 } else {
  _statement($0,0);
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = ($16|0)==(38);
 if (!($17)) {
  $18 = ((($0)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_tokname(38)|0);
  $21 = HEAP32[$6>>2]|0;
  $22 = (_tokname($21)|0);
  HEAP32[$vararg_buffer2>>2] = $20;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $22;
  _lily_raise_syn($19,6220,$vararg_buffer2);
  // unreachable;
 }
 $23 = ((($3)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_strcmp($24,5630)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  _lily_lexer($3);
  _hide_block_vars($0);
  _expression($0);
  $29 = HEAP32[$4>>2]|0;
  $30 = ((($0)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  _lily_emit_eval_condition($29,$31);
  $32 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($32);
  STACKTOP = sp;return;
 } else {
  $27 = ((($0)) + 92|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $24;
  _lily_raise_syn($28,10697,$vararg_buffer6);
  // unreachable;
 }
}
function _keyword_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_var($0,0);
 return;
}
function _keyword_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$072$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr22 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(38);
 if (!($6)) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(38)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6220,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($0)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_emit_enter_block($13,5);
 $14 = ((($0)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($3)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_lily_find_var($15,0,$17)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = HEAP32[$14>>2]|0;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$16>>2]|0;
  $26 = ((($3)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27&65535;
  $29 = (_new_local_var($0,$24,$25,$28)|0);
  $$0 = $29;
 } else {
  $30 = ((($18)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = ($35<<16>>16)==(1);
  if ($36) {
   $$0 = $18;
  } else {
   $37 = ((($0)) + 92|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $31;
   _lily_raise_syn($38,10511,$vararg_buffer2);
   // unreachable;
  }
 }
 _lily_lexer($3);
 $39 = HEAP32[$4>>2]|0;
 $40 = ($39|0)==(38);
 if (!($40)) {
  $41 = ((($0)) + 92|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_tokname(38)|0);
  $44 = HEAP32[$4>>2]|0;
  $45 = (_tokname($44)|0);
  HEAP32[$vararg_buffer5>>2] = $43;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $45;
  _lily_raise_syn($42,6220,$vararg_buffer5);
  // unreachable;
 }
 $46 = HEAP32[$16>>2]|0;
 $47 = (_strcmp($46,10557)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  $49 = ((($0)) + 92|0);
  $50 = HEAP32[$49>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $46;
  _lily_raise_syn($50,10560,$vararg_buffer9);
  // unreachable;
 }
 _lily_lexer($3);
 $51 = (_parse_for_range_value($0,10585)|0);
 $52 = HEAP32[$4>>2]|0;
 $53 = ($52|0)==(55);
 if (!($53)) {
  $54 = ((($0)) + 92|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (_tokname(55)|0);
  $57 = HEAP32[$4>>2]|0;
  $58 = (_tokname($57)|0);
  HEAP32[$vararg_buffer12>>2] = $56;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $58;
  _lily_raise_syn($55,6220,$vararg_buffer12);
  // unreachable;
 }
 _lily_lexer($3);
 $59 = (_parse_for_range_value($0,10597)|0);
 $60 = HEAP32[$4>>2]|0;
 $61 = ($60|0)==(38);
 do {
  if ($61) {
   $62 = HEAP32[$16>>2]|0;
   $63 = (_strcmp($62,10607)|0);
   $64 = ($63|0)==(0);
   if ($64) {
    _lily_lexer($3);
    $67 = (_parse_for_range_value($0,10635)|0);
    $$072$in = $67;
    break;
   } else {
    $65 = ((($0)) + 92|0);
    $66 = HEAP32[$65>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $62;
    _lily_raise_syn($66,10610,$vararg_buffer16);
    // unreachable;
   }
  } else {
   $68 = HEAP32[$14>>2]|0;
   $69 = ((($68)) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($70)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($3)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74&65535;
   $76 = (_new_local_var($0,$72,10635,$75)|0);
   $77 = ((($0)) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   _lily_es_flush($78);
   $79 = HEAP32[$77>>2]|0;
   _lily_es_push_integer($79,1);
   $80 = HEAP32[$12>>2]|0;
   $81 = HEAP32[$77>>2]|0;
   _lily_emit_eval_expr_to_var($80,$81,$76);
   $$072$in = $76;
  }
 } while(0);
 $82 = HEAP32[$12>>2]|0;
 $83 = HEAP32[$2>>2]|0;
 $84 = ((($83)) + 16|0);
 $85 = HEAP32[$84>>2]|0;
 _lily_emit_finalize_for_in($82,$$0,$51,$59,$$072$in,$85);
 $86 = HEAP32[$4>>2]|0;
 $87 = ($86|0)==(5);
 if (!($87)) {
  $88 = ((($0)) + 92|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (_tokname(5)|0);
  $91 = HEAP32[$4>>2]|0;
  $92 = (_tokname($91)|0);
  HEAP32[$vararg_buffer19>>2] = $90;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = $92;
  _lily_raise_syn($89,6220,$vararg_buffer19);
  // unreachable;
 }
 _lily_lexer($3);
 $93 = HEAP32[$4>>2]|0;
 $94 = ($93|0)==(2);
 if ($94) {
  _parse_multiline_block_body($0,$1);
  _hide_block_vars($0);
  $95 = HEAP32[$12>>2]|0;
  _lily_emit_leave_block($95);
  STACKTOP = sp;return;
 } else {
  _statement($0,0);
  _hide_block_vars($0);
  $95 = HEAP32[$12>>2]|0;
  _lily_emit_leave_block($95);
  STACKTOP = sp;return;
 }
}
function _keyword_try($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,6);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_emit_try($6,$9);
 $10 = ((($3)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(5);
 if (!($12)) {
  $13 = ((($0)) + 92|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_tokname(5)|0);
  $16 = HEAP32[$10>>2]|0;
  $17 = (_tokname($16)|0);
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $17;
  _lily_raise_syn($14,6220,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $18 = HEAP32[$10>>2]|0;
 $19 = ($18|0)==(2);
 $20 = $19&1;
 $21 = ($1|0)==(0);
 $or$cond = $21 & $19;
 if ($or$cond) {
  $22 = ((($0)) + 92|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_raise_syn($23,7901,$vararg_buffer2);
  // unreachable;
 }
 if ($19) {
  _lily_lexer($3);
 }
 $24 = ((($3)) + 12|0);
 $25 = $19 ^ 1;
 $26 = ((($3)) + 12|0);
 $27 = ((($0)) + 36|0);
 L10: while(1) {
  $28 = HEAP32[$10>>2]|0;
  L12: do {
   switch ($28|0) {
   case 3:  {
    break L10;
    break;
   }
   case 38:  {
    $29 = HEAP32[$26>>2]|0;
    $30 = (_keyword_by_name($29)|0);
    switch ($30|0) {
    case 19:  {
     break L12;
     break;
    }
    case -1:  {
     _expression($0);
     $31 = HEAP32[$4>>2]|0;
     $32 = HEAP32[$27>>2]|0;
     _lily_emit_eval_expr($31,$32);
     break L12;
     break;
    }
    default: {
     _lily_lexer($3);
     $33 = (1912 + ($30<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_vii[$34 & 63]($0,$20);
     break L12;
    }
    }
    break;
   }
   default: {
    _statement($0,0);
   }
   }
  } while(0);
  $$pr = HEAP32[$10>>2]|0;
  $35 = ($$pr|0)==(38);
  if (!($35)) {
   $39 = ($$pr|0)==(3);
   $or$cond3 = $39 | $25;
   if ($or$cond3) {
    break;
   } else {
    continue;
   }
  }
  $36 = HEAP32[$24>>2]|0;
  $37 = (_keyword_by_name($36)|0);
  $38 = ($37|0)==(19);
  if ($38) {
   _lily_lexer($3);
   _process_except($0);
   continue;
  } else {
   if ($19) {
    continue;
   } else {
    label = 20;
    break;
   }
  }
 }
 if ((label|0) == 20) {
  _hide_block_vars($0);
  $40 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($40);
  STACKTOP = sp;return;
 }
 if (!($19)) {
  _hide_block_vars($0);
  $40 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($40);
  STACKTOP = sp;return;
 }
 _lily_lexer($3);
 _hide_block_vars($0);
 $40 = HEAP32[$4>>2]|0;
 _lily_emit_leave_block($40);
 STACKTOP = sp;return;
}
function _keyword_case($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,10374,$vararg_buffer);
 // unreachable;
}
function _keyword_else($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,10353,$vararg_buffer);
 // unreachable;
}
function _keyword_elif($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,10332,$vararg_buffer);
 // unreachable;
}
function _keyword_enum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_enum($0,0);
 return;
}
function _keyword_while($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_emit_enter_block($5,3);
 _expression($0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_emit_eval_condition($6,$8);
 $9 = ((($3)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(5);
 if (!($11)) {
  $12 = ((($0)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_tokname(5)|0);
  $15 = HEAP32[$9>>2]|0;
  $16 = (_tokname($15)|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _lily_raise_syn($13,6220,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $17 = HEAP32[$9>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  _parse_multiline_block_body($0,$1);
  _hide_block_vars($0);
  $19 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($19);
  STACKTOP = sp;return;
 } else {
  _statement($0,0);
  _hide_block_vars($0);
  $19 = HEAP32[$4>>2]|0;
  _lily_emit_leave_block($19);
  STACKTOP = sp;return;
 }
}
function _keyword_raise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(13);
 if ($8) {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,10254,$vararg_buffer);
  // unreachable;
 }
 _expression($0);
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_emit_raise($11,$13);
 $14 = ($1|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (_code_is_after_exit($0)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 } else {
  $17 = ((($0)) + 92|0);
  $18 = HEAP32[$17>>2]|0;
  _lily_raise_syn($18,10287,$vararg_buffer1);
  // unreachable;
 }
}
function _keyword_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph = 0, $$0$ph84 = 0, $$078$ph = 0, $$079$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $or$cond = 0, $or$cond81 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 92|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise_syn($4,9729,$vararg_buffer);
  // unreachable;
 }
 $5 = ((($0)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_emit_enter_block($8,9);
 _expression($0);
 $9 = HEAP32[$7>>2]|0;
 $10 = ((($0)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_emit_eval_match_expr($9,$11);
 $12 = ((($6)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(5);
 if (!($14)) {
  $15 = ((($0)) + 92|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_tokname(5)|0);
  $18 = HEAP32[$12>>2]|0;
  $19 = (_tokname($18)|0);
  HEAP32[$vararg_buffer1>>2] = $17;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $19;
  _lily_raise_syn($16,6220,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($6);
 $20 = HEAP32[$12>>2]|0;
 $21 = ($20|0)==(2);
 if (!($21)) {
  $22 = ((($0)) + 92|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_tokname(2)|0);
  $25 = HEAP32[$12>>2]|0;
  $26 = (_tokname($25)|0);
  HEAP32[$vararg_buffer4>>2] = $24;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $26;
  _lily_raise_syn($23,6220,$vararg_buffer4);
  // unreachable;
 }
 _lily_lexer($6);
 $27 = HEAP32[$12>>2]|0;
 $28 = ($27|0)==(38);
 if (!($28)) {
  $29 = ((($0)) + 92|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_tokname(38)|0);
  $32 = HEAP32[$12>>2]|0;
  $33 = (_tokname($32)|0);
  HEAP32[$vararg_buffer8>>2] = $31;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $33;
  _lily_raise_syn($30,6220,$vararg_buffer8);
  // unreachable;
 }
 $34 = ((($6)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_keyword_by_name($35)|0);
 $37 = ($36|0)==(5);
 if (!($37)) {
  $38 = ((($0)) + 92|0);
  $39 = HEAP32[$38>>2]|0;
  _lily_raise_syn($39,9775,$vararg_buffer12);
  // unreachable;
 }
 $40 = HEAP32[$10>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 6|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48 & 128;
 $50 = ($49<<16>>16)!=(0);
 if ($50) {
  $51 = ((($46)) + 44|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $$078$ph = $53;
 } else {
  $$078$ph = 0;
 }
 $54 = ((($0)) + 92|0);
 $55 = ((($0)) + 92|0);
 $56 = ((($0)) + 92|0);
 $$0$ph = 0;$$079$ph = 0;
 L19: while(1) {
  $57 = ($$079$ph|0)==($$078$ph|0);
  $or$cond = $50 & $57;
  $$0$ph84 = $$0$ph;
  L21: while(1) {
   L23: while(1) {
    $58 = HEAP32[$12>>2]|0;
    switch ($58|0) {
    case 3:  {
     label = 32;
     break L19;
     break;
    }
    case 38:  {
     break;
    }
    default: {
     _statement($0,0);
     continue L23;
    }
    }
    $59 = HEAP32[$34>>2]|0;
    $60 = (_keyword_by_name($59)|0);
    switch ($60|0) {
    case 5:  {
     break L21;
     break;
    }
    case 6:  {
     break L23;
     break;
    }
    case -1:  {
     _expression($0);
     $75 = HEAP32[$7>>2]|0;
     $76 = HEAP32[$10>>2]|0;
     _lily_emit_eval_expr($75,$76);
     continue L23;
     break;
    }
    default: {
     _lily_lexer($6);
     $73 = (1912 + ($60<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     FUNCTION_TABLE_vii[$74 & 63]($0,$1);
     continue L23;
    }
    }
   }
   $64 = ($$0$ph84|0)!=(0);
   $or$cond81 = $64 | $or$cond;
   if ($or$cond81) {
    label = 25;
    break L19;
   }
   _lily_lexer($6);
   $66 = HEAP32[$12>>2]|0;
   $67 = ($66|0)==(5);
   if (!($67)) {
    label = 27;
    break L19;
   }
   $72 = HEAP32[$7>>2]|0;
   _lily_emit_change_match_branch($72);
   _lily_lexer($6);
   $$0$ph84 = 1;
  }
  $61 = ($$0$ph84|0)==(0);
  if (!($61)) {
   label = 19;
   break;
  }
  _lily_lexer($6);
  if ($50) {
   _match_case_enum($0,$42);
  } else {
   _match_case_class($0,$42);
  }
  $63 = (($$079$ph) + 1)|0;
  $$0$ph = $$0$ph84;$$079$ph = $63;
 }
 if ((label|0) == 19) {
  $62 = HEAP32[$56>>2]|0;
  _lily_raise_syn($62,9807,$vararg_buffer14);
  // unreachable;
 }
 else if ((label|0) == 25) {
  $65 = HEAP32[$54>>2]|0;
  _lily_raise_syn($65,9835,$vararg_buffer16);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $68 = HEAP32[$55>>2]|0;
  $69 = (_tokname(5)|0);
  $70 = HEAP32[$12>>2]|0;
  $71 = (_tokname($70)|0);
  HEAP32[$vararg_buffer18>>2] = $69;
  $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
  HEAP32[$vararg_ptr21>>2] = $71;
  _lily_raise_syn($68,6220,$vararg_buffer18);
  // unreachable;
 }
 else if ((label|0) == 32) {
  $77 = ($$0$ph84|0)==(0);
  if (!($77)) {
   _hide_block_vars($0);
   _lily_lexer($6);
   $82 = HEAP32[$7>>2]|0;
   _lily_emit_leave_block($82);
   STACKTOP = sp;return;
  }
  $78 = ($49<<16>>16)==(0);
  if ($78) {
   $79 = ((($0)) + 92|0);
   $80 = HEAP32[$79>>2]|0;
   _lily_raise_syn($80,9863,$vararg_buffer22);
   // unreachable;
  }
  $81 = ($$079$ph|0)==($$078$ph|0);
  if ($81) {
   _hide_block_vars($0);
   _lily_lexer($6);
   $82 = HEAP32[$7>>2]|0;
   _lily_emit_leave_block($82);
   STACKTOP = sp;return;
  }
  _error_incomplete_match($0,$42);
  _hide_block_vars($0);
  _lily_lexer($6);
  $82 = HEAP32[$7>>2]|0;
  _lily_emit_leave_block($82);
  STACKTOP = sp;return;
 }
}
function _keyword_break($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_break($3);
 $4 = ($1|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (_code_is_after_exit($0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_raise_syn($8,9684,$vararg_buffer);
  // unreachable;
 }
}
function _keyword_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(14);
 if (!($8)) {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,9545,$vararg_buffer);
  // unreachable;
 }
 $11 = ((($0)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(38);
 if ($15) {
  $21 = ((($12)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  _ensure_valid_class($0,$22);
  $23 = ((($0)) + 80|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$21>>2]|0;
  $26 = (_lily_new_class($24,$25)|0);
  _parse_class_body($0,$26);
  STACKTOP = sp;return;
 } else {
  $16 = ((($0)) + 92|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_tokname(38)|0);
  $19 = HEAP32[$13>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer1>>2] = $18;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $20;
  _lily_raise_syn($17,6220,$vararg_buffer1);
  // unreachable;
 }
}
function _keyword_public($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($0,14);
 return;
}
function _keyword_static($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,9483,$vararg_buffer);
 // unreachable;
}
function _keyword_scoped($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_enum($0,1);
 return;
}
function _keyword_define($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_define($0,0);
 return;
}
function _keyword_return($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 switch ($7<<24>>24) {
 case 12:  {
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise_syn($9,8960,$vararg_buffer);
  // unreachable;
  break;
 }
 case 13:  {
  $10 = ((($0)) + 92|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_raise_syn($11,9005,$vararg_buffer1);
  // unreachable;
  break;
 }
 case 14:  {
  $12 = ((($0)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_raise_syn($13,9039,$vararg_buffer3);
  // unreachable;
  break;
 }
 default: {
  $14 = HEAP32[$5>>2]|0;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[628]|0;
  $21 = ($19|0)==($20|0);
  if (!($21)) {
   _expression($0);
  }
  $22 = HEAP32[$2>>2]|0;
  $23 = ((($0)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  _lily_emit_eval_return($22,$24,$19);
  $25 = ($1|0)==(0);
  if ($25) {
   STACKTOP = sp;return;
  }
  $26 = (_code_is_after_exit($0)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   STACKTOP = sp;return;
  } else {
   $28 = HEAP32[628]|0;
   $29 = ($19|0)==($28|0);
   $$ = $29 ? 9076 : 19327;
   $30 = ((($0)) + 92|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $$;
   _lily_raise_syn($31,9101,$vararg_buffer5);
   // unreachable;
  }
 }
 }
}
function _keyword_except($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_raise_syn($3,8936,$vararg_buffer);
 // unreachable;
}
function _keyword_import($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0;
 var $vararg_ptr11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 13|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(14);
 if (!($11)) {
  $12 = ((($0)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_raise_syn($13,8454,$vararg_buffer);
  // unreachable;
 }
 $14 = ((($8)) + 14|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(0);
 if (!($16)) {
  _error_forward_decl_keyword($0,20);
 }
 $17 = ((($0)) + 80|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$2>>2] = 0;
 $23 = ((($4)) + 40|0);
 $24 = ((($0)) + 92|0);
 $25 = ((($4)) + 12|0);
 $26 = ((($0)) + 92|0);
 $27 = ((($0)) + 92|0);
 $28 = $22&65535;
 $29 = ((($0)) + 92|0);
 L7: while(1) {
  $30 = HEAP32[$23>>2]|0;
  $31 = ($30|0)==(32);
  if ($31) {
   _collect_import_refs($0,$2);
   $$pr = HEAP32[$23>>2]|0;
   $32 = $$pr;
  } else {
   $32 = $30;
  }
  switch ($32|0) {
  case 40:  {
   _lily_lexer_verify_path_string($4);
   break;
  }
  case 38:  {
   break;
  }
  default: {
   label = 10;
   break L7;
  }
  }
  $34 = HEAP32[$25>>2]|0;
  $35 = (_strrchr($34,47)|0);
  $36 = ($35|0)==(0|0);
  $37 = ((($35)) + 1|0);
  $$ = $36 ? $34 : $37;
  $38 = (_lily_find_module($18,$20,$$)|0);
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   label = 12;
   break;
  }
  if ($36) {
   $41 = HEAP32[$25>>2]|0;
   $42 = (_lily_find_registered_module($18,$41)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    label = 15;
   } else {
    $$1 = $42;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   $44 = HEAP32[$25>>2]|0;
   $45 = (_load_module($0,$44)|0);
   $46 = ((($45)) + 6|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47&65535;
   $49 = $48 & 2;
   $50 = ($49|0)==(0);
   if ($50) {
    $$1 = $45;
   } else {
    $51 = $48 & 65533;
    $52 = $51&65535;
    HEAP16[$46>>1] = $52;
    _run_loaded_module($0,$45);
    $$1 = $45;
   }
  }
  $53 = HEAP32[$3>>2]|0;
  _lily_lexer($53);
  $54 = HEAP32[$23>>2]|0;
  $55 = ($54|0)==(38);
  if ($55) {
   $56 = HEAP32[$25>>2]|0;
   $57 = (_strcmp($56,8590)|0);
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = HEAP32[$2>>2]|0;
    $60 = ($59|0)==(0);
    if (!($60)) {
     label = 20;
     break;
    }
    _lily_lexer($4);
    $62 = HEAP32[$23>>2]|0;
    $63 = ($62|0)==(38);
    if (!($63)) {
     label = 22;
     break;
    }
    $68 = HEAP32[$25>>2]|0;
    _link_module_to($20,$$1,$68);
    _lily_lexer($4);
   } else {
    label = 24;
   }
  } else {
   label = 24;
  }
  do {
   if ((label|0) == 24) {
    label = 0;
    $69 = HEAP32[$2>>2]|0;
    $70 = ($69|0)==(0);
    if ($70) {
     _link_module_to($20,$$1,0);
     break;
    } else {
     _link_import_syms($0,$$1,$28,$69);
     HEAP32[$21>>2] = $22;
     HEAP32[$2>>2] = 0;
     break;
    }
   }
  } while(0);
  $71 = HEAP32[$23>>2]|0;
  $72 = ($71|0)==(1);
  if (!($72)) {
   label = 29;
   break;
  }
  $73 = HEAP32[$3>>2]|0;
  _lily_lexer($73);
 }
 if ((label|0) == 10) {
  $33 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $32;
  _lily_raise_syn($33,8481,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 12) {
  $40 = HEAP32[$29>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $$;
  _lily_raise_syn($40,8538,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $61 = HEAP32[$27>>2]|0;
  _lily_raise_syn($61,8593,$vararg_buffer6);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $64 = HEAP32[$26>>2]|0;
  $65 = (_tokname(38)|0);
  $66 = HEAP32[$23>>2]|0;
  $67 = (_tokname($66)|0);
  HEAP32[$vararg_buffer8>>2] = $65;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $67;
  _lily_raise_syn($64,6220,$vararg_buffer8);
  // unreachable;
 }
 else if ((label|0) == 29) {
  STACKTOP = sp;return;
 }
}
function _keyword_forward($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($0,21);
 return;
}
function _keyword_private($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($0,22);
 return;
}
function _keyword_protected($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _parse_modifier($0,23);
 return;
}
function _keyword_continue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_emit_continue($3);
 $4 = ($1|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (_code_is_after_exit($0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_raise_syn($8,7489,$vararg_buffer);
  // unreachable;
 }
}
function _code_is_after_exit($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 38:  {
  label = 2;
  break;
 }
 case 3: case 61: case 62:  {
  $$1 = 0;
  return ($$1|0);
  break;
 }
 default: {
 }
 }
 L3: do {
  if ((label|0) == 2) {
   $5 = ((($2)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_keyword_by_name($6)|0);
   switch ($7|0) {
   case 5: case 6: case 7: case 19:  {
    $$1 = 0;
    break;
   }
   default: {
    break L3;
   }
   }
   return ($$1|0);
  }
 } while(0);
 $$1 = 1;
 return ($$1|0);
}
function _parse_modifier($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$069 = 0, $$070 = 0, $$1 = 0, $$272 = 0, $$375 = 0, $$73 = 0, $$74 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr16 = 0, $vararg_ptr25 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(21);
 do {
  if ($4) {
   $5 = ((($0)) + 76|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 56|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 13|0);
   $10 = HEAP8[$9>>0]|0;
   switch ($10<<24>>24) {
   case 12: case 14:  {
    break;
   }
   default: {
    $11 = ((($0)) + 92|0);
    $12 = HEAP32[$11>>2]|0;
    _lily_raise_syn($12,7537,$vararg_buffer);
    // unreachable;
   }
   }
   $13 = ((($3)) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(38);
   if ($15) {
    $21 = ((($3)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_keyword_by_name($22)|0);
    $$0 = $23;$$070 = 1024;
    break;
   } else {
    $16 = ((($0)) + 92|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_tokname(38)|0);
    $19 = HEAP32[$13>>2]|0;
    $20 = (_tokname($19)|0);
    HEAP32[$vararg_buffer1>>2] = $18;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $20;
    _lily_raise_syn($17,6220,$vararg_buffer1);
    // unreachable;
   }
  } else {
   $$0 = $1;$$070 = 0;
  }
 } while(0);
 $24 = ($$0|0)==(14);
 $25 = ($$0|0)==(23);
 L10: do {
  switch ($$0|0) {
  case 14: case 22: case 23:  {
   $26 = ((($0)) + 76|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 56|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 13|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(12);
   if (!($32)) {
    $33 = ((($0)) + 92|0);
    $34 = ($$0|0)==(22);
    $$73 = $34 ? 16862 : 5660;
    $$069 = $25 ? 16870 : $$73;
    $35 = HEAP32[$33>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $$069;
    _lily_raise_syn($35,7601,$vararg_buffer4);
    // unreachable;
   }
   $$74 = $25 ? 8 : 4;
   $$sink = $24 ? 65536 : $$74;
   $36 = $$sink | $$070;
   $37 = ($$070|0)==(0);
   if (!($37)) {
    _lily_lexer($3);
   }
   $38 = ((($3)) + 40|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(38);
   if ($40) {
    $46 = ((($3)) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_keyword_by_name($47)|0);
    $$1 = $48;$$272 = $36;
    break L10;
   } else {
    $41 = ((($0)) + 92|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (_tokname(38)|0);
    $44 = HEAP32[$38>>2]|0;
    $45 = (_tokname($44)|0);
    HEAP32[$vararg_buffer7>>2] = $43;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $45;
    _lily_raise_syn($42,6220,$vararg_buffer7);
    // unreachable;
   }
   break;
  }
  default: {
   $49 = ($$070|0)==(0);
   if ($49) {
    $$1 = $$0;$$272 = 0;
   } else {
    $50 = ((($0)) + 76|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 56|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($53)) + 13|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = ($55<<24>>24)==(12);
    if ($56) {
     $57 = ((($0)) + 92|0);
     $58 = HEAP32[$57>>2]|0;
     _lily_raise_syn($58,7627,$vararg_buffer11);
     // unreachable;
    } else {
     $$1 = $$0;$$272 = $$070;
    }
   }
  }
  }
 } while(0);
 switch ($$1|0) {
 case 15:  {
  $59 = $$272 | 512;
  _lily_lexer($3);
  $60 = ((($3)) + 40|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(38);
  if (!($62)) {
   $63 = ((($0)) + 92|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (_tokname(38)|0);
   $66 = HEAP32[$60>>2]|0;
   $67 = (_tokname($66)|0);
   HEAP32[$vararg_buffer13>>2] = $65;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $67;
   _lily_raise_syn($64,6220,$vararg_buffer13);
   // unreachable;
  }
  $68 = ((($3)) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (_keyword_by_name($69)|0);
  $71 = ($70|0)==(17);
  if ($71) {
   $$375 = $59;
  } else {
   $72 = ((($0)) + 92|0);
   $73 = HEAP32[$72>>2]|0;
   HEAP32[$vararg_buffer17>>2] = $69;
   _lily_raise_syn($73,7677,$vararg_buffer17);
   // unreachable;
  }
  break;
 }
 case 2:  {
  $74 = $$272 & 1024;
  $75 = ($74|0)==(0);
  if (!($75)) {
   $76 = ((($0)) + 92|0);
   $77 = HEAP32[$76>>2]|0;
   _lily_raise_syn($77,7726,$vararg_buffer20);
   // unreachable;
  }
  _lily_lexer($3);
  _parse_var($0,$$272);
  STACKTOP = sp;return;
  break;
 }
 case 17:  {
  $$375 = $$272;
  break;
 }
 default: {
  $78 = $$272 & 1024;
  $79 = ($78|0)!=(0);
  $$ = $79 ? 7759 : 7768;
  $80 = ((($0)) + 92|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($3)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  HEAP32[$vararg_buffer22>>2] = $$;
  $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
  HEAP32[$vararg_ptr25>>2] = $83;
  _lily_raise_syn($81,7793,$vararg_buffer22);
  // unreachable;
 }
 }
 _lily_lexer($3);
 _parse_define($0,$$375);
 STACKTOP = sp;return;
}
function _parse_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$050 = 0, $$051 = 0, $$052 = 0, $$pr53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 13|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(12);
 do {
  if ($10) {
   $11 = ($1|0)==(0);
   if ($11) {
    $12 = ((($0)) + 92|0);
    $13 = HEAP32[$12>>2]|0;
    _lily_raise_syn($13,8146,$vararg_buffer);
    // unreachable;
   } else {
    $14 = $1 & -65537;
    $$0 = $14;$$050 = 38;$$051 = 39;
    break;
   }
  } else {
   $$0 = $1;$$050 = 39;$$051 = 38;
  }
 } while(0);
 $15 = ((($7)) + 14|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(0);
 if (!($17)) {
  _error_forward_decl_keyword($0,2);
 }
 $18 = $$0 | 1;
 $19 = ((($0)) + 36|0);
 $20 = ((($3)) + 40|0);
 $21 = ((($0)) + 92|0);
 $22 = ((($0)) + 92|0);
 while(1) {
  $23 = HEAP32[$19>>2]|0;
  _lily_es_flush($23);
  $24 = HEAP32[$20>>2]|0;
  $25 = ($24|0)==($$050|0);
  if ($25) {
   _bad_decl_token($0);
  }
  $26 = HEAP32[$20>>2]|0;
  $27 = ($26|0)==($$051|0);
  if (!($27)) {
   label = 11;
   break;
  }
  $32 = ($26|0)==(38);
  do {
   if ($32) {
    $33 = (_get_named_var($0)|0);
    $34 = ((($33)) + 6|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35 | 1;
    HEAP16[$34>>1] = $36;
    $37 = $35 & 128;
    $38 = ($37<<16>>16)==(0);
    $39 = HEAP32[$19>>2]|0;
    if ($38) {
     _lily_es_push_local_var($39,$33);
     $$052 = $33;
     break;
    } else {
     _lily_es_push_global_var($39,$33);
     $$052 = $33;
     break;
    }
   } else {
    $40 = (_get_named_property($0,$18)|0);
    $41 = HEAP32[$19>>2]|0;
    _lily_es_push_property($41,$40);
    $$052 = $40;
   }
  } while(0);
  $42 = HEAP32[$20>>2]|0;
  $43 = ($42|0)==(5);
  if ($43) {
   _lily_lexer($3);
   $44 = (_get_type_raw($0,0)|0);
   $45 = ((($$052)) + 12|0);
   HEAP32[$45>>2] = $44;
   $$pr53 = HEAP32[$20>>2]|0;
   $46 = $$pr53;
  } else {
   $46 = $42;
  }
  $47 = ($46|0)==(30);
  if (!($47)) {
   label = 20;
   break;
  }
  $49 = HEAP32[$19>>2]|0;
  _lily_es_push_binary_op($49,23);
  _lily_lexer($3);
  _expression_raw($0);
  $50 = HEAP32[$4>>2]|0;
  $51 = HEAP32[$19>>2]|0;
  _lily_emit_eval_expr($50,$51);
  $52 = HEAP32[$20>>2]|0;
  $53 = ($52|0)==(1);
  if (!($53)) {
   label = 23;
   break;
  }
  _lily_lexer($3);
 }
 if ((label|0) == 11) {
  $28 = HEAP32[$22>>2]|0;
  $29 = (_tokname($$051)|0);
  $30 = HEAP32[$20>>2]|0;
  $31 = (_tokname($30)|0);
  HEAP32[$vararg_buffer1>>2] = $29;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $31;
  _lily_raise_syn($28,6220,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $48 = HEAP32[$21>>2]|0;
  _lily_raise_syn($48,8193,$vararg_buffer4);
  // unreachable;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _parse_define($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 switch ($7<<24>>24) {
 case 10: case 12: case 11: case 14:  {
  break;
 }
 default: {
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_raise_syn($9,7820,$vararg_buffer);
  // unreachable;
 }
 }
 $10 = HEAP8[$6>>0]|0;
 $11 = ($10<<24>>24)==(12);
 $12 = $1 & 65548;
 $13 = ($12|0)==(0);
 $or$cond = $13 & $11;
 if ($or$cond) {
  $14 = ((($0)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  _lily_raise_syn($15,7851,$vararg_buffer1);
  // unreachable;
 }
 $16 = $1 & -65537;
 $17 = ((($0)) + 72|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_lily_gp_save($20)|0);
 _parse_define_header($0,$16);
 $22 = ((($18)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(2);
 if (!($24)) {
  $25 = ((($0)) + 92|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_tokname(2)|0);
  $28 = HEAP32[$22>>2]|0;
  $29 = (_tokname($28)|0);
  HEAP32[$vararg_buffer3>>2] = $27;
  $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $29;
  _lily_raise_syn($26,6220,$vararg_buffer3);
  // unreachable;
 }
 $30 = $1 & 1024;
 $31 = ($30|0)==(0);
 if ($31) {
  _parse_multiline_block_body($0,1);
  _hide_block_vars($0);
  $32 = HEAP32[$2>>2]|0;
  $33 = ((($18)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34&65535;
  _lily_emit_leave_call_block($32,$35);
  $51 = HEAP32[$19>>2]|0;
  _lily_gp_restore($51,$21);
  STACKTOP = sp;return;
 }
 _lily_lexer($18);
 $36 = HEAP32[$22>>2]|0;
 $37 = ($36|0)==(55);
 if (!($37)) {
  $38 = ((($0)) + 92|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_tokname(55)|0);
  $41 = HEAP32[$22>>2]|0;
  $42 = (_tokname($41)|0);
  HEAP32[$vararg_buffer6>>2] = $40;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $42;
  _lily_raise_syn($39,6220,$vararg_buffer6);
  // unreachable;
 }
 _lily_lexer($18);
 $43 = HEAP32[$22>>2]|0;
 $44 = ($43|0)==(3);
 if (!($44)) {
  $45 = ((($0)) + 92|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_tokname(3)|0);
  $48 = HEAP32[$22>>2]|0;
  $49 = (_tokname($48)|0);
  HEAP32[$vararg_buffer10>>2] = $47;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $49;
  _lily_raise_syn($46,6220,$vararg_buffer10);
  // unreachable;
 }
 _lily_lexer($18);
 _hide_block_vars($0);
 $50 = HEAP32[$2>>2]|0;
 _lily_emit_leave_forward_call($50);
 $51 = HEAP32[$19>>2]|0;
 _lily_gp_restore($51,$21);
 STACKTOP = sp;return;
}
function _parse_define_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$067 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(38);
 if (!($6)) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(38)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6220,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($0)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 13|0);
 $17 = HEAP8[$16>>0]|0;
 switch ($17<<24>>24) {
 case 10: case 12:  {
  $18 = ((($0)) + 60|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $$0 = $21;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 $22 = ((($3)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_find_existing_define($0,$$0,$23,$1)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  $33 = $1 << 9;
  $34 = $33 & 524288;
  $35 = $34 ^ 524288;
  $36 = (($35) + 524288)|0;
  $37 = HEAP32[$22>>2]|0;
  $38 = ((($3)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39&65535;
  $41 = (_new_native_define_var($0,$$0,$37,$40)|0);
  $$067 = $41;$$1 = $36;
 } else {
  $26 = ((($24)) + 6|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 & 524;
  $29 = $28&65535;
  $30 = $1 & 524;
  $31 = ($29|0)==($30|0);
  if (!($31)) {
   _error_forward_decl_modifiers($0,$24);
  }
  $32 = HEAP32[$12>>2]|0;
  _lily_emit_resolve_forward_decl($32,$24);
  $$067 = $24;$$1 = 1048576;
 }
 $42 = ((($$067)) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $44 | $1;
 $46 = $45 | 1;
 $47 = $46&65535;
 HEAP16[$42>>1] = $47;
 $48 = ((($0)) + 88|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[628]|0;
 _lily_tm_add($49,$50);
 _lily_lexer($3);
 _collect_generics($0);
 $51 = HEAP32[$12>>2]|0;
 _lily_emit_enter_call_block($51,11,$$067);
 $52 = ($$0|0)==(0|0);
 if (!($52)) {
  $53 = HEAP16[$42>>1]|0;
  $54 = $53 & 512;
  $55 = ($54<<16>>16)==(0);
  if ($55) {
   $56 = HEAP32[$48>>2]|0;
   $57 = ((($0)) + 60|0);
   $58 = HEAP32[$57>>2]|0;
   _lily_tm_add($56,$58);
   $59 = HEAP32[$57>>2]|0;
   $60 = ((($3)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61&65535;
   $63 = (_new_local_var($0,$59,8034,$62)|0);
   $64 = HEAP32[$12>>2]|0;
   $65 = ((($64)) + 56|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($66)) + 36|0);
   HEAP32[$67>>2] = $63;
  }
 }
 _collect_call_args($0,$$067,$$1);
 $68 = HEAP32[$4>>2]|0;
 $69 = ($68|0)==(2);
 if (!($69)) {
  $70 = ((($0)) + 92|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_tokname(2)|0);
  $73 = HEAP32[$4>>2]|0;
  $74 = (_tokname($73)|0);
  HEAP32[$vararg_buffer2>>2] = $72;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $74;
  _lily_raise_syn($71,6220,$vararg_buffer2);
  // unreachable;
 }
 $75 = ((($$067)) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 6|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = $78 & 4;
 $80 = ($79<<16>>16)!=(0);
 $81 = ($$1|0)!=(524288);
 $or$cond3 = $81 & $80;
 if (!($or$cond3)) {
  $82 = HEAP16[$42>>1]|0;
  $83 = $82 & -2;
  HEAP16[$42>>1] = $83;
  STACKTOP = sp;return;
 }
 _send_optargs_for($0,$$067);
 $82 = HEAP16[$42>>1]|0;
 $83 = $82 & -2;
 HEAP16[$42>>1] = $83;
 STACKTOP = sp;return;
}
function _parse_multiline_block_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 if ($4) {
  $5 = ((($0)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_raise_syn($6,7901,$vararg_buffer);
  // unreachable;
 }
 _lily_lexer($3);
 $7 = ((($3)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  _lily_lexer($3);
  STACKTOP = sp;return;
 }
 _statement($0,1);
 $$pr = HEAP32[$7>>2]|0;
 $10 = ($$pr|0)==(3);
 if ($10) {
  _lily_lexer($3);
  STACKTOP = sp;return;
 } else {
  $11 = ((($0)) + 92|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(3)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer1>>2] = $13;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $15;
  _lily_raise_syn($12,6220,$vararg_buffer1);
  // unreachable;
 }
}
function _statement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = ((($3)) + 12|0);
 $6 = ((($0)) + 76|0);
 $7 = ((($0)) + 36|0);
 $8 = ($1|0)==(0);
 $9 = ((($0)) + 76|0);
 $10 = ((($0)) + 36|0);
 L1: while(1) {
  $11 = HEAP32[$4>>2]|0;
  L3: do {
   switch ($11|0) {
   case 38:  {
    $12 = HEAP32[$5>>2]|0;
    $13 = (_keyword_by_name($12)|0);
    $14 = ($13|0)==(-1);
    if ($14) {
     _expression($0);
     $17 = HEAP32[$6>>2]|0;
     $18 = HEAP32[$7>>2]|0;
     _lily_emit_eval_expr($17,$18);
     break L3;
    } else {
     _lily_lexer($3);
     $15 = (1912 + ($13<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     FUNCTION_TABLE_vii[$16 & 63]($0,$1);
     break L3;
    }
    break;
   }
   case 4: case 32: case 34: case 39: case 40: case 41: case 42: case 43: case 44:  {
    _expression($0);
    $19 = HEAP32[$9>>2]|0;
    $20 = HEAP32[$10>>2]|0;
    _lily_emit_eval_expr($19,$20);
    break;
   }
   case 45:  {
    _process_docstring($0);
    break;
   }
   default: {
    break L1;
   }
   }
  } while(0);
  if ($8) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $21 = ($1|0)==(0);
 if ($21) {
  $22 = ((($0)) + 92|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $24;
  _lily_raise_syn($23,7944,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _process_docstring($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 _lily_lexer($2);
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(38);
 L1: do {
  if ($5) {
   $6 = ((($2)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_keyword_by_name($7)|0);
   switch ($8|0) {
   case 13: case 17: case 22: case 23:  {
    break;
   }
   default: {
    break L1;
   }
   }
   _lily_lexer($2);
   $9 = (1912 + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   FUNCTION_TABLE_vii[$10 & 63]($0,1);
   STACKTOP = sp;return;
  }
 } while(0);
 $11 = ((($0)) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 _lily_raise_syn($12,7972,$vararg_buffer);
 // unreachable;
}
function _find_existing_define($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_find_var($5,0,$2)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _verify_existing_decl($0,$6,$3);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$1 = $6;
  STACKTOP = sp;return ($$1|0);
 }
 $9 = (_lily_find_member($1,$2,0)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$1 = $6;
  STACKTOP = sp;return ($$1|0);
 }
 $11 = ((($9)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ($12<<16>>16)==(1);
 if (!($13)) {
  $14 = ((($0)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($1)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $2;
  _lily_raise_syn($15,7194,$vararg_buffer);
  // unreachable;
 }
 $18 = ((($9)) + 6|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19 & 1024;
 $21 = ($20<<16>>16)==(0);
 if ($21) {
  $22 = ((($0)) + 92|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($1)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $25;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $2;
  _lily_raise_syn($23,7144,$vararg_buffer2);
  // unreachable;
 }
 _verify_existing_decl($0,$9,$3);
 $$1 = $9;
 STACKTOP = sp;return ($$1|0);
}
function _error_forward_decl_modifiers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_mb_flush($3)|0);
 $5 = ((($0)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_emit_proto_for_var($6,$1)|0);
 $8 = ((($1)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($7)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer>>2] = $11;
 _lily_mb_add_fmt($4,8041,$vararg_buffer);
 $12 = HEAP16[$8>>1]|0;
 $13 = $12&65535;
 $14 = $13 & 4;
 $15 = ($14|0)==(0);
 do {
  if ($15) {
   $16 = $13 & 8;
   $17 = ($16|0)==(0);
   if ($17) {
    _lily_mb_add($4,5660);
    break;
   } else {
    _lily_mb_add($4,16870);
    break;
   }
  } else {
   _lily_mb_add($4,16862);
  }
 } while(0);
 $18 = $9 & 512;
 $19 = ($18<<16>>16)==(0);
 if (!($19)) {
  _lily_mb_add($4,8090);
 }
 _lily_mb_add($4,8098);
 $20 = ((($0)) + 92|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_lily_mb_raw($4)|0);
 _lily_raise_syn($21,$22,$vararg_buffer1);
 // unreachable;
}
function _new_local_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_make_new_var($1,$2,$3)|0);
 $5 = ((($0)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 62|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ((($4)) + 36|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$5>>2]|0;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15&65535;
 $17 = ((($4)) + 8|0);
 HEAP16[$17>>1] = $16;
 $18 = HEAP32[$5>>2]|0;
 $19 = ((($18)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$21>>2] = $23;
 $24 = ((($0)) + 80|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$4>>2] = $29;
 $30 = HEAP32[$24>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 32|0);
 HEAP32[$33>>2] = $4;
 $34 = HEAP32[$5>>2]|0;
 $35 = ((($34)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 10|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = (($38) + 1)<<16>>16;
 HEAP16[$37>>1] = $39;
 return ($4|0);
}
function _send_optargs_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$025 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_emit_proto_for_var($5,$1)|0);
 $7 = (_lily_func_type_num_optargs($3)|0);
 $8 = ((($6)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = HEAP32[$4>>2]|0;
  _lily_emit_write_keyless_optarg_header($11,$3);
  $$025 = 43;
 } else {
  $$025 = 42;
 }
 $12 = ((($0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 _lily_es_checkpoint_save($13);
 $14 = HEAP32[$12>>2]|0;
 _lily_es_checkpoint_reverse_n($14,$7);
 $15 = ($7|0)>(0);
 $16 = HEAP32[$12>>2]|0;
 _lily_es_checkpoint_restore($16);
 if ($15) {
  $$026 = 0;
 } else {
  return;
 }
 while(1) {
  $17 = HEAP32[$4>>2]|0;
  $18 = HEAP32[$12>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$$025 & 63]($17,$19);
  $20 = (($$026) + 1)|0;
  $21 = HEAP32[$12>>2]|0;
  _lily_es_checkpoint_restore($21);
  $exitcond = ($20|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$026 = $20;
  }
 }
 return;
}
function _verify_existing_decl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 & 1024;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $7 = ((($0)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_lily_emit_proto_for_var($8,$1)|0);
  $10 = ((($0)) + 92|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($9)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  _lily_raise_syn($11,7389,$vararg_buffer);
  // unreachable;
 }
 $14 = $2 & 1024;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 } else {
  $16 = ((($0)) + 92|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($1)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $19;
  _lily_raise_syn($17,8101,$vararg_buffer1);
  // unreachable;
 }
}
function _error_forward_decl_keyword($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_mb_flush($3)|0);
 $5 = ($1|0)==(2);
 if ($5) {
  $6 = ((($0)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 13|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(12);
  $$ = $12 ? 8330 : 8355;
  $$0 = $$;
 } else {
  $$0 = 8376;
 }
 HEAP32[$vararg_buffer>>2] = $$0;
 _lily_mb_add_fmt($4,8389,$vararg_buffer);
 _add_unresolved_defines_to_msgbuf($0,$4);
 $13 = ((($0)) + 92|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_lily_mb_raw($4)|0);
 _lily_raise_syn($14,$15,$vararg_buffer1);
 // unreachable;
}
function _bad_decl_token($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(38);
 $$ = $5 ? 8240 : 8276;
 $6 = ((($0)) + 92|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_raise_syn($7,$$,$vararg_buffer);
 // unreachable;
}
function _get_named_var($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_find_var($4,0,$6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $12 = HEAP32[$5>>2]|0;
  $13 = ((($2)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14&65535;
  $16 = (_new_scoped_var($0,$12,$15)|0);
  _lily_lexer($2);
  STACKTOP = sp;return ($16|0);
 } else {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  _lily_raise_syn($10,7389,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _add_unresolved_defines_to_msgbuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02124 = 0, $$022 = 0, $$022$in$ph = 0, $$02223 = 0, $$02225 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 14|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($0)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($5)) + 13|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(14);
 if ($15) {
  $16 = ((($12)) + 32|0);
  $$022$in$ph = $16;
 } else {
  $17 = ((($12)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 36|0);
  $$022$in$ph = $19;
 }
 $$02223 = HEAP32[$$022$in$ph>>2]|0;
 $20 = ($$02223|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return;
 } else {
  $$02124 = $8;$$02225 = $$02223;
 }
 while(1) {
  $21 = ((($$02225)) + 6|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 & 1024;
  $24 = ($23<<16>>16)==(0);
  if ($24) {
   $$2 = $$02124;
  } else {
   $25 = HEAP32[$2>>2]|0;
   $26 = (_lily_emit_proto_for_var($25,$$02225)|0);
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($$02225)) + 32|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$vararg_buffer>>2] = $28;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $30;
   _lily_mb_add_fmt($1,8437,$vararg_buffer);
   $31 = ($$02124|0)==(1);
   $32 = (($$02124) + -1)|0;
   if ($31) {
    label = 8;
    break;
   } else {
    $$2 = $32;
   }
  }
  $$022 = HEAP32[$$02225>>2]|0;
  $33 = ($$022|0)==(0|0);
  if ($33) {
   label = 8;
   break;
  } else {
   $$02124 = $$2;$$02225 = $$022;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _collect_import_refs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 HEAP16[$2>>1] = $7;
 $8 = ((($4)) + 40|0);
 $9 = ((($0)) + 48|0);
 $10 = ((($4)) + 12|0);
 $11 = ((($0)) + 92|0);
 $12 = ((($0)) + 92|0);
 L1: while(1) {
  _lily_lexer($4);
  $13 = HEAP32[$8>>2]|0;
  $14 = ($13|0)==(38);
  if (!($14)) {
   label = 3;
   break;
  }
  $19 = HEAP32[$9>>2]|0;
  $20 = HEAP32[$10>>2]|0;
  _lily_sp_insert($19,$20,$2);
  $21 = HEAP16[$2>>1]|0;
  $22 = $21&65535;
  HEAP32[$5>>2] = $22;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$1>>2] = $24;
  _lily_lexer($4);
  $25 = HEAP32[$8>>2]|0;
  switch ($25|0) {
  case 1:  {
   break;
  }
  case 0:  {
   label = 6;
   break L1;
   break;
  }
  default: {
   label = 5;
   break L1;
  }
  }
 }
 if ((label|0) == 3) {
  $15 = HEAP32[$12>>2]|0;
  $16 = (_tokname(38)|0);
  $17 = HEAP32[$8>>2]|0;
  $18 = (_tokname($17)|0);
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  _lily_raise_syn($15,6220,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 5) {
  $26 = HEAP32[$11>>2]|0;
  $27 = (_tokname($25)|0);
  HEAP32[$vararg_buffer2>>2] = $27;
  _lily_raise_syn($26,5928,$vararg_buffer2);
  // unreachable;
 }
 else if ((label|0) == 6) {
  _lily_lexer($4);
  STACKTOP = sp;return;
 }
}
function _load_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$04042 = 0, $$41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 $$ = $13 ? 19327 : $11;
 $14 = HEAP8[$7>>0]|0;
 $15 = ($14<<24>>24)==(0);
 $$41 = $15 ? 19327 : $7;
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_u16_write_1($17,0);
 $18 = ((($0)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 96|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 84|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viiii[$22 & 3]($24,$$,$$41,$1);
 $25 = HEAP32[$18>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $48 = HEAP32[$16>>2]|0;
  $49 = ((($48)) + 4|0);
  HEAP32[$49>>2] = 0;
  $50 = HEAP32[$18>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $27 = ((($0)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_lily_mb_flush($28)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 _lily_mb_add_fmt($29,8867,$vararg_buffer);
 HEAP32[$vararg_buffer1>>2] = $1;
 _lily_mb_add_fmt($29,8888,$vararg_buffer1);
 $30 = HEAP32[$16>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(1);
 if ($33) {
  $45 = ((($0)) + 92|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_lily_mb_raw($29)|0);
  _lily_raise_syn($46,$47,$vararg_buffer7);
  // unreachable;
 }
 $34 = ((($0)) + 44|0);
 $$04042 = 0;
 while(1) {
  $35 = HEAP32[$30>>2]|0;
  $36 = (($35) + ($$04042<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = HEAP32[$34>>2]|0;
  $39 = $37&65535;
  $40 = (_lily_sp_get($38,$39)|0);
  HEAP32[$vararg_buffer4>>2] = $40;
  _lily_mb_add_fmt($29,8918,$vararg_buffer4);
  $41 = (($$04042) + 1)|0;
  $42 = HEAP32[$31>>2]|0;
  $43 = (($42) + -1)|0;
  $44 = ($41>>>0)<($43>>>0);
  if ($44) {
   $$04042 = $41;
  } else {
   break;
  }
 }
 $45 = ((($0)) + 92|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_lily_mb_raw($29)|0);
 _lily_raise_syn($46,$47,$vararg_buffer7);
 // unreachable;
 return (0)|0;
}
function _run_loaded_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $1;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 $11 = (_new_native_define_var($0,0,8780,$10)|0);
 $12 = ((($0)) + 68|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($11)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 76|0);
 $16 = HEAP32[$15>>2]|0;
 _lily_emit_enter_call_block($16,14,$11);
 _lily_lexer($7);
 _statement($0,1);
 $17 = ((($7)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 switch ($18|0) {
 case 3:  {
  $19 = ((($0)) + 92|0);
  $20 = HEAP32[$19>>2]|0;
  _lily_raise_syn($20,18084,$vararg_buffer);
  // unreachable;
  break;
 }
 case 61:  {
  $21 = ((($0)) + 92|0);
  $22 = HEAP32[$21>>2]|0;
  _lily_raise_syn($22,8791,$vararg_buffer1);
  // unreachable;
  break;
 }
 default: {
  $23 = HEAP32[$15>>2]|0;
  $24 = ((($23)) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 14|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = ($27<<16>>16)==(0);
  if (!($28)) {
   _error_forward_decl_pending($0);
  }
  $29 = HEAP32[$15>>2]|0;
  $30 = HEAP32[$8>>2]|0;
  $31 = $30&65535;
  _lily_emit_leave_call_block($29,$31);
  $32 = HEAP32[$6>>2]|0;
  _lily_pop_lex_entry($32);
  $33 = HEAP32[$15>>2]|0;
  _lily_emit_write_import_call($33,$11);
  $34 = HEAP32[$2>>2]|0;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $5;
  STACKTOP = sp;return;
 }
 }
}
function _link_module_to($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(12)|0);
 $4 = ($2|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_strlen($2)|0);
  $6 = (($5) + 1)|0;
  $7 = (_lily_malloc($6)|0);
  (_strcpy($7,$2)|0);
  $$0 = $7;
 }
 HEAP32[$3>>2] = $1;
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($3)) + 4|0);
 HEAP32[$11>>2] = $$0;
 HEAP32[$8>>2] = $3;
 return;
}
function _link_import_syms($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$032 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 48|0);
 $9 = ((($0)) + 92|0);
 $10 = ((($1)) + 12|0);
 $11 = ((($0)) + 92|0);
 $12 = ((($0)) + 92|0);
 $$0 = $2;$$032 = $3;
 while(1) {
  $13 = HEAP32[$8>>2]|0;
  $14 = $$0&65535;
  $15 = (_lily_sp_get($13,$14)|0);
  $16 = (_find_existing_sym($0,$7,$15)|0);
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   label = 3;
   break;
  }
  $19 = (_find_existing_sym($0,$1,$15)|0);
  $20 = ($19|0)==(0|0);
  if ($20) {
   label = 5;
   break;
  }
  $23 = ((($19)) + 4|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = ($24<<16>>16)==(5);
  if ($25) {
   label = 7;
   break;
  }
  _lily_add_symbol_ref($7,$19);
  $27 = (_strlen($15)|0);
  $28 = (($14) + 1)|0;
  $29 = (($28) + ($27))|0;
  $30 = $29&65535;
  $31 = (($$032) + -1)|0;
  $32 = ($31|0)==(0);
  if ($32) {
   label = 9;
   break;
  } else {
   $$0 = $30;$$032 = $31;
  }
 }
 if ((label|0) == 3) {
  $18 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  _lily_raise_syn($18,8654,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 5) {
  $21 = HEAP32[$9>>2]|0;
  $22 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $15;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  _lily_raise_syn($21,8686,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $26 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $15;
  _lily_raise_syn($26,8733,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _find_existing_sym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_find_var($4,$1,$2)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_lily_find_class($4,$1,$2)|0);
  $$0 = $7;
 } else {
  $$0 = $5;
 }
 $8 = ($$0|0)==(0|0);
 if (!($8)) {
  $$2 = $$0;
  return ($$2|0);
 }
 $9 = (_lily_find_module($4,$1,$2)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $$2 = $9;
  return ($$2|0);
 }
 $11 = ((($1)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$2 = 0;
  return ($$2|0);
 }
 $14 = (_try_toplevel_dynaload($0,$1,$2)|0);
 $$2 = $14;
 return ($$2|0);
}
function _error_forward_decl_pending($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_lily_mb_flush($2)|0);
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 13|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(14);
 $$ = $10 ? 8814 : 5654;
 HEAP32[$vararg_buffer>>2] = $$;
 _lily_mb_add_fmt($3,8821,$vararg_buffer);
 _add_unresolved_defines_to_msgbuf($0,$3);
 $11 = ((($0)) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lily_mb_raw($3)|0);
 _lily_raise_syn($12,$13,$vararg_buffer1);
 // unreachable;
}
function _parse_enum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$096 = 0, $$097 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr24 = 0, $vararg_ptr3 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer27 = sp + 72|0;
 $vararg_buffer25 = sp + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(14);
 if (!($8)) {
  $9 = ((($0)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,9148,$vararg_buffer);
  // unreachable;
 }
 $11 = ((($0)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(38);
 if (!($15)) {
  $16 = ((($0)) + 92|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_tokname(38)|0);
  $19 = HEAP32[$13>>2]|0;
  $20 = (_tokname($19)|0);
  HEAP32[$vararg_buffer1>>2] = $18;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $20;
  _lily_raise_syn($17,6220,$vararg_buffer1);
  // unreachable;
 }
 $21 = ($1|0)==(1);
 if ($21) {
  $22 = ((($12)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strcmp($23,5625)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $26 = ((($0)) + 92|0);
   $27 = HEAP32[$26>>2]|0;
   _lily_raise_syn($27,9176,$vararg_buffer4);
   // unreachable;
  }
  _lily_lexer($12);
  $28 = HEAP32[$13>>2]|0;
  $29 = ($28|0)==(38);
  if (!($29)) {
   $30 = ((($0)) + 92|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_tokname(38)|0);
   $33 = HEAP32[$13>>2]|0;
   $34 = (_tokname($33)|0);
   HEAP32[$vararg_buffer6>>2] = $32;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $34;
   _lily_raise_syn($31,6220,$vararg_buffer6);
   // unreachable;
  }
 }
 $35 = ((($12)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 _ensure_valid_class($0,$36);
 $37 = ((($0)) + 80|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$35>>2]|0;
 $40 = (_lily_new_enum_class($38,$39)|0);
 $41 = ($1|0)==(0);
 if (!($41)) {
  $42 = ((($40)) + 6|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 | 1024;
  HEAP16[$42>>1] = $44;
 }
 $45 = ((($0)) + 52|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_lily_gp_save_and_hide($46)|0);
 _lily_lexer($12);
 _collect_generics($0);
 $48 = HEAP32[$45>>2]|0;
 $49 = (_lily_gp_num_in_scope($48)|0);
 $50 = $49&65535;
 $51 = ((($40)) + 42|0);
 HEAP16[$51>>1] = $50;
 $52 = HEAP32[$2>>2]|0;
 _lily_emit_enter_block($52,10);
 $53 = (_build_self_type($0,$40)|0);
 $54 = ((($0)) + 60|0);
 HEAP32[$54>>2] = $53;
 $55 = HEAP32[$13>>2]|0;
 $56 = ($55|0)==(2);
 if (!($56)) {
  $57 = ((($0)) + 92|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_tokname(2)|0);
  $60 = HEAP32[$13>>2]|0;
  $61 = (_tokname($60)|0);
  HEAP32[$vararg_buffer10>>2] = $59;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $61;
  _lily_raise_syn($58,6220,$vararg_buffer10);
  // unreachable;
 }
 _lily_lexer($12);
 $62 = ((($0)) + 92|0);
 $63 = ((($0)) + 92|0);
 $64 = ((($0)) + 92|0);
 $$096 = 0;
 L20: while(1) {
  $65 = HEAP32[$13>>2]|0;
  $66 = ($65|0)==(38);
  if (!($66)) {
   label = 16;
   break;
  }
  $71 = ($$096|0)==(0);
  if (!($71)) {
   $72 = HEAP32[$35>>2]|0;
   $73 = (_lily_find_variant($40,$72)|0);
   $74 = ($73|0)==(0|0);
   $or$cond = $41 & $74;
   if ($or$cond) {
    $75 = HEAP32[$37>>2]|0;
    $76 = HEAP32[$35>>2]|0;
    $77 = (_lily_find_class($75,0,$76)|0);
    $$097 = $77;
   } else {
    $$097 = $73;
   }
   $78 = ($$097|0)==(0|0);
   if (!($78)) {
    label = 21;
    break;
   }
  }
  $81 = HEAP32[$37>>2]|0;
  $82 = HEAP32[$35>>2]|0;
  $83 = (_lily_new_variant_class($81,$40,$82)|0);
  $84 = (($$096) + 1)|0;
  _lily_lexer($12);
  $85 = HEAP32[$13>>2]|0;
  $86 = ($85|0)==(32);
  if ($86) {
   _parse_variant_header($0,$83);
   $$pr = HEAP32[$13>>2]|0;
   $87 = $$pr;
  } else {
   $87 = $85;
  }
  switch ($87|0) {
  case 3:  {
   label = 30;
   break L20;
   break;
  }
  case 38:  {
   $88 = HEAP32[$35>>2]|0;
   $89 = HEAP8[$88>>0]|0;
   $90 = ($89<<24>>24)==(100);
   if ($90) {
    $91 = (_keyword_by_name($88)|0);
    $92 = ($91|0)==(17);
    if ($92) {
     label = 30;
     break L20;
    }
   }
   break;
  }
  default: {
  }
  }
  $93 = HEAP32[$13>>2]|0;
  $94 = ($93|0)==(1);
  if (!($94)) {
   label = 28;
   break;
  }
  _lily_lexer($12);
  $$096 = $84;
 }
 if ((label|0) == 16) {
  $67 = HEAP32[$64>>2]|0;
  $68 = (_tokname(38)|0);
  $69 = HEAP32[$13>>2]|0;
  $70 = (_tokname($69)|0);
  HEAP32[$vararg_buffer14>>2] = $68;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $70;
  _lily_raise_syn($67,6220,$vararg_buffer14);
  // unreachable;
 }
 else if ((label|0) == 21) {
  $79 = HEAP32[$63>>2]|0;
  $80 = HEAP32[$35>>2]|0;
  HEAP32[$vararg_buffer18>>2] = $80;
  _lily_raise_syn($79,9208,$vararg_buffer18);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $95 = HEAP32[$62>>2]|0;
  $96 = (_tokname(1)|0);
  $97 = HEAP32[$13>>2]|0;
  $98 = (_tokname($97)|0);
  HEAP32[$vararg_buffer21>>2] = $96;
  $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
  HEAP32[$vararg_ptr24>>2] = $98;
  _lily_raise_syn($95,6220,$vararg_buffer21);
  // unreachable;
 }
 else if ((label|0) == 30) {
  $99 = ($84|0)<(2);
  if ($99) {
   $100 = ((($0)) + 92|0);
   $101 = HEAP32[$100>>2]|0;
   _lily_raise_syn($101,9251,$vararg_buffer25);
   // unreachable;
  }
  $102 = $84&65535;
  $103 = ((($40)) + 44|0);
  HEAP16[$103>>1] = $102;
  $104 = HEAP32[$37>>2]|0;
  _lily_fix_enum_variant_ids($104,$40);
  $105 = HEAP32[$13>>2]|0;
  $106 = ($105|0)==(38);
  if (!($106)) {
   $115 = HEAP32[$2>>2]|0;
   _lily_emit_leave_block($115);
   HEAP32[$54>>2] = 0;
   $116 = HEAP32[$45>>2]|0;
   _lily_gp_restore_and_unhide($116,$47);
   _lily_lexer($12);
   STACKTOP = sp;return;
  }
  $107 = ((($0)) + 92|0);
  L47: while(1) {
   _lily_lexer($12);
   _keyword_define($0,1);
   $108 = HEAP32[$13>>2]|0;
   switch ($108|0) {
   case 3:  {
    label = 37;
    break L47;
    break;
   }
   case 38:  {
    break;
   }
   default: {
    label = 36;
    break L47;
   }
   }
   $109 = HEAP32[$35>>2]|0;
   $110 = (_keyword_by_name($109)|0);
   $111 = ($110|0)==(17);
   if (!($111)) {
    label = 36;
    break;
   }
  }
  if ((label|0) == 36) {
   $112 = HEAP32[$107>>2]|0;
   $113 = HEAP32[$13>>2]|0;
   $114 = (_tokname($113)|0);
   HEAP32[$vararg_buffer27>>2] = $114;
   _lily_raise_syn($112,9292,$vararg_buffer27);
   // unreachable;
  }
  else if ((label|0) == 37) {
   $115 = HEAP32[$2>>2]|0;
   _lily_emit_leave_block($115);
   HEAP32[$54>>2] = 0;
   $116 = HEAP32[$45>>2]|0;
   _lily_gp_restore_and_unhide($116,$47);
   _lily_lexer($12);
   STACKTOP = sp;return;
  }
 }
}
function _ensure_valid_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = ((($0)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise_syn($6,9328,$vararg_buffer);
  // unreachable;
 }
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 13|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(14);
 if (!($13)) {
  $14 = ((($0)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  _lily_raise_syn($15,9372,$vararg_buffer1);
  // unreachable;
 }
 $16 = ((($0)) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_lily_find_class($17,0,$1)|0);
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = ((($0)) + 92|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $1;
  _lily_raise_syn($21,9401,$vararg_buffer3);
  // unreachable;
 }
 $22 = HEAP32[$16>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_try_toplevel_dynaload($0,$24,$1)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = ((($25)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28<<16>>16)==(1);
 if ($29) {
  STACKTOP = sp;return;
 } else {
  $30 = ((($0)) + 92|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $1;
  _lily_raise_syn($31,9439,$vararg_buffer6);
  // unreachable;
 }
}
function _parse_class_body($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_gp_save_and_hide($7)|0);
 _parse_class_header($0,$1);
 $9 = ((($3)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  $12 = ((($0)) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_tokname(2)|0);
  $15 = HEAP32[$9>>2]|0;
  $16 = (_tokname($15)|0);
  HEAP32[$vararg_buffer>>2] = $14;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $16;
  _lily_raise_syn($13,6220,$vararg_buffer);
  // unreachable;
 }
 _parse_multiline_block_body($0,1);
 $17 = ((($0)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 14|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(0);
 if (!($23)) {
  _error_forward_decl_pending($0);
 }
 $24 = HEAP32[$4>>2]|0;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 _determine_class_gc_flag($26);
 HEAP32[$4>>2] = $5;
 _hide_block_vars($0);
 $27 = HEAP32[$17>>2]|0;
 $28 = ((($3)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29&65535;
 _lily_emit_leave_call_block($27,$30);
 $31 = HEAP32[$6>>2]|0;
 _lily_gp_restore_and_unhide($31,$8);
 STACKTOP = sp;return;
}
function _parse_class_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5&65535;
 $7 = (_new_native_define_var($0,$1,6519,$6)|0);
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 | 1;
 HEAP16[$8>>1] = $10;
 _lily_lexer($3);
 _collect_generics($0);
 $11 = ((($0)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_lily_gp_num_in_scope($12)|0);
 $14 = $13&65535;
 $15 = ((($1)) + 42|0);
 HEAP16[$15>>1] = $14;
 $16 = ((($0)) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_emit_enter_call_block($17,12,$7);
 $18 = (_build_self_type($0,$1)|0);
 $19 = ((($0)) + 60|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($0)) + 88|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_tm_add($21,$18);
 _collect_call_args($0,$7,4194304);
 $22 = ((($3)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(22);
 if ($24) {
  $25 = (_parse_and_verify_super($0,$1)|0);
  $$0 = $25;
 } else {
  $$0 = 0;
 }
 $26 = HEAP32[$16>>2]|0;
 $27 = HEAP32[$19>>2]|0;
 $28 = HEAP32[$4>>2]|0;
 $29 = $28&65535;
 _lily_emit_write_class_header($26,$27,$29);
 $30 = ((($7)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 6|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 & 4;
 $35 = ($34<<16>>16)==(0);
 if (!($35)) {
  _send_optargs_for($0,$7);
 }
 $36 = HEAP16[$8>>1]|0;
 $37 = $36 & -2;
 HEAP16[$8>>1] = $37;
 $38 = ((($1)) + 36|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 4|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = ($41<<16>>16)==(4);
 if ($42) {
  $43 = HEAP32[$16>>2]|0;
  $44 = ((($0)) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$4>>2]|0;
  $51 = $50&65535;
  _lily_emit_write_shorthand_ctor($43,$1,$49,$51);
 }
 $52 = ($$0|0)==(0|0);
 if ($52) {
  return;
 }
 _run_super_ctor($0,$$0);
 return;
}
function _determine_class_gc_flag($0) {
 $0 = $0|0;
 var $$04115 = 0, $$042 = 0, $$04210 = 0, $$0428 = 0, $$043 = 0, $$06 = 0, $$1 = 0, $$13 = 0, $$14 = 0, $$144$ = 0, $$144$lcssa = 0, $$1449 = 0, $$25 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $$043 = 0;
  } else {
   $4 = ((($2)) + 6|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5 & 768;
   $7 = $6&65535;
   $8 = ($6<<16>>16)==(256);
   if (!($8)) {
    $$04115 = $2;
    while(1) {
     $12 = ((($$04115)) + 6|0);
     $13 = HEAP16[$12>>1]|0;
     $14 = $13 | 8192;
     HEAP16[$12>>1] = $14;
     $15 = HEAP32[$$04115>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      $$043 = $7;
      break L1;
     } else {
      $$04115 = $15;
     }
    }
   }
   $9 = ((($0)) + 6|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 | 256;
   HEAP16[$9>>1] = $11;
   return;
  }
 } while(0);
 $17 = ((($0)) + 36|0);
 $$0428 = HEAP32[$17>>2]|0;
 $18 = ($$0428|0)==(0|0);
 if ($18) {
  $$144$lcssa = $$043;
 } else {
  $$04210 = $$0428;$$1449 = $$043;
  while(1) {
   $19 = ((($$04210)) + 4|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(1);
   if ($21) {
    $$4 = $$1449;
   } else {
    $22 = ((($$04210)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_get_gc_flags_for($0,$23)|0);
    $25 = $24 | $$1449;
    $26 = ((($23)) + 10|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = ($27<<16>>16)==(0);
    if ($28) {
     $$4 = $25;
    } else {
     $29 = HEAP16[$26>>1]|0;
     $30 = ($29<<16>>16)==(0);
     if ($30) {
      $$4 = $25;
     } else {
      $31 = ((($23)) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP16[$26>>1]|0;
      $34 = $33&65535;
      $$06 = 0;$$25 = $25;
      while(1) {
       $35 = (($32) + ($$06<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (_get_gc_flags_for($0,$36)|0);
       $38 = $37 | $$25;
       $39 = (($$06) + 1)|0;
       $40 = ($39|0)<($34|0);
       if ($40) {
        $$06 = $39;$$25 = $38;
       } else {
        $$4 = $38;
        break;
       }
      }
     }
    }
   }
   $$042 = HEAP32[$$04210>>2]|0;
   $41 = ($$042|0)==(0|0);
   if ($41) {
    $$144$lcssa = $$4;
    break;
   } else {
    $$04210 = $$042;$$1449 = $$4;
   }
  }
 }
 $42 = $$144$lcssa & 256;
 $43 = ($42|0)==(0);
 $44 = $$144$lcssa & 65023;
 $$144$ = $43 ? $$144$lcssa : $44;
 $$13 = HEAP32[$1>>2]|0;
 $45 = ($$13|0)==(0|0);
 if (!($45)) {
  $$14 = $$13;
  while(1) {
   $46 = ((($$14)) + 6|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 & -8193;
   HEAP16[$46>>1] = $48;
   $$1 = HEAP32[$$14>>2]|0;
   $49 = ($$1|0)==(0|0);
   if ($49) {
    break;
   } else {
    $$14 = $$1;
   }
  }
 }
 $50 = ((($0)) + 6|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51 & -8193;
 $53 = $52&65535;
 $54 = $53 | $$144$;
 $55 = $54&65535;
 HEAP16[$50>>1] = $55;
 return;
}
function _get_gc_flags_for($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$01820 = 0, $$019 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$019 = 0;
  return ($$019|0);
 }
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(-5);
 if ($7) {
  $8 = ((($0)) + 42|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  $$ = $10 ? 256 : 512;
  $$019 = $$;
  return ($$019|0);
 }
 $11 = ((($4)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 & 256;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$019 = 256;
  return ($$019|0);
 }
 $16 = $13 & 512;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $$019 = 512;
  return ($$019|0);
 }
 $18 = $13 & 8192;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$019 = 256;
  return ($$019|0);
 }
 $20 = ((($1)) + 10|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  $$019 = 0;
  return ($$019|0);
 }
 $23 = HEAP16[$20>>1]|0;
 $24 = ($23<<16>>16)==(0);
 if ($24) {
  $$019 = 0;
  return ($$019|0);
 }
 $25 = ((($1)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP16[$20>>1]|0;
 $28 = $27&65535;
 $$01820 = 0;$$021 = 0;
 while(1) {
  $29 = (($26) + ($$021<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_get_gc_flags_for($0,$30)|0);
  $32 = $31 | $$01820;
  $33 = (($$021) + 1)|0;
  $34 = ($33|0)<($28|0);
  if ($34) {
   $$01820 = $32;$$021 = $33;
  } else {
   $$019 = $32;
   break;
  }
 }
 return ($$019|0);
}
function _parse_and_verify_super($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_lexer($3);
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(38);
 if (!($6)) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(38)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6220,$vararg_buffer);
  // unreachable;
 }
 $12 = (_resolve_class_name($0)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($0)) + 92|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($3)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $17;
  _lily_raise_syn($15,6410,$vararg_buffer2);
  // unreachable;
 }
 $18 = ($12|0)==($1|0);
 if ($18) {
  $19 = ((($0)) + 92|0);
  $20 = HEAP32[$19>>2]|0;
  _lily_raise_syn($20,9617,$vararg_buffer5);
  // unreachable;
 }
 $21 = ((($12)) + 4|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(3);
 if ($23) {
  $28 = ((($0)) + 92|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($3)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $31;
  _lily_raise_syn($29,9653,$vararg_buffer7);
  // unreachable;
 }
 $24 = ((($12)) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 & 4224;
 $27 = ($26<<16>>16)==(0);
 if (!($27)) {
  $28 = ((($0)) + 92|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($3)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $31;
  _lily_raise_syn($29,9653,$vararg_buffer7);
  // unreachable;
 }
 $32 = ((($12)) + 44|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ((($1)) + 32|0);
 HEAP32[$35>>2] = $12;
 $36 = ((($1)) + 44|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (($38) + ($34))|0;
 $40 = $39&65535;
 HEAP16[$36>>1] = $40;
 $41 = ((($12)) + 40|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = (($43) + 1)|0;
 $45 = $44&65535;
 $46 = ((($1)) + 40|0);
 HEAP16[$46>>1] = $45;
 $47 = HEAP16[$36>>1]|0;
 $48 = ($47<<16>>16)==(0);
 if ($48) {
  STACKTOP = sp;return ($12|0);
 }
 $49 = ((($1)) + 36|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  STACKTOP = sp;return ($12|0);
 } else {
  $$038 = $50;
 }
 while(1) {
  $52 = ((($$038)) + 4|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = ($53<<16>>16)==(4);
  if ($54) {
   $55 = ((($$038)) + 8|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56&65535;
   $58 = (($57) + ($34))|0;
   $59 = $58&65535;
   HEAP16[$55>>1] = $59;
  }
  $60 = HEAP32[$$038>>2]|0;
  $61 = ($60|0)==(0|0);
  if ($61) {
   break;
  } else {
   $$038 = $60;
  }
 }
 STACKTOP = sp;return ($12|0);
}
function _run_super_ctor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_find_method($1,6519)|0);
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_es_flush($6);
 _lily_es_push_inherited_new($6,$4);
 _lily_es_enter_tree($6,0);
 $7 = ((($6)) + 20|0);
 HEAP16[$7>>1] = 0;
 $8 = HEAP32[$2>>2]|0;
 _lily_lexer($8);
 $9 = ((($3)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(32);
 if (!($11)) {
  $20 = HEAP32[$5>>2]|0;
  $21 = ((($20)) + 20|0);
  HEAP16[$21>>1] = 1;
  _lily_es_leave_tree($20);
  $22 = ((($0)) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_emit_eval_expr($23,$6);
  STACKTOP = sp;return;
 }
 _lily_lexer($3);
 $12 = HEAP32[$9>>2]|0;
 $13 = ($12|0)==(0);
 $14 = ((($0)) + 92|0);
 if ($13) {
  $15 = HEAP32[$14>>2]|0;
  _lily_raise_syn($15,9573,$vararg_buffer);
  // unreachable;
 }
 L6: while(1) {
  _expression_raw($0);
  $16 = HEAP32[$5>>2]|0;
  _lily_es_collect_arg($16);
  $17 = HEAP32[$9>>2]|0;
  switch ($17|0) {
  case 0:  {
   break L6;
   break;
  }
  case 1:  {
   break;
  }
  default: {
   label = 7;
   break L6;
  }
  }
  _lily_lexer($3);
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$14>>2]|0;
  $19 = (_tokname($17)|0);
  HEAP32[$vararg_buffer1>>2] = $19;
  _lily_raise_syn($18,5928,$vararg_buffer1);
  // unreachable;
 }
 _lily_lexer($3);
 $20 = HEAP32[$5>>2]|0;
 $21 = ((($20)) + 20|0);
 HEAP16[$21>>1] = 1;
 _lily_es_leave_tree($20);
 $22 = ((($0)) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_emit_eval_expr($23,$6);
 STACKTOP = sp;return;
}
function _match_case_enum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$095 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer42 = sp + 96|0;
 $vararg_buffer38 = sp + 88|0;
 $vararg_buffer34 = sp + 80|0;
 $vararg_buffer30 = sp + 72|0;
 $vararg_buffer26 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer19 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(38);
 if (!($10)) {
  $11 = ((($0)) + 92|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(38)|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _lily_raise_syn($12,6220,$vararg_buffer);
  // unreachable;
 }
 $16 = ((($5)) + 6|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 & 1024;
 $19 = ($18<<16>>16)==(0);
 if (!($19)) {
  $20 = ((($5)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($7)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_strcmp($21,$23)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $26 = ((($0)) + 92|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $21;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $23;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $21;
   _lily_raise_syn($27,10122,$vararg_buffer2);
   // unreachable;
  }
  _lily_lexer($7);
  $28 = HEAP32[$8>>2]|0;
  $29 = ($28|0)==(47);
  if (!($29)) {
   $30 = ((($0)) + 92|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_tokname(47)|0);
   $33 = HEAP32[$8>>2]|0;
   $34 = (_tokname($33)|0);
   HEAP32[$vararg_buffer7>>2] = $32;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $34;
   _lily_raise_syn($31,6220,$vararg_buffer7);
   // unreachable;
  }
  _lily_lexer($7);
  $35 = HEAP32[$8>>2]|0;
  $36 = ($35|0)==(38);
  if (!($36)) {
   $37 = ((($0)) + 92|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (_tokname(38)|0);
   $40 = HEAP32[$8>>2]|0;
   $41 = (_tokname($40)|0);
   HEAP32[$vararg_buffer11>>2] = $39;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $41;
   _lily_raise_syn($38,6220,$vararg_buffer11);
   // unreachable;
  }
 }
 $42 = ((($7)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_lily_find_variant($5,$43)|0);
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = ((($0)) + 92|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$42>>2]|0;
  $49 = ((($5)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $48;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $50;
  _lily_raise_syn($47,10187,$vararg_buffer15);
  // unreachable;
 }
 $51 = ((($0)) + 76|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (_lily_emit_is_duplicate_case($52,$44)|0);
 $54 = ($53|0)==(0);
 if (!($54)) {
  $55 = ((($0)) + 92|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer19>>2] = $57;
  _lily_raise_syn($56,10218,$vararg_buffer19);
  // unreachable;
 }
 _hide_block_vars($0);
 $58 = HEAP32[$51>>2]|0;
 _lily_emit_change_match_branch($58);
 $59 = HEAP32[$51>>2]|0;
 _lily_emit_write_match_case($59,$1,$44);
 $60 = ((($44)) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 & 2048;
 $63 = ($62<<16>>16)==(0);
 if ($63) {
  $64 = ((($44)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[$51>>2]|0;
  $67 = ((($66)) + 80|0);
  $68 = HEAP32[$67>>2]|0;
  _lily_lexer($7);
  $69 = HEAP32[$8>>2]|0;
  $70 = ($69|0)==(32);
  if (!($70)) {
   $71 = ((($0)) + 92|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (_tokname(32)|0);
   $74 = HEAP32[$8>>2]|0;
   $75 = (_tokname($74)|0);
   HEAP32[$vararg_buffer22>>2] = $73;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $75;
   _lily_raise_syn($72,6220,$vararg_buffer22);
   // unreachable;
  }
  _lily_lexer($7);
  $76 = HEAP32[$8>>2]|0;
  $77 = ($76|0)==(38);
  if (!($77)) {
   $78 = ((($0)) + 92|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (_tokname(38)|0);
   $81 = HEAP32[$8>>2]|0;
   $82 = (_tokname($81)|0);
   HEAP32[$vararg_buffer26>>2] = $80;
   $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
   HEAP32[$vararg_ptr29>>2] = $82;
   _lily_raise_syn($79,6220,$vararg_buffer26);
   // unreachable;
  }
  $83 = ((($65)) + 10|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = ($84&65535)>(1);
  L28: do {
   if ($85) {
    $86 = ((($65)) + 16|0);
    $87 = ((($0)) + 92|0);
    $88 = ((($0)) + 92|0);
    $$095 = 1;
    while(1) {
     $89 = HEAP32[$86>>2]|0;
     $90 = (($89) + ($$095<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (_lily_ts_resolve_by_second($68,$3,$91)|0);
     $93 = HEAP32[$42>>2]|0;
     $94 = (_strcmp($93,10120)|0);
     $95 = ($94|0)==(0);
     if ($95) {
      _lily_lexer($7);
     } else {
      $96 = (_get_local_var($0,$92)|0);
      $97 = HEAP32[$51>>2]|0;
      $98 = (($$095) + -1)|0;
      $99 = ((($96)) + 8|0);
      $100 = HEAP16[$99>>1]|0;
      _lily_emit_decompose($97,$1,$98,$100);
     }
     $101 = HEAP16[$83>>1]|0;
     $102 = $101&65535;
     $103 = (($102) + -1)|0;
     $104 = ($$095|0)==($103|0);
     if (!($104)) {
      $105 = HEAP32[$8>>2]|0;
      $106 = ($105|0)==(1);
      if (!($106)) {
       label = 26;
       break;
      }
      _lily_lexer($7);
      $111 = HEAP32[$8>>2]|0;
      $112 = ($111|0)==(38);
      if (!($112)) {
       label = 28;
       break;
      }
     }
     $117 = (($$095) + 1)|0;
     $118 = HEAP16[$83>>1]|0;
     $119 = $118&65535;
     $120 = ($117|0)<($119|0);
     if ($120) {
      $$095 = $117;
     } else {
      break L28;
     }
    }
    if ((label|0) == 26) {
     $107 = HEAP32[$88>>2]|0;
     $108 = (_tokname(1)|0);
     $109 = HEAP32[$8>>2]|0;
     $110 = (_tokname($109)|0);
     HEAP32[$vararg_buffer30>>2] = $108;
     $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
     HEAP32[$vararg_ptr33>>2] = $110;
     _lily_raise_syn($107,6220,$vararg_buffer30);
     // unreachable;
    }
    else if ((label|0) == 28) {
     $113 = HEAP32[$87>>2]|0;
     $114 = (_tokname(38)|0);
     $115 = HEAP32[$8>>2]|0;
     $116 = (_tokname($115)|0);
     HEAP32[$vararg_buffer34>>2] = $114;
     $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
     HEAP32[$vararg_ptr37>>2] = $116;
     _lily_raise_syn($113,6220,$vararg_buffer34);
     // unreachable;
    }
   }
  } while(0);
  $121 = HEAP32[$8>>2]|0;
  $122 = ($121|0)==(0);
  if (!($122)) {
   $123 = ((($0)) + 92|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (_tokname(0)|0);
   $126 = HEAP32[$8>>2]|0;
   $127 = (_tokname($126)|0);
   HEAP32[$vararg_buffer38>>2] = $125;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $127;
   _lily_raise_syn($124,6220,$vararg_buffer38);
   // unreachable;
  }
 }
 _lily_lexer($7);
 $128 = HEAP32[$8>>2]|0;
 $129 = ($128|0)==(5);
 if ($129) {
  _lily_lexer($7);
  STACKTOP = sp;return;
 } else {
  $130 = ((($0)) + 92|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (_tokname(5)|0);
  $133 = HEAP32[$8>>2]|0;
  $134 = (_tokname($133)|0);
  HEAP32[$vararg_buffer42>>2] = $132;
  $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
  HEAP32[$vararg_ptr45>>2] = $134;
  _lily_raise_syn($131,6220,$vararg_buffer42);
  // unreachable;
 }
}
function _match_case_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(38);
 if (!($6)) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_tokname(38)|0);
  $10 = HEAP32[$4>>2]|0;
  $11 = (_tokname($10)|0);
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _lily_raise_syn($8,6220,$vararg_buffer);
  // unreachable;
 }
 $12 = (_resolve_class_name($0)|0);
 $13 = ((($1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_lily_class_greater_eq($16,$12)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = HEAP32[$13>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = ($23<<16>>16)==(-6);
  if (!($24)) {
   $25 = ((($0)) + 92|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($12)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($21)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $28;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $30;
   _lily_raise_syn($26,9982,$vararg_buffer2);
   // unreachable;
  }
 }
 $31 = ((($0)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_lily_emit_is_duplicate_case($32,$12)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = ((($0)) + 92|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($12)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $38;
  _lily_raise_syn($36,10032,$vararg_buffer6);
  // unreachable;
 }
 _hide_block_vars($0);
 $39 = HEAP32[$31>>2]|0;
 _lily_emit_change_match_branch($39);
 $40 = HEAP32[$31>>2]|0;
 _lily_emit_write_match_case($40,$1,$12);
 $41 = ((($12)) + 42|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = ($42<<16>>16)==(0);
 if (!($43)) {
  $44 = ((($0)) + 92|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($12)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $47;
  _lily_raise_syn($45,10066,$vararg_buffer9);
  // unreachable;
 }
 _lily_lexer($3);
 $48 = HEAP32[$4>>2]|0;
 $49 = ($48|0)==(32);
 if (!($49)) {
  $50 = ((($0)) + 92|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_tokname(32)|0);
  $53 = HEAP32[$4>>2]|0;
  $54 = (_tokname($53)|0);
  HEAP32[$vararg_buffer12>>2] = $52;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $54;
  _lily_raise_syn($51,6220,$vararg_buffer12);
  // unreachable;
 }
 _lily_lexer($3);
 $55 = HEAP32[$4>>2]|0;
 $56 = ($55|0)==(38);
 if (!($56)) {
  $57 = ((($0)) + 92|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_tokname(38)|0);
  $60 = HEAP32[$4>>2]|0;
  $61 = (_tokname($60)|0);
  HEAP32[$vararg_buffer16>>2] = $59;
  $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
  HEAP32[$vararg_ptr19>>2] = $61;
  _lily_raise_syn($58,6220,$vararg_buffer16);
  // unreachable;
 }
 $62 = ((($3)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (_strcmp($63,10120)|0);
 $65 = ($64|0)==(0);
 if ($65) {
  _lily_lexer($3);
 } else {
  $66 = ((($12)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_get_local_var($0,$67)|0);
  $69 = HEAP32[$31>>2]|0;
  $70 = ((($68)) + 8|0);
  $71 = HEAP16[$70>>1]|0;
  _lily_emit_decompose($69,$1,0,$71);
 }
 $72 = HEAP32[$4>>2]|0;
 $73 = ($72|0)==(0);
 if (!($73)) {
  $74 = ((($0)) + 92|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (_tokname(0)|0);
  $77 = HEAP32[$4>>2]|0;
  $78 = (_tokname($77)|0);
  HEAP32[$vararg_buffer20>>2] = $76;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $78;
  _lily_raise_syn($75,6220,$vararg_buffer20);
  // unreachable;
 }
 _lily_lexer($3);
 $79 = HEAP32[$4>>2]|0;
 $80 = ($79|0)==(5);
 if ($80) {
  _lily_lexer($3);
  STACKTOP = sp;return;
 } else {
  $81 = ((($0)) + 92|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_tokname(5)|0);
  $84 = HEAP32[$4>>2]|0;
  $85 = (_tokname($84)|0);
  HEAP32[$vararg_buffer24>>2] = $83;
  $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
  HEAP32[$vararg_ptr27>>2] = $85;
  _lily_raise_syn($82,6220,$vararg_buffer24);
  // unreachable;
 }
}
function _error_incomplete_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$03339 = 0, $$034 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ((($0)) + 92|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($5)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($7)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($12<<2)|0);
 _lily_mb_add($16,9911);
 $22 = ($18|0)==(0|0);
 if ($22) {
  $48 = HEAP32[$13>>2]|0;
  $49 = (_lily_mb_raw($16)|0);
  _lily_raise_syn($48,$49,$vararg_buffer1);
  // unreachable;
 } else {
  $$03339 = $18;
 }
 while(1) {
  $23 = ((($$03339)) + 4|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = ($24<<16>>16)==(3);
  if ($25) {
   $26 = HEAP32[$6>>2]|0;
   $27 = ((($26)) + 32|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = ($11&65535)<($28&65535);
   L7: do {
    if ($30) {
     $31 = ((($$03339)) + 8|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32&65535;
     $$034 = $12;$50 = $29;
     while(1) {
      $34 = (($21) + ($$034<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if ($36) {
       $$0$lcssa = $$034;$$lcssa = $50;
       break L7;
      }
      $37 = (($$034) + 1)|0;
      $38 = HEAP32[$6>>2]|0;
      $39 = ((($38)) + 32|0);
      $40 = HEAP16[$39>>1]|0;
      $41 = $40&65535;
      $42 = ($37|0)<($41|0);
      if ($42) {
       $$034 = $37;$50 = $41;
      } else {
       $$0$lcssa = $37;$$lcssa = $41;
       break;
      }
     }
    } else {
     $$0$lcssa = $12;$$lcssa = $29;
    }
   } while(0);
   $43 = ($$0$lcssa|0)==($$lcssa|0);
   if ($43) {
    $44 = ((($$03339)) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[$vararg_buffer>>2] = $45;
    _lily_mb_add_fmt($16,9976,$vararg_buffer);
   }
  }
  $46 = HEAP32[$$03339>>2]|0;
  $47 = ($46|0)==(0|0);
  if ($47) {
   break;
  } else {
   $$03339 = $46;
  }
 }
 $48 = HEAP32[$13>>2]|0;
 $49 = (_lily_mb_raw($16)|0);
 _lily_raise_syn($48,$49,$vararg_buffer1);
 // unreachable;
}
function _get_local_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_find_var($5,0,$7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $13 = HEAP32[$6>>2]|0;
  $14 = ((($3)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15&65535;
  $17 = (_new_local_var($0,$1,$13,$16)|0);
  _lily_lexer($3);
  STACKTOP = sp;return ($17|0);
 } else {
  $10 = ((($0)) + 92|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _lily_raise_syn($11,7389,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _process_except($0) {
 $0 = $0|0;
 var $$0 = 0, $$043 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_get_type_raw($0,0)|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(19);
 if ($8) {
  $$043 = 8;
 } else {
  $9 = (_lily_class_greater_eq_id(19,$5)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ((($0)) + 92|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($5)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   _lily_raise_syn($12,10413,$vararg_buffer);
   // unreachable;
  }
  $15 = ((($5)) + 42|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($16<<16>>16)==(0);
  if ($17) {
   $$043 = 7;
  } else {
   $18 = ((($0)) + 92|0);
   $19 = HEAP32[$18>>2]|0;
   _lily_raise_syn($19,10450,$vararg_buffer1);
   // unreachable;
  }
 }
 _hide_block_vars($0);
 $20 = ((($0)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_emit_change_block_to($21,$$043);
 $22 = ((($2)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(38);
 do {
  if ($24) {
   $25 = HEAP32[$1>>2]|0;
   $26 = ((($25)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strcmp($27,8590)|0);
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = ((($0)) + 92|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($2)) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $33;
    _lily_raise_syn($31,10486,$vararg_buffer3);
    // unreachable;
   }
   _lily_lexer($2);
   $34 = HEAP32[$22>>2]|0;
   $35 = ($34|0)==(38);
   if (!($35)) {
    $36 = ((($0)) + 92|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_tokname(38)|0);
    $39 = HEAP32[$22>>2]|0;
    $40 = (_tokname($39)|0);
    HEAP32[$vararg_buffer6>>2] = $38;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $40;
    _lily_raise_syn($37,6220,$vararg_buffer6);
    // unreachable;
   }
   $41 = ((($0)) + 80|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($2)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (_lily_find_var($42,0,$44)|0);
   $46 = ($45|0)==(0|0);
   if ($46) {
    $51 = ((($5)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = HEAP32[$43>>2]|0;
    $54 = ((($2)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55&65535;
    $57 = (_new_local_var($0,$52,$53,$56)|0);
    _lily_lexer($2);
    $$pr = HEAP32[$22>>2]|0;
    $$0 = $57;$58 = $$pr;
    break;
   } else {
    $47 = ((($0)) + 92|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($45)) + 16|0);
    $50 = HEAP32[$49>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $50;
    _lily_raise_syn($48,7389,$vararg_buffer10);
    // unreachable;
   }
  } else {
   $$0 = 0;$58 = $23;
  }
 } while(0);
 $59 = ($58|0)==(5);
 if ($59) {
  $65 = HEAP32[$20>>2]|0;
  $66 = ((($5)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($2)) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  _lily_emit_except($65,$67,$$0,$69);
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $60 = ((($0)) + 92|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_tokname(5)|0);
  $63 = HEAP32[$22>>2]|0;
  $64 = (_tokname($63)|0);
  HEAP32[$vararg_buffer13>>2] = $62;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $64;
  _lily_raise_syn($61,6220,$vararg_buffer13);
  // unreachable;
 }
}
function _parse_for_range_value($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 _expression($0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(28);
 if ($7) {
  $8 = ((($4)) + 8|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9&255)>(22);
  if ($10) {
   $11 = ((($0)) + 92|0);
   $12 = HEAP32[$11>>2]|0;
   _lily_raise_syn($12,10646,$vararg_buffer);
   // unreachable;
  }
 }
 $13 = ((($0)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 72|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22&65535;
 $24 = (_new_local_var($0,$18,$1,$23)|0);
 $25 = ((($0)) + 76|0);
 $26 = HEAP32[$25>>2]|0;
 _lily_emit_eval_expr_to_var($26,$3,$24);
 STACKTOP = sp;return ($24|0);
}
function _do_elif($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 _hide_block_vars($0);
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_emit_change_block_to($4,1);
 _expression($0);
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_emit_eval_condition($5,$7);
 $8 = ((($2)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(5);
 if ($10) {
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $11 = ((($0)) + 92|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_tokname(5)|0);
  $14 = HEAP32[$8>>2]|0;
  $15 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _lily_raise_syn($12,6220,$vararg_buffer);
  // unreachable;
 }
}
function _do_else($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 _hide_block_vars($0);
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_emit_change_block_to($4,2);
 $5 = ((($2)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(5);
 if ($7) {
  _lily_lexer($2);
  STACKTOP = sp;return;
 } else {
  $8 = ((($0)) + 92|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_tokname(5)|0);
  $11 = HEAP32[$5>>2]|0;
  $12 = (_tokname($11)|0);
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  _lily_raise_syn($9,6220,$vararg_buffer);
  // unreachable;
 }
}
function _fix_first_file_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 HEAP32[$4>>2] = $1;
 $5 = (_dir_from_path($1)|0);
 $6 = ((($3)) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = (_loadname_from_path($1)|0);
 $8 = ((($3)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = (_strlen($1)|0);
 $10 = $9&65535;
 $11 = ((($3)) + 10|0);
 HEAP16[$11>>1] = $10;
 $12 = HEAP32[$6>>2]|0;
 $13 = ((($3)) + 40|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$19>>2] = $1;
 $20 = ((($0)) + 22|0);
 HEAP16[$20>>1] = 0;
 return;
}
function _handle_rewind($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _rewind_parser($0,$2);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 24|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$2>>2] = $11;
 $12 = ((($9)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($2)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($9)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($0)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 16|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($0)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($2)) + 20|0);
 HEAP32[$28>>2] = $27;
 return;
}
function _parser_loop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 if (!($4)) {
  _lily_verify_template($3);
 }
 _lily_lexer($3);
 $5 = ((($3)) + 40|0);
 $6 = ((($0)) + 92|0);
 $7 = ((($0)) + 76|0);
 $8 = ((($0)) + 92|0);
 $9 = ((($0)) + 76|0);
 $10 = ((($0)) + 76|0);
 $11 = ((($0)) + 36|0);
 L4: while(1) {
  $12 = HEAP32[$5>>2]|0;
  switch ($12|0) {
  case 38:  {
   _statement($0,1);
   continue L4;
   break;
  }
  case 3:  {
   $13 = HEAP32[$7>>2]|0;
   _lily_emit_leave_block($13);
   continue L4;
   break;
  }
  case 62: case 61:  {
   if ($4) {
    $14 = HEAP32[$5>>2]|0;
    $15 = ($14|0)==(61);
    if ($15) {
     label = 9;
     break L4;
    }
   }
   $18 = HEAP32[$9>>2]|0;
   $19 = ((($18)) + 56|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 14|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = ($22<<16>>16)==(0);
   if (!($23)) {
    _error_forward_decl_pending($0);
   }
   _setup_and_exec_vm($0);
   $24 = HEAP32[$5>>2]|0;
   $25 = ($24|0)==(61);
   if ($25) {
    _template_read_loop($0,$3);
    $$pr = HEAP32[$5>>2]|0;
    $26 = $$pr;
   } else {
    $26 = $24;
   }
   $27 = ($26|0)==(62);
   if ($27) {
    label = 19;
    break L4;
   }
   _lily_lexer($3);
   continue L4;
   break;
  }
  case 45:  {
   _process_docstring($0);
   continue L4;
   break;
  }
  case 42: case 34: case 33: case 41: case 4: case 32: case 40: case 44: case 43:  {
   _expression($0);
   $28 = HEAP32[$10>>2]|0;
   $29 = HEAP32[$11>>2]|0;
   _lily_emit_eval_expr($28,$29);
   continue L4;
   break;
  }
  default: {
   label = 18;
   break L4;
  }
  }
 }
 if ((label|0) == 9) {
  $16 = HEAP32[$8>>2]|0;
  $17 = (_tokname($14)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  _lily_raise_syn($16,6567,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $30 = HEAP32[$6>>2]|0;
  $31 = (_tokname($12)|0);
  HEAP32[$vararg_buffer1>>2] = $31;
  _lily_raise_syn($30,6567,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function _setup_and_exec_vm($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_register_classes($2,$4);
 $5 = ((($0)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_prepare_main($6,$8);
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 _maybe_fix_print($0);
 _update_all_cid_tables($0);
 $14 = ((($0)) + 20|0);
 HEAP16[$14>>1] = 1;
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$7>>2]|0;
 _lily_call_prepare($15,$16);
 $17 = HEAP32[$3>>2]|0;
 _lily_stack_drop_top($17);
 $18 = HEAP32[$3>>2]|0;
 _lily_call($18,0);
 $19 = HEAP32[$3>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$20>>2] = $23;
 $24 = HEAP32[$3>>2]|0;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 1;
 HEAP16[$14>>1] = 0;
 $26 = HEAP32[$5>>2]|0;
 _lily_reset_main($26);
 return;
}
function _template_read_loop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = ((($4)) + 40|0);
 while(1) {
  $7 = (_lily_lexer_read_content($1,$2)|0);
  $8 = HEAP32[$2>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = HEAP32[$5>>2]|0;
   $12 = HEAP32[$6>>2]|0;
   FUNCTION_TABLE_vii[$11 & 63]($8,$12);
  }
  $13 = ($7|0)==(0);
  if ($13) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _maybe_fix_print($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_find_var($2,$4,10879)|0);
 $6 = ((($0)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==(0|0);
 if ($8) {
  return;
 }
 $9 = (_lily_find_var($2,$4,10886)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 $11 = ((($7)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($9)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($12) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = 13;
 $21 = ((($5)) + 8|0);
 $22 = ((($19)) + 36|0);
 HEAP32[$22>>2] = $21;
 return;
}
function _update_all_cid_tables($0) {
 $0 = $0|0;
 var $$0 = 0, $$07 = 0, $$08 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$07 = HEAP32[$0>>2]|0;
 $1 = ($$07|0)==(0|0);
 if ($1) {
  return;
 } else {
  $$08 = $$07;
 }
 while(1) {
  $2 = ((($$08)) + 56|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   _update_cid_table($0,$$08);
  }
  $$0 = HEAP32[$$08>>2]|0;
  $5 = ($$0|0)==(0|0);
  if ($5) {
   break;
  } else {
   $$08 = $$0;
  }
 }
 return;
}
function _rewind_parser($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$096 = 0, $$097 = 0, $$098 = 0, $$098$in = 0, $$pn = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 10|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($7)) + 12|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($0)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$11>>2] = 0;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($11)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($11)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($11)) + 12|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$13>>2] = 0;
 }
 $21 = ((($11)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($11)) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($11)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $$097 = $25;
 while(1) {
  $26 = ((($$097)) + 8|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($$097)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   break;
  } else {
   $$097 = $28;
  }
 }
 HEAP32[$24>>2] = $$097;
 $30 = ((($11)) + 20|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($11)) + 22|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($11)) + 24|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($0)) + 76|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($34)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($34)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($34)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  $46 = ((($44)) + 4|0);
  HEAP32[$46>>2] = 0;
 }
 $47 = ((($34)) + 32|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($34)) + 56|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 40|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($34)) + 48|0);
 $53 = HEAP32[$52>>2]|0;
 $$pn = $53;
 while(1) {
  $$098$in = ((($$pn)) + 40|0);
  $$098 = HEAP32[$$098$in>>2]|0;
  $54 = ($$098|0)==($51|0);
  if ($54) {
   break;
  }
  $55 = ((($$098)) + 13|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56&255)>(10);
  if ($57) {
   label = 10;
   break;
  } else {
   $$pn = $$098;
  }
 }
 if ((label|0) == 10) {
  $58 = ((($$098)) + 6|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = ((($34)) + 40|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  HEAP16[$62>>1] = $59;
 }
 $63 = HEAP32[$52>>2]|0;
 HEAP32[$48>>2] = $63;
 $64 = ((($63)) + 14|0);
 HEAP16[$64>>1] = 0;
 $65 = ((($34)) + 52|0);
 HEAP32[$65>>2] = $63;
 $66 = ((($34)) + 62|0);
 HEAP16[$66>>1] = 1;
 $67 = ((($34)) + 60|0);
 HEAP16[$67>>1] = 0;
 $68 = HEAP32[$33>>2]|0;
 $69 = ((($68)) + 80|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($70)) + 6|0);
 HEAP16[$71>>1] = 0;
 $72 = ((($70)) + 4|0);
 HEAP16[$72>>1] = 0;
 _lily_ts_reset_scoops($70);
 $73 = ((($0)) + 72|0);
 $74 = HEAP32[$73>>2]|0;
 _lily_rewind_lex_state($74);
 $75 = ((($1)) + 20|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$73>>2]|0;
 $78 = ((($77)) + 16|0);
 HEAP32[$78>>2] = $76;
 $79 = ((($0)) + 92|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 (_lily_mb_flush($82)|0);
 $83 = ((($80)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 (_lily_mb_flush($84)|0);
 $85 = ((($80)) + 12|0);
 HEAP32[$85>>2] = 0;
 $86 = HEAP32[$80>>2]|0;
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $90 = $87;
  while(1) {
   $89 = HEAP32[$90>>2]|0;
   $91 = ($89|0)==(0|0);
   if ($91) {
    break;
   } else {
    $90 = $89;
   }
  }
  HEAP32[$80>>2] = $90;
 }
 $92 = ((($0)) + 84|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ((($93)) + 56|0);
 $95 = HEAP32[$94>>2]|0;
 $$096 = $95;
 while(1) {
  $96 = ((($$096)) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)==(0|0);
  if ($98) {
   break;
  } else {
   $$096 = $97;
  }
 }
 HEAP32[$94>>2] = $$096;
 $99 = ((($93)) + 60|0);
 HEAP32[$99>>2] = 0;
 $100 = ((($93)) + 64|0);
 HEAP32[$100>>2] = 0;
 $101 = ((($93)) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $$0 = $102;
 while(1) {
  $103 = ((($$0)) + 24|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)==(0|0);
  if ($105) {
   break;
  } else {
   $$0 = $104;
  }
 }
 HEAP32[$101>>2] = $$0;
 $106 = ((($93)) + 4|0);
 HEAP32[$106>>2] = 0;
 $107 = ((($0)) + 80|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($0)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = HEAP32[$1>>2]|0;
 $112 = ((($1)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ((($1)) + 8|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ((($0)) + 20|0);
 $117 = HEAP16[$116>>1]|0;
 $118 = $117&65535;
 _lily_rewind_symtab($108,$110,$111,$113,$115,$118);
 return;
}
function _lily_parse_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_parse_string($4,$1,$2,0)|0);
 return ($5|0);
}
function _parse_string($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$reg2mem$0 = 0, $$reg2mem19$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $4 = ((($0)) + 22|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  label = 4;
 } else {
  __THREW__ = 0;
  invoke_vii(44,($0|0),($1|0));
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond = ($8|0)==(1);
  if ($cond) {
   $$reg2mem19$0 = $9;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  __THREW__ = 0;
  invoke_vi(14,($0|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
  $12 = tempRet0;
  $cond25 = ($11|0)==(1);
  if ($cond25) {
   $$reg2mem19$0 = $12;
  } else {
   $13 = ((($0)) + 92|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 8|0);
   _setjmpTable = _saveSetjmp($16,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $17 = __THREW__; __THREW__ = 0;
   if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = (threwValue); } else { $18 = -1; };
   $19 = tempRet0;
   $cond26 = ($18|0)==(1);
   if ($cond26) {
    $$reg2mem19$0 = $19;
   } else {
    $$reg2mem19$0 = 0;
   }
  }
 }
 while(1) {
  $20 = ($$reg2mem19$0|0)==(0);
  if (!($20)) {
   label = 13;
   break;
  }
  $21 = ((($0)) + 72|0);
  $22 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  invoke_viii(2,($22|0),1,($2|0));
  $23 = __THREW__; __THREW__ = 0;
  if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
  $25 = tempRet0;
  $cond21 = ($24|0)==(1);
  if ($cond21) {
   $$reg2mem19$0 = $25;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(45,($0|0),($3|0));
  $26 = __THREW__; __THREW__ = 0;
  if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
  $28 = tempRet0;
  $cond22 = ($27|0)==(1);
  if ($cond22) {
   $$reg2mem19$0 = $28;
   continue;
  }
  $29 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  invoke_vi(15,($29|0));
  $30 = __THREW__; __THREW__ = 0;
  if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = (threwValue); } else { $31 = -1; };
  $32 = tempRet0;
  $cond23 = ($31|0)==(1);
  if ($cond23) {
   $$reg2mem19$0 = $32;
   continue;
  }
  $33 = ((($0)) + 64|0);
  $34 = HEAP32[$33>>2]|0;
  __THREW__ = 0;
  (invoke_ii(4,($34|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
  $37 = tempRet0;
  $cond24 = ($36|0)==(1);
  if ($cond24) {
   $$reg2mem19$0 = $37;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $$0$reg2mem$0 = 1;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 else if ((label|0) == 13) {
  $38 = ((($0)) + 100|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($39)) + 24|0);
  HEAP32[$40>>2] = 1;
  $$0$reg2mem$0 = 0;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 return (0)|0;
}
function _lily_error_message($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 _build_error($2);
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_mb_raw($5)|0);
 return ($6|0);
}
function _build_error($0) {
 $0 = $0|0;
 var $$044 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_mb_flush($4)|0);
 $6 = ((($0)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_lily_mb_raw($9)|0);
 $11 = ((($7)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $16 = (_lily_name_for_error($2)|0);
  _lily_mb_add($5,$16);
 } else {
  $14 = ((($12)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  _lily_mb_add($5,$15);
 }
 $17 = HEAP8[$10>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  _lily_mb_add_char($5,10);
 } else {
  HEAP32[$vararg_buffer>>2] = $10;
  _lily_mb_add_fmt($5,10892,$vararg_buffer);
 }
 $19 = ((($0)) + 20|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($20<<16>>16)==(0);
 if ($21) {
  $22 = ((($0)) + 72|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   STACKTOP = sp;return;
  }
  $26 = ((($2)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = ((($23)) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $37 = $30;
  } else {
   $37 = $27;
  }
  $31 = ((($0)) + 80|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $36;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $37;
  _lily_mb_add_fmt($5,10898,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $38 = HEAP32[$6>>2]|0;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 _lily_mb_add($5,10915);
 $41 = ((($40)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  STACKTOP = sp;return;
 } else {
  $$044 = $40;$60 = $41;
 }
 while(1) {
  $44 = ((($$044)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($45)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  $51 = ((($47)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  if ($50) {
   HEAP32[$vararg_buffer5>>2] = $52;
   _lily_mb_add_fmt($5,10927,$vararg_buffer5);
  } else {
   $53 = HEAP32[$47>>2]|0;
   $54 = ((($$044)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + -2|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   HEAP32[$vararg_buffer8>>2] = $53;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $58;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $52;
   _lily_mb_add_fmt($5,10948,$vararg_buffer8);
  }
  $59 = HEAP32[$60>>2]|0;
  $61 = ((($59)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   break;
  } else {
   $$044 = $59;$60 = $61;
  }
 }
 STACKTOP = sp;return;
}
function _lily_config_get($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _lily_ci_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $4 = ((($0)) + 6|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($0)) + 4|0);
 HEAP16[$5>>1] = $2;
 $6 = ((($0)) + 8|0);
 HEAP16[$6>>1] = 0;
 return;
}
function _lily_ci_next($0) {
 $0 = $0|0;
 var $$0 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + ($3))|0;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 $9 = $7 & 65535;
 $10 = ((($0)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($9>>>0)<($12>>>0);
 if (!($13)) {
  $$0 = 0;
  return ($$0|0);
 }
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP16[$4>>1]|0;
 $16 = $15&65535;
 $17 = (($14) + ($16<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ((($0)) + 10|0);
 HEAP16[$19>>1] = $18;
 $20 = HEAP16[$17>>1]|0;
 do {
  switch ($20<<16>>16) {
  case 22: case 21: case 20: case 1: case 0:  {
   $21 = ((($0)) + 16|0);
   HEAP16[$21>>1] = 1;
   $22 = ((($0)) + 18|0);
   HEAP16[$22>>1] = 1;
   $23 = ((($0)) + 22|0);
   HEAP16[$23>>1] = 1;
   $$sink = 4;
   break;
  }
  case 37: case 19: case 18: case 17: case 16: case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8: case 7: case 6: case 5: case 4: case 3: case 2:  {
   $24 = ((($0)) + 16|0);
   HEAP16[$24>>1] = 2;
   $25 = ((($0)) + 18|0);
   HEAP16[$25>>1] = 1;
   $26 = ((($0)) + 22|0);
   HEAP16[$26>>1] = 1;
   $$sink = 5;
   break;
  }
  case 23:  {
   $27 = ((($0)) + 20|0);
   HEAP16[$27>>1] = 1;
   $$sink = 2;
   break;
  }
  case 25: case 24:  {
   $28 = ((($0)) + 12|0);
   HEAP16[$28>>1] = 1;
   $29 = ((($0)) + 16|0);
   HEAP16[$29>>1] = 1;
   $30 = ((($0)) + 20|0);
   HEAP16[$30>>1] = 1;
   $$sink = 4;
   break;
  }
  case 30: case 28: case 29:  {
   $31 = ((($0)) + 12|0);
   HEAP16[$31>>1] = 1;
   $32 = ((($0)) + 14|0);
   HEAP16[$32>>1] = 1;
   $33 = ((($17)) + 4|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = ((($0)) + 16|0);
   HEAP16[$35>>1] = $34;
   $36 = ((($0)) + 18|0);
   HEAP16[$36>>1] = 1;
   $37 = ((($0)) + 22|0);
   HEAP16[$37>>1] = 1;
   $38 = HEAP16[$33>>1]|0;
   $39 = $38&65535;
   $40 = (($39) + 5)|0;
   $41 = $40&65535;
   $$sink = $41;
   break;
  }
  case 53: case 31:  {
   $42 = ((($0)) + 16|0);
   HEAP16[$42>>1] = 1;
   $43 = ((($0)) + 22|0);
   HEAP16[$43>>1] = 1;
   $$sink = 3;
   break;
  }
  case 32:  {
   $44 = ((($0)) + 22|0);
   HEAP16[$44>>1] = 1;
   $$sink = 2;
   break;
  }
  case 58: case 34: case 33:  {
   $45 = ((($0)) + 14|0);
   HEAP16[$45>>1] = 1;
   $46 = ((($17)) + 2|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = ((($0)) + 16|0);
   HEAP16[$48>>1] = $47;
   $49 = ((($0)) + 18|0);
   HEAP16[$49>>1] = 1;
   $50 = ((($0)) + 22|0);
   HEAP16[$50>>1] = 1;
   $51 = HEAP16[$46>>1]|0;
   $52 = $51&65535;
   $53 = (($52) + 4)|0;
   $54 = $53&65535;
   $$sink = $54;
   break;
  }
  case 36: case 35:  {
   $55 = ((($0)) + 12|0);
   HEAP16[$55>>1] = 1;
   $56 = ((($0)) + 14|0);
   HEAP16[$56>>1] = 1;
   $57 = ((($17)) + 4|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = ((($0)) + 16|0);
   HEAP16[$59>>1] = $58;
   $60 = ((($0)) + 18|0);
   HEAP16[$60>>1] = 1;
   $61 = ((($0)) + 22|0);
   HEAP16[$61>>1] = 1;
   $62 = HEAP16[$57>>1]|0;
   $63 = $62&65535;
   $64 = (($63) + 5)|0;
   $65 = $64&65535;
   $$sink = $65;
   break;
  }
  case 26:  {
   $66 = ((($0)) + 16|0);
   HEAP16[$66>>1] = 3;
   $67 = ((($0)) + 18|0);
   HEAP16[$67>>1] = 1;
   $68 = ((($0)) + 20|0);
   HEAP16[$68>>1] = 1;
   $69 = ((($0)) + 22|0);
   HEAP16[$69>>1] = 1;
   $$sink = 7;
   break;
  }
  case 27:  {
   $70 = ((($0)) + 16|0);
   HEAP16[$70>>1] = 3;
   $71 = ((($0)) + 18|0);
   HEAP16[$71>>1] = 1;
   $72 = ((($0)) + 22|0);
   HEAP16[$72>>1] = 1;
   $$sink = 6;
   break;
  }
  case 38:  {
   $73 = ((($0)) + 16|0);
   HEAP16[$73>>1] = 3;
   $74 = ((($0)) + 22|0);
   HEAP16[$74>>1] = 1;
   $$sink = 5;
   break;
  }
  case 55: case 40:  {
   $75 = ((($0)) + 12|0);
   HEAP16[$75>>1] = 1;
   $76 = ((($0)) + 16|0);
   HEAP16[$76>>1] = 1;
   $77 = ((($0)) + 22|0);
   HEAP16[$77>>1] = 1;
   $$sink = 4;
   break;
  }
  case 57: case 56: case 46: case 54: case 45: case 44: case 43: case 42: case 41: case 39:  {
   $78 = ((($0)) + 12|0);
   HEAP16[$78>>1] = 1;
   $79 = ((($0)) + 18|0);
   HEAP16[$79>>1] = 1;
   $80 = ((($0)) + 22|0);
   HEAP16[$80>>1] = 1;
   $$sink = 4;
   break;
  }
  case 47:  {
   $81 = ((($0)) + 12|0);
   HEAP16[$81>>1] = 1;
   $82 = ((($0)) + 16|0);
   HEAP16[$82>>1] = 1;
   $83 = ((($0)) + 18|0);
   HEAP16[$83>>1] = 1;
   $84 = ((($0)) + 22|0);
   HEAP16[$84>>1] = 1;
   $$sink = 5;
   break;
  }
  case 48:  {
   $85 = ((($0)) + 12|0);
   HEAP16[$85>>1] = 1;
   $86 = ((($0)) + 16|0);
   HEAP16[$86>>1] = 2;
   $87 = ((($0)) + 22|0);
   HEAP16[$87>>1] = 1;
   $$sink = 5;
   break;
  }
  case 49:  {
   $88 = ((($0)) + 20|0);
   HEAP16[$88>>1] = 1;
   $89 = ((($0)) + 22|0);
   HEAP16[$89>>1] = 1;
   $$sink = 3;
   break;
  }
  case 59: case 50:  {
   $$sink = 1;
   break;
  }
  case 51:  {
   $90 = ((($0)) + 12|0);
   HEAP16[$90>>1] = 1;
   $91 = ((($0)) + 20|0);
   HEAP16[$91>>1] = 1;
   $92 = ((($0)) + 22|0);
   HEAP16[$92>>1] = 1;
   $$sink = 4;
   break;
  }
  case 52:  {
   $93 = ((($0)) + 18|0);
   HEAP16[$93>>1] = 1;
   $$sink = 2;
   break;
  }
  default: {
   $$0 = 1;
   return ($$0|0);
  }
  }
 } while(0);
 HEAP16[$1>>1] = $$sink;
 $$0 = 1;
 return ($$0|0);
}
function _lily_new_generic_pool() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 $1 = (_lily_malloc(16)|0);
 $2 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $3 = ((($0)) + 8|0);
 HEAP16[$3>>1] = 4;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 10|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 12|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 14|0);
 HEAP16[$7>>1] = 4;
 return ($0|0);
}
function _lily_free_generic_pool($0) {
 $0 = $0|0;
 var $$01516 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 L1: do {
  if (!($3)) {
   $$01516 = 0;
   while(1) {
    $4 = HEAP32[$0>>2]|0;
    $5 = (($4) + ($$01516<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if ($7) {
     break L1;
    }
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    _lily_free($9);
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    _lily_free($11);
    _lily_free($6);
    $12 = (($$01516) + 1)|0;
    $13 = HEAP16[$1>>1]|0;
    $14 = $13&65535;
    $15 = ($12|0)<($14|0);
    if ($15) {
     $$01516 = $12;
    } else {
     break;
    }
   }
  }
 } while(0);
 $16 = HEAP32[$0>>2]|0;
 _lily_free($16);
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _lily_free($18);
 _lily_free($0);
 return;
}
function _lily_gp_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep = 0, $smax = 0, $storemerge = 0, $storemerge43 = 0, $storemerge44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = (_find_in_cache($0,$1,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_lily_new_raw_class($1)|0);
  $7 = (_lily_new_raw_type($6)|0);
  $8 = ((($7)) + 6|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 | 2;
  HEAP16[$8>>1] = $10;
  $11 = $2&65535;
  $12 = ((($7)) + 8|0);
  HEAP16[$12>>1] = $11;
  $13 = ((($6)) + 8|0);
  HEAP16[$13>>1] = -5;
  $14 = ((($6)) + 12|0);
  HEAP32[$14>>2] = $7;
  $15 = ((($6)) + 52|0);
  HEAP32[$15>>2] = $7;
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = (($16) + ($17<<2)|0);
  HEAP32[$18>>2] = $6;
  $19 = (($17) + 1)|0;
  $20 = ((($0)) + 8|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = ($19|0)==($22|0);
  if ($23) {
   $24 = $22 << 1;
   $25 = $24&65535;
   HEAP16[$20>>1] = $25;
   $26 = HEAP32[$0>>2]|0;
   $27 = $22 << 3;
   $28 = $27 & 262136;
   $29 = (_lily_realloc($26,$28)|0);
   $30 = HEAP32[$3>>2]|0;
   $storemerge43 = (($30) + 1)|0;
   HEAP32[$3>>2] = $storemerge43;
   $31 = HEAP16[$20>>1]|0;
   $32 = $31&65535;
   $33 = ($storemerge43|0)<($32|0);
   if ($33) {
    $34 = HEAP16[$20>>1]|0;
    $35 = $34&65535;
    $36 = $30 << 2;
    $37 = (($36) + 4)|0;
    $scevgep = (($29) + ($37)|0);
    $38 = (($30) + 2)|0;
    $39 = ($38|0)>($35|0);
    $smax = $39 ? $38 : $35;
    $40 = (($smax) + 1073741823)|0;
    $41 = (($40) - ($30))|0;
    $42 = $41 << 2;
    _memset(($scevgep|0),0,($42|0))|0;
    $storemerge44 = $storemerge43;
    while(1) {
     $storemerge = (($storemerge44) + 1)|0;
     $43 = ($storemerge|0)<($35|0);
     if ($43) {
      $storemerge44 = $storemerge;
     } else {
      break;
     }
    }
    HEAP32[$3>>2] = $storemerge;
   }
   HEAP32[$0>>2] = $29;
   $$0 = $6;
  } else {
   $$0 = $6;
  }
 } else {
  $$0 = $4;
 }
 $44 = ((($0)) + 12|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = ((($0)) + 14|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = ($45<<16>>16)==($47<<16>>16);
 if (!($48)) {
  $57 = ((($0)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP16[$44>>1]|0;
  $60 = $59&65535;
  $61 = (($58) + ($60<<2)|0);
  HEAP32[$61>>2] = $$0;
  $62 = (($59) + 1)<<16>>16;
  HEAP16[$44>>1] = $62;
  STACKTOP = sp;return;
 }
 $49 = $47&65535;
 $50 = $49 << 1;
 $51 = $50&65535;
 HEAP16[$46>>1] = $51;
 $52 = ((($0)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $49 << 3;
 $55 = $54 & 262136;
 $56 = (_lily_realloc($53,$55)|0);
 HEAP32[$52>>2] = $56;
 $57 = ((($0)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP16[$44>>1]|0;
 $60 = $59&65535;
 $61 = (($58) + ($60<<2)|0);
 HEAP32[$61>>2] = $$0;
 $62 = (($59) + 1)<<16>>16;
 HEAP16[$44>>1] = $62;
 STACKTOP = sp;return;
}
function _find_in_cache($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$014$lcssa = 0, $$0144 = 0, $$015 = 0, $$03 = 0, $$05 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $$03 = HEAP32[$3>>2]|0;
 $4 = ($$03|0)==(0|0);
 L1: do {
  if ($4) {
   $$014$lcssa = 0;
  } else {
   $5 = HEAP8[$1>>0]|0;
   $$0144 = 0;$$05 = $$03;
   while(1) {
    $6 = ((($$05)) + 16|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==($5<<24>>24);
    if ($9) {
     $$015 = $$05;
     break;
    }
    $10 = (($$0144) + 1)|0;
    $11 = (($3) + ($10<<2)|0);
    $$0 = HEAP32[$11>>2]|0;
    $12 = ($$0|0)==(0|0);
    if ($12) {
     $$014$lcssa = $10;
     break L1;
    } else {
     $$0144 = $10;$$05 = $$0;
    }
   }
   return ($$015|0);
  }
 } while(0);
 HEAP32[$2>>2] = $$014$lcssa;
 $$015 = 0;
 return ($$015|0);
}
function _lily_gp_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01516 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($0)) + 10|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($4&65535)<($6&65535);
 if (!($7)) {
  $$2 = 0;
  return ($$2|0);
 }
 $8 = $4&65535;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $$01516 = $8;
 while(1) {
  $15 = (($10) + ($$01516<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==($2<<24>>24);
  $13 = (($$01516) + 1)|0;
  if ($20) {
   $$2 = $16;
   label = 5;
   break;
  }
  $11 = HEAP16[$5>>1]|0;
  $12 = $11&65535;
  $14 = ($13|0)<($12|0);
  if ($14) {
   $$01516 = $13;
  } else {
   $$2 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_gp_num_in_scope($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($3) - ($6))|0;
 return ($7|0);
}
function _lily_gp_save($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP16[$1>>1]|0;
 return ($2|0);
}
function _lily_gp_restore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 HEAP16[$2>>1] = $1;
 return;
}
function _lily_gp_save_and_hide($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 10|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP16[$3>>1]|0;
 HEAP16[$1>>1] = $4;
 return ($2|0);
}
function _lily_gp_restore_and_unhide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($0)) + 12|0);
 HEAP16[$4>>1] = $3;
 HEAP16[$2>>1] = $1;
 return;
}
function _lily_new_raiser() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = (_lily_malloc(164)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (_lily_new_msgbuf(64)|0);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = (_lily_new_msgbuf(64)|0);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = $1;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 0;
 return ($0|0);
}
function _lily_free_raiser($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $4 = $1;
  while(1) {
   $3 = ((($4)) + 4|0);
   $5 = HEAP32[$3>>2]|0;
   _lily_free($4);
   HEAP32[$0>>2] = $5;
   $$cast = $5;
   $6 = ($5|0)==(0);
   if ($6) {
    break;
   } else {
    $4 = $$cast;
   }
  }
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _lily_free_msgbuf($8);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _lily_free_msgbuf($10);
 _lily_free($0);
 return;
}
function _lily_jump_setup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_lily_malloc(164)|0);
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$5>>2] = $6;
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = $5;
  $9 = ((($5)) + 4|0);
  HEAP32[$9>>2] = 0;
  HEAP32[$0>>2] = $5;
  $10 = HEAP32[$0>>2]|0;
  return ($10|0);
 } else {
  HEAP32[$0>>2] = $3;
  $10 = HEAP32[$0>>2]|0;
  return ($10|0);
 }
 return (0)|0;
}
function _lily_release_jump($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function _lily_raise_syn($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 (_lily_mb_flush($4)|0);
 HEAP32[$2>>2] = $varargs;
 $5 = HEAP32[$3>>2]|0;
 _lily_mb_add_fmt_va($5,$1,$2);
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 8|0);
 _longjmp(($8|0),1);
 // unreachable;
}
function _lily_raise_err($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 (_lily_mb_flush($4)|0);
 HEAP32[$2>>2] = $varargs;
 $5 = HEAP32[$3>>2]|0;
 _lily_mb_add_fmt_va($5,$1,$2);
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 8|0);
 _longjmp(($8|0),1);
 // unreachable;
}
function _lily_name_for_error($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$ = $3 ? 10971 : 10977;
 return ($$|0);
}
function _lily_new_type_maker() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _lily_new_raw_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(20)|0);
 $2 = ((($1)) + 4|0);
 HEAP16[$2>>1] = 6;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($1)) + 6|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($1)) + 8|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($1)) + 10|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($1)) + 16|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$1>>2] = 0;
 return ($1|0);
}
function _lily_tm_reserve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$5>>2]|0;
 $9 = ($4>>>0)>($8>>>0);
 if ($9) {
  $11 = $8;
  while(1) {
   $10 = $11 << 1;
   $12 = ($4>>>0)>($10>>>0);
   if ($12) {
    $11 = $10;
   } else {
    break;
   }
  }
  HEAP32[$5>>2] = $10;
  $$lcssa = $10;
 } else {
  $$lcssa = $8;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = $$lcssa << 2;
 $15 = (_lily_realloc($13,$14)|0);
 HEAP32[$0>>2] = $15;
 return;
}
function _lily_tm_add_unchecked($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4<<2)|0);
 HEAP32[$5>>2] = $1;
 $6 = (($4) + 1)|0;
 HEAP32[$3>>2] = $6;
 return;
}
function _lily_tm_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  $8 = $6 << 3;
  $9 = $6 << 1;
  HEAP32[$5>>2] = $9;
  $10 = HEAP32[$0>>2]|0;
  $11 = (_lily_realloc($10,$8)|0);
  HEAP32[$0>>2] = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($12) + ($13<<2)|0);
 HEAP32[$14>>2] = $1;
 $15 = (($13) + 1)|0;
 HEAP32[$2>>2] = $15;
 return;
}
function _lily_tm_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>($1>>>0);
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6>>>0)>($1>>>0);
  if ($7) {
   $$lcssa = $6;
  } else {
   $9 = $6;
   while(1) {
    $8 = $9 << 1;
    $10 = ($8>>>0)>($1>>>0);
    if ($10) {
     break;
    } else {
     $9 = $8;
    }
   }
   HEAP32[$3>>2] = $8;
   $$lcssa = $8;
  }
  $11 = HEAP32[$0>>2]|0;
  $12 = $$lcssa << 2;
  $13 = (_lily_realloc($11,$12)|0);
  HEAP32[$0>>2] = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + ($1<<2)|0);
 HEAP32[$15>>2] = $2;
 return;
}
function _lily_tm_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function _lily_tm_make($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($3)) + 8|0);
 HEAP16[$5>>1] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($2))|0;
 $10 = (($6) + ($9<<2)|0);
 $11 = ((($3)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = $2&65535;
 $13 = ((($3)) + 10|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($3)) + 6|0);
 HEAP16[$14>>1] = 0;
 HEAP32[$3>>2] = 0;
 $15 = (_lookup_type($3)|0);
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $$0 = $15;
  $19 = HEAP32[$7>>2]|0;
  $20 = (($19) - ($2))|0;
  HEAP32[$7>>2] = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($3)) + 4|0);
 HEAP16[$17>>1] = 6;
 $18 = (_build_real_type_for($3)|0);
 $$0 = $18;
 $19 = HEAP32[$7>>2]|0;
 $20 = (($19) - ($2))|0;
 HEAP32[$7>>2] = $20;
 STACKTOP = sp;return ($$0|0);
}
function _lookup_type($0) {
 $0 = $0|0;
 var $$02636 = 0, $$028 = 0, $$02838 = 0, $$02839 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 52|0);
 $$02838 = HEAP32[$3>>2]|0;
 $4 = ($$02838|0)==(0|0);
 if ($4) {
  $$3 = 0;
  return ($$3|0);
 }
 $5 = ((($0)) + 10|0);
 $6 = ((($0)) + 6|0);
 $7 = ((($0)) + 16|0);
 $$02839 = $$02838;
 L4: while(1) {
  $8 = ((($$02839)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  L6: do {
   if (!($10)) {
    $11 = ((($$02839)) + 10|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = HEAP16[$5>>1]|0;
    $14 = ($12<<16>>16)==($13<<16>>16);
    if ($14) {
     $15 = ((($$02839)) + 6|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = HEAP16[$6>>1]|0;
     $18 = $17 ^ $16;
     $19 = $18 & -51;
     $20 = ($19<<16>>16)==(0);
     if ($20) {
      $21 = HEAP16[$11>>1]|0;
      $22 = ($21<<16>>16)==(0);
      if ($22) {
       $$3 = $$02839;
       label = 11;
       break L4;
      }
      $23 = HEAP32[$8>>2]|0;
      $24 = HEAP32[$7>>2]|0;
      $$02636 = 0;
      while(1) {
       $29 = (($23) + ($$02636<<2)|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($24) + ($$02636<<2)|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($30|0)==($32|0);
       $27 = (($$02636) + 1)|0;
       if (!($33)) {
        break L6;
       }
       $25 = HEAP16[$11>>1]|0;
       $26 = $25&65535;
       $28 = ($27|0)<($26|0);
       if ($28) {
        $$02636 = $27;
       } else {
        $$3 = $$02839;
        label = 11;
        break L4;
       }
      }
     }
    }
   }
  } while(0);
  $$028 = HEAP32[$$02839>>2]|0;
  $34 = ($$028|0)==(0|0);
  if ($34) {
   $$3 = 0;
   label = 11;
   break;
  } else {
   $$02839 = $$028;
  }
 }
 if ((label|0) == 11) {
  return ($$3|0);
 }
 return (0)|0;
}
function _build_real_type_for($0) {
 $0 = $0|0;
 var $$034 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_lily_new_raw_type($2)|0);
 ;HEAP32[$3>>2]=HEAP32[$0>>2]|0;HEAP32[$3+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$0+16>>2]|0;
 $4 = ((($0)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 << 2;
 $8 = (_lily_malloc($7)|0);
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 _memcpy(($8|0),($10|0),($7|0))|0;
 $11 = ((($3)) + 16|0);
 HEAP32[$11>>2] = $8;
 $12 = ((($3)) + 10|0);
 HEAP16[$12>>1] = $5;
 $13 = ((($3)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$15>>2] = $3;
 $17 = ((($3)) + 6|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18 & 5;
 HEAP16[$17>>1] = $19;
 $20 = HEAP16[$12>>1]|0;
 $21 = ($20<<16>>16)==(0);
 if ($21) {
  return ($3|0);
 }
 $22 = HEAP32[$11>>2]|0;
 $23 = HEAP16[$12>>1]|0;
 $24 = $23&65535;
 $$034 = 0;
 while(1) {
  $25 = (($22) + ($$034<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $28 = ((($26)) + 6|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 & 50;
   $31 = HEAP16[$17>>1]|0;
   $32 = $31 | $30;
   HEAP16[$17>>1] = $32;
  }
  $33 = (($$034) + 1)|0;
  $34 = ($33|0)<($24|0);
  if ($34) {
   $$034 = $33;
  } else {
   break;
  }
 }
 return ($3|0);
}
function _lily_tm_make_call($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP16[$6>>1] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($3))|0;
 $11 = (($7) + ($10<<2)|0);
 $12 = ((($4)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = $3&65535;
 $14 = ((($4)) + 10|0);
 HEAP16[$14>>1] = $13;
 $15 = $1&65535;
 $16 = ((($4)) + 6|0);
 HEAP16[$16>>1] = $15;
 HEAP32[$4>>2] = 0;
 $17 = (_lookup_type($4)|0);
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $$0 = $17;
  $21 = HEAP32[$8>>2]|0;
  $22 = (($21) - ($3))|0;
  HEAP32[$8>>2] = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ((($4)) + 4|0);
 HEAP16[$19>>1] = 6;
 $20 = (_build_real_type_for($4)|0);
 $$0 = $20;
 $21 = HEAP32[$8>>2]|0;
 $22 = (($21) - ($3))|0;
 HEAP32[$8>>2] = $22;
 STACKTOP = sp;return ($$0|0);
}
function _lily_tm_pos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_tm_restore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _lily_free_type_maker($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_builtin_loader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($1|0) {
  case 2:  {
   $$0 = 16;
   break;
  }
  case 3:  {
   $$0 = 17;
   break;
  }
  case 5:  {
   $$0 = 18;
   break;
  }
  case 7:  {
   $$0 = 19;
   break;
  }
  case 8:  {
   $$0 = 20;
   break;
  }
  case 9:  {
   $$0 = 21;
   break;
  }
  case 10:  {
   $$0 = 22;
   break;
  }
  case 12:  {
   $$0 = 23;
   break;
  }
  case 14:  {
   $$0 = 24;
   break;
  }
  case 16:  {
   $$0 = 25;
   break;
  }
  case 18:  {
   $$0 = 26;
   break;
  }
  case 22:  {
   $$0 = 27;
   break;
  }
  case 23:  {
   $$0 = 28;
   break;
  }
  case 24:  {
   $$0 = 29;
   break;
  }
  case 25:  {
   $$0 = 30;
   break;
  }
  case 26:  {
   $$0 = 31;
   break;
  }
  case 27:  {
   $$0 = 32;
   break;
  }
  case 28:  {
   $$0 = 33;
   break;
  }
  case 31:  {
   $$0 = 34;
   break;
  }
  case 32:  {
   $$0 = 35;
   break;
  }
  case 33:  {
   $$0 = 36;
   break;
  }
  case 34:  {
   $$0 = 37;
   break;
  }
  case 35:  {
   $$0 = 38;
   break;
  }
  case 36:  {
   $$0 = 39;
   break;
  }
  case 37:  {
   $$0 = 40;
   break;
  }
  case 38:  {
   $$0 = 41;
   break;
  }
  case 39:  {
   $$0 = 42;
   break;
  }
  case 40:  {
   $$0 = 43;
   break;
  }
  case 41:  {
   $$0 = 44;
   break;
  }
  case 43:  {
   $$0 = 45;
   break;
  }
  case 45:  {
   $$0 = 46;
   break;
  }
  case 46:  {
   $$0 = 47;
   break;
  }
  case 47:  {
   $$0 = 48;
   break;
  }
  case 48:  {
   $$0 = 49;
   break;
  }
  case 50:  {
   $$0 = 50;
   break;
  }
  case 52:  {
   $$0 = 51;
   break;
  }
  case 54:  {
   $$0 = 52;
   break;
  }
  case 55:  {
   $$0 = 53;
   break;
  }
  case 56:  {
   $$0 = 54;
   break;
  }
  case 57:  {
   $$0 = 55;
   break;
  }
  case 58:  {
   $$0 = 56;
   break;
  }
  case 59:  {
   $$0 = 57;
   break;
  }
  case 60:  {
   $$0 = 58;
   break;
  }
  case 61:  {
   $$0 = 59;
   break;
  }
  case 62:  {
   $$0 = 60;
   break;
  }
  case 63:  {
   $$0 = 61;
   break;
  }
  case 64:  {
   $$0 = 62;
   break;
  }
  case 65:  {
   $$0 = 63;
   break;
  }
  case 66:  {
   $$0 = 64;
   break;
  }
  case 67:  {
   $$0 = 65;
   break;
  }
  case 68:  {
   $$0 = 66;
   break;
  }
  case 69:  {
   $$0 = 67;
   break;
  }
  case 70:  {
   $$0 = 68;
   break;
  }
  case 71:  {
   $$0 = 69;
   break;
  }
  case 73:  {
   $$0 = 70;
   break;
  }
  case 74:  {
   $$0 = 71;
   break;
  }
  case 75:  {
   $$0 = 72;
   break;
  }
  case 76:  {
   $$0 = 73;
   break;
  }
  case 77:  {
   $$0 = 74;
   break;
  }
  case 78:  {
   $$0 = 75;
   break;
  }
  case 79:  {
   $$0 = 76;
   break;
  }
  case 80:  {
   $$0 = 77;
   break;
  }
  case 81:  {
   $$0 = 78;
   break;
  }
  case 82:  {
   $$0 = 79;
   break;
  }
  case 86:  {
   $$0 = 80;
   break;
  }
  case 87:  {
   $$0 = 81;
   break;
  }
  case 88:  {
   $$0 = 82;
   break;
  }
  case 89:  {
   $$0 = 83;
   break;
  }
  case 93:  {
   $$0 = 84;
   break;
  }
  case 95:  {
   $$0 = 85;
   break;
  }
  case 96:  {
   $$0 = 86;
   break;
  }
  case 97:  {
   $$0 = 87;
   break;
  }
  case 98:  {
   $$0 = 88;
   break;
  }
  case 99:  {
   $$0 = 89;
   break;
  }
  case 100:  {
   $$0 = 90;
   break;
  }
  case 101:  {
   $$0 = 91;
   break;
  }
  case 102:  {
   $$0 = 92;
   break;
  }
  case 103:  {
   $$0 = 93;
   break;
  }
  case 104:  {
   $$0 = 94;
   break;
  }
  case 105:  {
   $$0 = 95;
   break;
  }
  case 106:  {
   $$0 = 96;
   break;
  }
  case 107:  {
   $$0 = 97;
   break;
  }
  case 108:  {
   $$0 = 98;
   break;
  }
  case 109:  {
   $$0 = 99;
   break;
  }
  case 110:  {
   $$0 = 100;
   break;
  }
  case 111:  {
   $$0 = 101;
   break;
  }
  case 112:  {
   $$0 = 102;
   break;
  }
  case 113:  {
   $$0 = 103;
   break;
  }
  case 114:  {
   $$0 = 104;
   break;
  }
  case 117:  {
   $$0 = 105;
   break;
  }
  case 118:  {
   $$0 = 106;
   break;
  }
  case 119:  {
   $$0 = 107;
   break;
  }
  case 120:  {
   _lily_builtin_var_stdin($0);
   $$0 = 0;
   break;
  }
  case 121:  {
   _lily_builtin_var_stderr($0);
   $$0 = 0;
   break;
  }
  case 122:  {
   _lily_builtin_var_stdout($0);
   $$0 = 0;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _lily_builtin_var_stdin($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[699]|0;
 _new_builtin_file($0,$1,15683);
 return;
}
function _lily_builtin_var_stderr($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[792]|0;
 _new_builtin_file($0,$1,15681);
 return;
}
function _lily_builtin_var_stdout($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[824]|0;
 _new_builtin_file($0,$1,15681);
 return;
}
function _lily_builtin_ValueError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,23);
 return;
}
function _lily_builtin_String_upper($0) {
 $0 = $0|0;
 var $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_as_string_raw($1)|0);
 _lily_push_string($0,$6);
 $7 = (_lily_stack_get_top($0)|0);
 $8 = (_lily_as_string_raw($7)|0);
 $9 = ($5|0)>(0);
 if ($9) {
  $$021 = 0;
 } else {
  _lily_return_top($0);
  return;
 }
 while(1) {
  $10 = (($8) + ($$021)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (_islower($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = (_toupper($12)|0);
   $16 = $15&255;
   HEAP8[$10>>0] = $16;
  }
  $17 = (($$021) + 1)|0;
  $exitcond = ($17|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$021 = $17;
  }
 }
 _lily_return_top($0);
 return;
}
function _lily_builtin_String_trim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (_lily_arg_value($0,0)|0);
 ;HEAP8[$1>>0]=HEAP8[15676>>0]|0;HEAP8[$1+1>>0]=HEAP8[15676+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[15676+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[15676+3>>0]|0;HEAP8[$1+4>>0]=HEAP8[15676+4>>0]|0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = $1;
 $5 = (_strlen($1)|0);
 $6 = ((($2)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = (_lstrip_ascii_start($3,$2)|0);
 $8 = ((($3)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7|0)==($11|0);
 if ($12) {
  _lily_push_string($0,21807);
  _lily_return_top($0);
  STACKTOP = sp;return;
 } else {
  $13 = (_rstrip_ascii_stop($3,$2)|0);
  $14 = ((($9)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($7)|0);
  $17 = (($13) - ($7))|0;
  _lily_push_string_sized($0,$16,$17);
  _lily_return_top($0);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_String_to_bytestring($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_raw($1)|0);
 $3 = (_lily_string_length($1)|0);
 _lily_push_bytestring($0,$2,$3);
 _lily_return_top($0);
 return;
}
function _lily_builtin_String_strip($0) {
 $0 = $0|0;
 var $$049 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = (_lstrip_ascii_start($1,$9)|0);
   $14 = HEAP32[$3>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($13|0)==($16|0);
   if ($17) {
    $$049 = $13;
   } else {
    $18 = (_rstrip_utf8_stop($1,$9)|0);
    $$049 = $18;
   }
   $19 = HEAP32[$3>>2]|0;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($13)|0);
   $23 = (($$049) - ($13))|0;
   _lily_push_string_sized($0,$22,$23);
   _lily_return_top($0);
   return;
  }
 }
 _lily_return_value($0,$1);
 return;
}
function _lily_builtin_String_starts_with($0) {
 $0 = $0|0;
 var $$0 = 0, $$02930 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($4)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<($12>>>0);
 if ($15) {
  _lily_return_boolean($0,0);
  return;
 }
 $16 = ($12|0)>(0);
 L5: do {
  if ($16) {
   $$02930 = 0;
   while(1) {
    $19 = (($6) + ($$02930)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = (($10) + ($$02930)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($20<<24>>24)==($22<<24>>24);
    $17 = (($$02930) + 1)|0;
    if (!($23)) {
     $$0 = 0;
     break L5;
    }
    $18 = ($17|0)<($12|0);
    if ($18) {
     $$02930 = $17;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_split($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = (_lily_arg_string($0,0)|0);
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_lily_arg_string($0,1)|0);
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   _lily_ValueError($0,15388,$vararg_buffer);
   $$0 = $5;
  } else {
   $$0 = $5;
  }
 } else {
  $9 = ((($1)) + 8|0);
  HEAP32[$9>>2] = 15418;
  $10 = ((($1)) + 4|0);
  HEAP32[$10>>2] = 1;
  $$0 = $1;
 }
 $11 = ((($2)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($$0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _string_split_by_val($0,$12,$14);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_String_slice($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _do_str_slice($0,0);
 return;
}
function _lily_builtin_String_rstrip($0) {
 $0 = $0|0;
 var $$0 = 0, $$03941 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($9)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strlen($14)|0);
   $16 = ($15|0)==(0);
   L4: do {
    if ($16) {
     label = 7;
    } else {
     $$03941 = 0;
     while(1) {
      $19 = (($14) + ($$03941)|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)<(0);
      $17 = (($$03941) + 1)|0;
      if ($21) {
       break;
      }
      $18 = ($17>>>0)<($15>>>0);
      if ($18) {
       $$03941 = $17;
      } else {
       label = 7;
       break L4;
      }
     }
     $23 = (_rstrip_utf8_stop($1,$9)|0);
     $$0 = $23;
    }
   } while(0);
   if ((label|0) == 7) {
    $22 = (_rstrip_ascii_stop($1,$9)|0);
    $$0 = $22;
   }
   $24 = HEAP32[$3>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _lily_push_string_sized($0,$26,$$0);
   _lily_return_top($0);
   return;
  }
 }
 _lily_return_value($0,$1);
 return;
}
function _lily_builtin_String_replace($0) {
 $0 = $0|0;
 var $$074$ = 0, $$07481 = 0, $$07584 = 0, $$07783 = 0, $$082 = 0, $$2 = 0, $$279 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_arg_string($0,1)|0);
 $3 = (_lily_string_length($1)|0);
 $4 = (_lily_string_length($2)|0);
 $5 = ($4|0)>($3|0);
 if ($5) {
  $6 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$6);
  return;
 }
 $7 = (_lily_msgbuf_get($0)|0);
 $8 = (_lily_string_raw($1)|0);
 $9 = (_lily_string_raw($2)|0);
 $10 = (_lily_arg_string_raw($0,2)|0);
 $11 = HEAP8[$9>>0]|0;
 $12 = ($3|0)>(0);
 if ($12) {
  $13 = ($4|0)>(1);
  $14 = (($4) + -1)|0;
  $$07584 = 0;$$07783 = 0;
  while(1) {
   $15 = (($8) + ($$07584)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)!=($11<<24>>24);
   $18 = (($$07584) + ($4))|0;
   $19 = ($18|0)>($3|0);
   $or$cond = $19 | $17;
   do {
    if ($or$cond) {
     $$2 = $$07584;$$279 = $$07783;
    } else {
     if ($13) {
      $$07481 = 1;$$082 = 1;
      while(1) {
       $20 = (($9) + ($$082)|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = (($$082) + ($$07584))|0;
       $23 = (($8) + ($22)|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = ($21<<24>>24)==($24<<24>>24);
       $$074$ = $25 ? $$07481 : 0;
       $26 = (($$082) + 1)|0;
       $exitcond = ($26|0)==($4|0);
       if ($exitcond) {
        break;
       } else {
        $$07481 = $$074$;$$082 = $26;
       }
      }
      $27 = ($$074$|0)==(0);
      if ($27) {
       $$2 = $$07584;$$279 = $$07783;
       break;
      }
     }
     $28 = ($$07584|0)==($$07783|0);
     if (!($28)) {
      _lily_mb_add_slice($7,$8,$$07783,$$07584);
     }
     _lily_mb_add($7,$10);
     $29 = (($14) + ($$07584))|0;
     $$2 = $29;$$279 = $18;
    }
   } while(0);
   $30 = (($$2) + 1)|0;
   $31 = ($30|0)<($3|0);
   if ($31) {
    $$07584 = $30;$$07783 = $$279;
   } else {
    break;
   }
  }
  $32 = ($30|0)==($$279|0);
  if (!($32)) {
   _lily_mb_add_slice($7,$8,$$279,$30);
  }
 }
 $33 = (_lily_mb_raw($7)|0);
 _lily_push_string($0,$33);
 _lily_return_top($0);
 return;
}
function _lily_builtin_String_parse_i($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$pn = 0, $$043$ph = 0, $$044$lcssa61 = 0, $$04453 = 0, $$045 = 0, $$1 = 0, $$2$ph = 0, $$254 = 0, $$lcssa62 = 0, $$off = 0, $$off51 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond48 = 0, $or$cond49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string_raw($0,0)|0);
 $2 = HEAP8[$1>>0]|0;
 switch ($2<<24>>24) {
 case 45:  {
  $3 = ((($1)) + 1|0);
  $$0 = $3;$$045 = 1;
  break;
 }
 case 43:  {
  $4 = ((($1)) + 1|0);
  $$0 = $4;$$045 = 0;
  break;
 }
 default: {
  $$0 = $1;$$045 = 0;
 }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = ($5<<24>>24)==(48);
 if ($6) {
  $$0$pn = $$0;
  while(1) {
   $$1 = ((($$0$pn)) + 1|0);
   $7 = HEAP8[$$1>>0]|0;
   $8 = ($7<<24>>24)==(48);
   if ($8) {
    $$0$pn = $$1;
   } else {
    $$043$ph = 1;$$2$ph = $$1;
    break;
   }
  }
 } else {
  $$043$ph = 0;$$2$ph = $$0;
 }
 $9 = HEAP8[$$2$ph>>0]|0;
 $$off51 = (($9) + -48)<<24>>24;
 $10 = ($$off51&255)<(10);
 if ($10) {
  $$04453 = 0;$$254 = $$2$ph;$12 = $9;$13 = 0;$14 = 0;
  while(1) {
   $11 = $12 << 24 >> 24;
   $15 = (___muldi3(($13|0),($14|0),10,0)|0);
   $16 = tempRet0;
   $17 = (($11) + -48)|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = (_i64Add(($17|0),($19|0),($15|0),($16|0))|0);
   $21 = tempRet0;
   $22 = ((($$254)) + 1|0);
   $23 = (($$04453) + 1)|0;
   $24 = HEAP8[$22>>0]|0;
   $$off = (($24) + -48)<<24>>24;
   $25 = ($$off&255)<(10);
   $26 = ($23|0)!=(20);
   $or$cond49 = $26 & $25;
   if ($or$cond49) {
    $$04453 = $23;$$254 = $22;$12 = $24;$13 = $20;$14 = $21;
   } else {
    break;
   }
  }
  $27 = (_i64Add(($$045|0),0,-1,2147483647)|0);
  $28 = tempRet0;
  $29 = ($21>>>0)>($28>>>0);
  $30 = ($20>>>0)>($27>>>0);
  $31 = ($21|0)==($28|0);
  $32 = $31 & $30;
  $33 = $29 | $32;
  if (!($33)) {
   $$044$lcssa61 = $23;$$lcssa62 = $24;$38 = $20;$39 = $21;
   label = 9;
  }
 } else {
  $$044$lcssa61 = 0;$$lcssa62 = $9;$38 = 0;$39 = 0;
  label = 9;
 }
 if ((label|0) == 9) {
  $34 = ($$lcssa62<<24>>24)!=(0);
  $35 = $$043$ph | $$044$lcssa61;
  $36 = ($35|0)==(0);
  $or$cond48 = $36 | $34;
  if (!($or$cond48)) {
   $37 = ($$045|0)==(0);
   $40 = (_i64Subtract(0,0,($38|0),($39|0))|0);
   $41 = tempRet0;
   $42 = $37 ? $38 : $40;
   $43 = $37 ? $39 : $41;
   $44 = (_lily_push_variant($0,14,1)|0);
   _lily_push_integer($0,$42,$43);
   _lily_con_set_from_stack($0,$44,0);
   _lily_return_top($0);
   return;
  }
 }
 _lily_return_none($0);
 return;
}
function _lily_builtin_String_lstrip($0) {
 $0 = $0|0;
 var $$0 = 0, $$04446 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($9)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_strlen($14)|0);
   $16 = ($15|0)==(0);
   L4: do {
    if ($16) {
     label = 7;
    } else {
     $$04446 = 0;
     while(1) {
      $19 = (($14) + ($$04446)|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)<(0);
      $17 = (($$04446) + 1)|0;
      if ($21) {
       break;
      }
      $18 = ($17>>>0)<($15>>>0);
      if ($18) {
       $$04446 = $17;
      } else {
       label = 7;
       break L4;
      }
     }
     $23 = (_lstrip_utf8_start($1,$9)|0);
     $$0 = $23;
    }
   } while(0);
   if ((label|0) == 7) {
    $22 = (_lstrip_ascii_start($1,$9)|0);
    $$0 = $22;
   }
   $24 = HEAP32[$3>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + ($$0)|0);
   $28 = ((($24)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) - ($$0))|0;
   _lily_push_string_sized($0,$27,$30);
   _lily_return_top($0);
   return;
  }
 }
 _lily_return_value($0,$1);
 return;
}
function _lily_builtin_String_lower($0) {
 $0 = $0|0;
 var $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_as_string_raw($1)|0);
 _lily_push_string($0,$6);
 $7 = (_lily_stack_get_top($0)|0);
 $8 = (_lily_as_string_raw($7)|0);
 $9 = ($5|0)>(0);
 if ($9) {
  $$021 = 0;
 } else {
  _lily_return_top($0);
  return;
 }
 while(1) {
  $10 = (($8) + ($$021)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (_isupper($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = (_tolower($12)|0);
   $16 = $15&255;
   HEAP8[$10>>0] = $16;
  }
  $17 = (($$021) + 1)|0;
  $exitcond = ($17|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$021 = $17;
  }
 }
 _lily_return_top($0);
 return;
}
function _lily_builtin_String_is_space($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = (_isspace($10)|0);
    $12 = ($11|0)==(0);
    $6 = (($$02021) + 1)|0;
    if ($12) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_is_digit($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $isdigittmp = (($10) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $6 = (($$02021) + 1)|0;
    if (!($isdigit)) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_is_alpha($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = (_isalpha($10)|0);
    $12 = ($11|0)==(0);
    $6 = (($$02021) + 1)|0;
    if ($12) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_is_alnum($0) {
 $0 = $0|0;
 var $$0 = 0, $$02021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_string($0,0)|0);
 $2 = (_lily_string_length($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_return_boolean($0,0);
  return;
 }
 $4 = (_lily_string_raw($1)|0);
 $5 = ($2|0)>(0);
 L5: do {
  if ($5) {
   $$02021 = 0;
   while(1) {
    $8 = (($4) + ($$02021)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 << 24 >> 24;
    $11 = (_isalnum($10)|0);
    $12 = ($11|0)==(0);
    $6 = (($$02021) + 1)|0;
    if ($12) {
     $$0 = 0;
     break L5;
    }
    $7 = ($6|0)<($2|0);
    if ($7) {
     $$02021 = $6;
    } else {
     $$0 = 1;
     break;
    }
   }
  } else {
   $$0 = 1;
  }
 } while(0);
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_html_encode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_as_string_raw($1)|0);
 $3 = (_lily_msgbuf_get($0)|0);
 $4 = (_lily_mb_html_escape($3,$2)|0);
 $5 = ($4|0)==($2|0);
 if ($5) {
  _lily_return_value($0,$1);
  return;
 } else {
  $6 = (_lily_mb_raw($3)|0);
  _lily_push_string($0,$6);
  _lily_return_top($0);
  return;
 }
}
function _lily_builtin_String_find($0) {
 $0 = $0|0;
 var $$0 = 0, $$07077 = 0, $$07178 = 0, $$07178$in = 0, $$07280 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond73 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(3);
 if ($4) {
  $5 = (_lily_arg_integer($0,2)|0);
  $6 = tempRet0;
  $$0 = $5;
 } else {
  $$0 = 0;
 }
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($14)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($12|0)<($18|0);
 $20 = ($18|0)==(0);
 $or$cond = $19 | $20;
 $21 = ($$0|0)>($12|0);
 $or$cond73 = $21 | $or$cond;
 if (!($or$cond73)) {
  $22 = (($10) + ($$0)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (14682 + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(-1);
  if (!($27)) {
   $28 = (($12) - ($18))|0;
   $29 = HEAP8[$16>>0]|0;
   $30 = ($$0|0)>($28|0);
   L7: do {
    if (!($30)) {
     $31 = ($18|0)>(1);
     $$07280 = $$0;
     L9: while(1) {
      $32 = (($10) + ($$07280)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==($29<<24>>24);
      L11: do {
       if ($34) {
        if ($31) {
         $$07077 = 1;$$07178$in = $$07280;
        } else {
         break L9;
        }
        while(1) {
         $$07178 = (($$07178$in) + 1)|0;
         $37 = (($10) + ($$07178)|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = (($16) + ($$07077)|0);
         $40 = HEAP8[$39>>0]|0;
         $41 = ($38<<24>>24)==($40<<24>>24);
         $35 = (($$07077) + 1)|0;
         if (!($41)) {
          break L11;
         }
         $36 = ($35|0)<($18|0);
         if ($36) {
          $$07077 = $35;$$07178$in = $$07178;
         } else {
          break L9;
         }
        }
       }
      } while(0);
      $42 = (($$07280) + 1)|0;
      $43 = ($$07280|0)<($28|0);
      if ($43) {
       $$07280 = $42;
      } else {
       break L7;
      }
     }
     $44 = (_lily_push_variant($0,14,1)|0);
     $45 = ($$07280|0)<(0);
     $46 = $45 << 31 >> 31;
     _lily_push_integer($0,$$07280,$46);
     _lily_con_set_from_stack($0,$44,0);
     _lily_return_top($0);
     return;
    }
   } while(0);
   _lily_return_none($0);
   return;
  }
 }
 _lily_return_none($0);
 return;
}
function _lily_builtin_String_ends_with($0) {
 $0 = $0|0;
 var $$0 = 0, $$036 = 0, $$036$in = 0, $$037 = 0, $$037$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_value($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($8)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>($12|0);
 if ($15) {
  _lily_return_boolean($0,0);
  return;
 } else {
  $$036$in = $14;$$037$in = $12;
 }
 while(1) {
  $$036 = (($$036$in) + -1)|0;
  $$037 = (($$037$in) + -1)|0;
  $16 = ($$036$in|0)>(0);
  if (!($16)) {
   $$0 = 1;
   break;
  }
  $17 = (($6) + ($$037)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (($10) + ($$036)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = ($18<<24>>24)==($20<<24>>24);
  if ($21) {
   $$036$in = $$036;$$037$in = $$037;
  } else {
   $$0 = 0;
   break;
  }
 }
 _lily_return_boolean($0,$$0);
 return;
}
function _lily_builtin_String_format($0) {
 $0 = $0|0;
 var $$0 = 0, $$068$lcssa = 0, $$06885 = 0, $$069$lcssa97 = 0, $$069$lcssa98 = 0, $$06979 = 0, $$07078 = 0, $$071$lcssa96 = 0, $$1$lcssa100 = 0, $$1$lcssa99 = 0, $$180 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $isdigit73 = 0, $isdigit7376 = 0, $isdigittmp72 = 0, $isdigittmp7275 = 0, $isdigittmp7281 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_string_raw($0,0)|0);
 $2 = (_lily_arg_container($0,1)|0);
 $3 = (_lily_con_size($2)|0);
 $4 = (_lily_msgbuf_get($0)|0);
 $5 = (_char_index($1,0)|0);
 $6 = ($5|0)>(-1);
 if ($6) {
  $$06885 = 0;$7 = $5;
 } else {
  $$068$lcssa = 0;
  $30 = (_strlen($1)|0);
  _lily_mb_add_slice($4,$1,$$068$lcssa,$30);
  $31 = (_lily_mb_raw($4)|0);
  _lily_push_string($0,$31);
  _lily_return_top($0);
  STACKTOP = sp;return;
 }
 while(1) {
  $8 = ($7|0)>($$06885|0);
  if ($8) {
   _lily_mb_add_slice($4,$1,$$06885,$7);
   $$0 = $7;
  } else {
   $$0 = $7;
  }
  while(1) {
   $9 = (($$0) + 1)|0;
   $10 = (($1) + ($9)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(48);
   if ($12) {
    $$0 = $9;
   } else {
    break;
   }
  }
  $13 = (($7) + 1)|0;
  $14 = $11 << 24 >> 24;
  $isdigittmp7275 = (($14) + -48)|0;
  $isdigit7376 = ($isdigittmp7275>>>0)<(10);
  if ($isdigit7376) {
   $$06979 = 0;$$07078 = 0;$$180 = $9;$isdigittmp7281 = $isdigittmp7275;
   while(1) {
    $15 = ($$06979*10)|0;
    $16 = (($15) + ($isdigittmp7281))|0;
    $17 = (($$180) + 1)|0;
    $18 = (($1) + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = (($$07078) + 1)|0;
    $21 = ($20|0)<(2);
    $22 = $19 << 24 >> 24;
    $isdigittmp72 = (($22) + -48)|0;
    $isdigit73 = ($isdigittmp72>>>0)<(10);
    $or$cond = $21 & $isdigit73;
    if ($or$cond) {
     $$06979 = $16;$$07078 = $20;$$180 = $17;$isdigittmp7281 = $isdigittmp72;
    } else {
     break;
    }
   }
   if ($isdigit73) {
    _lily_ValueError($0,15266,$vararg_buffer);
    $$069$lcssa98 = $16;$$1$lcssa100 = $17;
   } else {
    $$069$lcssa97 = $16;$$071$lcssa96 = $19;$$1$lcssa99 = $17;
    label = 9;
   }
  } else {
   $$069$lcssa97 = 0;$$071$lcssa96 = $11;$$1$lcssa99 = $9;
   label = 9;
  }
  do {
   if ((label|0) == 9) {
    label = 0;
    $23 = ($13|0)==($$1$lcssa99|0);
    if ($23) {
     _lily_ValueError($0,15297,$vararg_buffer1);
     $$069$lcssa98 = $$069$lcssa97;$$1$lcssa100 = $$1$lcssa99;
     break;
    }
    $24 = ($$071$lcssa96<<24>>24)==(125);
    if (!($24)) {
     _lily_ValueError($0,15324,$vararg_buffer3);
     $$069$lcssa98 = $$069$lcssa97;$$1$lcssa100 = $$1$lcssa99;
     break;
    }
    $25 = ($$069$lcssa97|0)<($3|0);
    if ($25) {
     $$069$lcssa98 = $$069$lcssa97;$$1$lcssa100 = $$1$lcssa99;
    } else {
     _lily_IndexError($0,15357,$vararg_buffer5);
     $$069$lcssa98 = $$069$lcssa97;$$1$lcssa100 = $$1$lcssa99;
    }
   }
  } while(0);
  $26 = (($$1$lcssa100) + 1)|0;
  $27 = (_lily_con_get($2,$$069$lcssa98)|0);
  _lily_mb_add_value($4,$0,$27);
  $28 = (_char_index($1,$26)|0);
  $29 = ($28|0)>(-1);
  if ($29) {
   $$06885 = $26;$7 = $28;
  } else {
   $$068$lcssa = $26;
   break;
  }
 }
 $30 = (_strlen($1)|0);
 _lily_mb_add_slice($4,$1,$$068$lcssa,$30);
 $31 = (_lily_mb_raw($4)|0);
 _lily_push_string($0,$31);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_RuntimeError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,22);
 return;
}
function _lily_builtin_Result_success($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _result_optionize($0,1);
 return;
}
function _lily_builtin_Result_is_success($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _result_is_success_or_failure($0,1);
 return;
}
function _lily_builtin_Result_is_failure($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _result_is_success_or_failure($0,0);
 return;
}
function _lily_builtin_Result_failure($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _result_optionize($0,0);
 return;
}
function _lily_builtin_Option_unwrap_or_else($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $5 = (_lily_arg_function($0,1)|0);
  _lily_call_prepare($0,$5);
  _lily_call($0,0);
  $6 = (_lily_call_result($0)|0);
  _lily_return_value($0,$6);
  return;
 } else {
  $3 = (_lily_arg_container($0,0)|0);
  $4 = (_lily_con_get($3,0)|0);
  _lily_return_value($0,$4);
  return;
 }
}
function _lily_builtin_Option_unwrap_or($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $5 = (_lily_arg_value($0,1)|0);
  $$0 = $5;
  _lily_return_value($0,$$0);
  return;
 } else {
  $3 = (_lily_arg_container($0,0)|0);
  $4 = (_lily_con_get($3,0)|0);
  $$0 = $4;
  _lily_return_value($0,$$0);
  return;
 }
}
function _lily_builtin_Option_unwrap($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_ValueError($0,15243,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $3 = (_lily_arg_container($0,0)|0);
  $4 = (_lily_con_get($3,0)|0);
  _lily_return_value($0,$4);
  STACKTOP = sp;return;
 }
}
function _lily_builtin_Option_or_else($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = (_lily_arg_function($0,1)|0);
  _lily_call_prepare($0,$4);
  _lily_call($0,0);
  $5 = (_lily_call_result($0)|0);
  _lily_return_value($0,$5);
  return;
 } else {
  $3 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$3);
  return;
 }
}
function _lily_builtin_Option_or($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = (_lily_arg_value($0,1)|0);
  _lily_return_value($0,$4);
  return;
 } else {
  $3 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$3);
  return;
 }
}
function _lily_builtin_Option_map($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_none($0);
  return;
 } else {
  $3 = (_lily_arg_container($0,0)|0);
  $4 = (_lily_arg_function($0,1)|0);
  _lily_call_prepare($0,$4);
  $5 = (_lily_con_get($3,0)|0);
  _lily_push_value($0,$5);
  _lily_call($0,1);
  $6 = (_lily_push_variant($0,14,1)|0);
  $7 = (_lily_call_result($0)|0);
  _lily_con_set($6,0,$7);
  _lily_return_top($0);
  return;
 }
}
function _lily_builtin_Option_is_some($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 _lily_return_boolean($0,$1);
 return;
}
function _lily_builtin_Option_is_none($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 _lily_return_boolean($0,$3);
 return;
}
function _lily_builtin_Option_and_then($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_return_none($0);
  return;
 } else {
  $3 = (_lily_arg_container($0,0)|0);
  $4 = (_lily_arg_function($0,1)|0);
  _lily_call_prepare($0,$4);
  $5 = (_lily_con_get($3,0)|0);
  _lily_push_value($0,$5);
  _lily_call($0,1);
  $6 = (_lily_call_result($0)|0);
  _lily_return_value($0,$6);
  return;
 }
}
function _lily_builtin_Option_and($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_isa($0,0,14)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $4 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$4);
  return;
 } else {
  $3 = (_lily_arg_value($0,1)|0);
  _lily_return_value($0,$3);
  return;
 }
}
function _lily_builtin_List_unshift($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 _lily_list_insert($1,0,$2);
 return;
}
function _lily_builtin_List_slice($0) {
 $0 = $0|0;
 var $$$151 = 0, $$04853 = 0, $$049 = 0, $$050 = 0, $$054 = 0, $$1 = 0, $$151 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $or$cond52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_con_size($1)|0);
 $3 = (_lily_arg_count($0)|0);
 switch ($3|0) {
 case 3:  {
  $4 = (_lily_arg_integer($0,2)|0);
  $5 = tempRet0;
  $$050 = $4;
  label = 3;
  break;
 }
 case 2:  {
  $$050 = $2;
  label = 3;
  break;
 }
 default: {
  $$049 = 0;$$151 = $2;
 }
 }
 if ((label|0) == 3) {
  $6 = (_lily_arg_integer($0,1)|0);
  $7 = tempRet0;
  $$049 = $6;$$151 = $$050;
 }
 $8 = ($$151|0)<(0);
 $9 = $8 ? $2 : 0;
 $$$151 = (($9) + ($$151))|0;
 $10 = ($$049|0)<(0);
 $11 = $10 ? $2 : 0;
 $$1 = (($11) + ($$049))|0;
 $12 = ($$$151|0)>($2|0);
 $13 = ($$1|0)>($2|0);
 $or$cond = $12 | $13;
 $14 = ($$$151|0)<($$1|0);
 $or$cond52 = $14 | $or$cond;
 if ($or$cond52) {
  (_lily_push_list($0,0)|0);
  _lily_return_top($0);
  return;
 }
 $15 = (($$$151) - ($$1))|0;
 $16 = (_lily_push_list($0,$15)|0);
 $17 = ($15|0)>(0);
 if ($17) {
  $$04853 = 0;$$054 = $$1;
  while(1) {
   $18 = (_lily_con_get($1,$$054)|0);
   _lily_con_set($16,$$04853,$18);
   $19 = (($$04853) + 1)|0;
   $20 = (($$054) + 1)|0;
   $exitcond = ($19|0)==($15|0);
   if ($exitcond) {
    break;
   } else {
    $$04853 = $19;$$054 = $20;
   }
  }
 }
 _lily_return_top($0);
 return;
}
function _lily_builtin_List_shift($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_con_size($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_IndexError($0,15219,$vararg_buffer);
 }
 _lily_list_take($0,$1,0);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_List_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_return_integer($0,$3,0);
 return;
}
function _lily_builtin_List_select($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _list_select_reject_common($0,1);
 return;
}
function _lily_builtin_List_repeat($0) {
 $0 = $0|0;
 var $$020 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = ($1|0)<(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_ValueError($0,15180,$vararg_buffer);
 }
 $4 = (_lily_arg_value($0,1)|0);
 $5 = (_lily_push_list($0,$1)|0);
 $6 = ($1|0)>(0);
 if ($6) {
  $$020 = 0;
 } else {
  _lily_return_top($0);
  STACKTOP = sp;return;
 }
 while(1) {
  _lily_con_set($5,$$020,$4);
  $7 = (($$020) + 1)|0;
  $exitcond = ($7|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$020 = $7;
  }
 }
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_List_reject($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _list_select_reject_common($0,0);
 return;
}
function _lily_builtin_List_push($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_con_size($1)|0);
 _lily_list_insert($1,$3,$2);
 _lily_return_unit($0);
 return;
}
function _lily_builtin_List_pop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_IndexError($0,15156,$vararg_buffer);
 }
 $5 = (_lily_con_size($1)|0);
 $6 = (($5) + -1)|0;
 _lily_list_take($0,$1,$6);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_List_map($0) {
 $0 = $0|0;
 var $$023 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = (_lily_push_list($0,0)|0);
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_list_reserve($3,$5);
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  _lily_return_top($0);
  return;
 }
 $8 = ((($1)) + 16|0);
 $$023 = 0;
 while(1) {
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($$023<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_push_value($0,$11);
  _lily_call($0,1);
  $12 = (_lily_call_result($0)|0);
  _lily_list_push($3,$12);
  $13 = (($$023) + 1)|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if ($15) {
   $$023 = $13;
  } else {
   break;
  }
 }
 _lily_return_top($0);
 return;
}
function _lily_builtin_List_join($0) {
 $0 = $0|0;
 var $$0 = 0, $$03435 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_count($0)|0);
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = (_lily_arg_string_raw($0,1)|0);
  $$0 = $4;
 } else {
  $$0 = 21807;
 }
 $5 = ((($0)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_mb_flush($6)|0);
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = (($9) + -1)|0;
  $12 = ((($1)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)>(0);
  $15 = HEAP32[$13>>2]|0;
  _lily_mb_add_value($7,$0,$15);
  if ($14) {
   $$03435 = 0;
   while(1) {
    _lily_mb_add($7,$$0);
    $16 = (($$03435) + 1)|0;
    $17 = (($13) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    _lily_mb_add_value($7,$0,$18);
    $exitcond = ($16|0)==($11|0);
    if ($exitcond) {
     break;
    } else {
     $$03435 = $16;
    }
   }
  }
 }
 $19 = (_lily_mb_raw($7)|0);
 _lily_push_string($0,$19);
 _lily_return_top($0);
 return;
}
function _lily_builtin_List_insert($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_integer($0,1)|0);
 $3 = tempRet0;
 $4 = (_lily_arg_value($0,2)|0);
 $5 = (_get_relative_index($0,$1,$2,$3)|0);
 $6 = tempRet0;
 _lily_list_insert($1,$5,$4);
 _lily_return_unit($0);
 return;
}
function _lily_builtin_List_fold($0) {
 $0 = $0|0;
 var $$024 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _lily_return_value($0,$2);
  return;
 }
 $6 = (_lily_arg_function($0,2)|0);
 _lily_call_prepare($0,$6);
 $7 = (_lily_call_result($0)|0);
 _lily_push_value($0,$2);
 $8 = (_lily_con_get($1,0)|0);
 _lily_push_value($0,$8);
 _lily_call($0,2);
 $9 = HEAP32[$3>>2]|0;
 $10 = ($9|0)==(1);
 if (!($10)) {
  $$024 = 0;
  while(1) {
   _lily_push_value($0,$7);
   $11 = (($$024) + 1)|0;
   $12 = (_lily_con_get($1,$11)|0);
   _lily_push_value($0,$12);
   _lily_call($0,2);
   $13 = HEAP32[$3>>2]|0;
   $14 = (($13) + -1)|0;
   $15 = ($11|0)==($14|0);
   if ($15) {
    break;
   } else {
    $$024 = $11;
   }
  }
 }
 _lily_return_value($0,$7);
 return;
}
function _lily_builtin_List_each_index($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$11);
  return;
 } else {
  $$012 = 0;
 }
 while(1) {
  $6 = ($$012|0)<(0);
  $7 = $6 << 31 >> 31;
  _lily_push_integer($0,$$012,$7);
  _lily_call($0,1);
  $8 = (($$012) + 1)|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if ($10) {
   $$012 = $8;
  } else {
   break;
  }
 }
 $11 = (_lily_arg_value($0,0)|0);
 _lily_return_value($0,$11);
 return;
}
function _lily_builtin_List_each($0) {
 $0 = $0|0;
 var $$013 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $10 = (_lily_arg_value($0,0)|0);
  _lily_return_value($0,$10);
  return;
 } else {
  $$013 = 0;
 }
 while(1) {
  $6 = (_lily_con_get($1,$$013)|0);
  _lily_push_value($0,$6);
  _lily_call($0,1);
  $7 = (($$013) + 1)|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $$013 = $7;
  } else {
   break;
  }
 }
 $10 = (_lily_arg_value($0,0)|0);
 _lily_return_value($0,$10);
 return;
}
function _lily_builtin_List_delete_at($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_integer($0,1)|0);
 $3 = tempRet0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  _lily_IndexError($0,15028,$vararg_buffer);
 }
 $7 = (_get_relative_index($0,$1,$2,$3)|0);
 $8 = tempRet0;
 _lily_list_take($0,$1,$7);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_List_count($0) {
 $0 = $0|0;
 var $$$020 = 0, $$02021 = 0, $$022 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = (_lily_call_result($0)|0);
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $19 = 0;$20 = 0;
  _lily_return_integer($0,$19,$20);
  return;
 }
 $7 = ((($1)) + 16|0);
 $$02021 = 0;$$022 = 0;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($$022<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_push_value($0,$10);
  _lily_call($0,1);
  $11 = (_lily_as_boolean($3)|0);
  $12 = ($11|0)==(1);
  $13 = $12&1;
  $$$020 = (($13) + ($$02021))|0;
  $14 = (($$022) + 1)|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $$02021 = $$$020;$$022 = $14;
  } else {
   break;
  }
 }
 $17 = ($$$020|0)<(0);
 $18 = $17 << 31 >> 31;
 $19 = $$$020;$20 = $18;
 _lily_return_integer($0,$19,$20);
 return;
}
function _lily_builtin_List_clear($0) {
 $0 = $0|0;
 var $$014 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_container($0,0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
 } else {
  $5 = ((($1)) + 16|0);
  $$014 = 0;
  while(1) {
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($$014<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   _lily_deref($8);
   $9 = HEAP32[$5>>2]|0;
   $10 = (($9) + ($$014<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   _lily_free($11);
   $12 = (($$014) + 1)|0;
   $13 = HEAP32[$2>>2]|0;
   $14 = ($12>>>0)<($13>>>0);
   if ($14) {
    $$014 = $12;
   } else {
    $$lcssa = $13;
    break;
   }
  }
 }
 $15 = ((($1)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($$lcssa))|0;
 HEAP32[$15>>2] = $17;
 HEAP32[$2>>2] = 0;
 _lily_return_unit($0);
 return;
}
function _lily_builtin_KeyError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,21);
 return;
}
function _lily_builtin_IOError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,20);
 return;
}
function _lily_builtin_Integer_to_s($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = (_lily_arg_integer($0,0)|0);
 $3 = tempRet0;
 $4 = $vararg_buffer;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 (_snprintf($1,32,18520,$vararg_buffer)|0);
 _lily_push_string($0,$1);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_Integer_to_d($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = (+($1>>>0)) + (4294967296.0*(+($2|0)));
 _lily_return_double($0,$3);
 return;
}
function _lily_builtin_Integer_to_byte($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = $1&255;
 _lily_return_byte($0,$3);
 return;
}
function _lily_builtin_Integer_to_bool($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_integer($0,0)|0);
 $2 = tempRet0;
 $3 = ($1|0)!=(0);
 $4 = ($2|0)!=(0);
 $5 = $3 | $4;
 $6 = $5&1;
 _lily_return_boolean($0,$6);
 return;
}
function _lily_builtin_IndexError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,24);
 return;
}
function _lily_builtin_Hash_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $4 << 31 >> 31;
 _lily_return_integer($0,$3,$5);
 return;
}
function _lily_builtin_Hash_select($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hash_select_reject_common($0,1);
 return;
}
function _lily_builtin_Hash_reject($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hash_select_reject_common($0,0);
 return;
}
function _lily_builtin_Hash_merge($0) {
 $0 = $0|0;
 var $$0 = 0, $$04664 = 0, $$04751 = 0, $$048 = 0, $$04859 = 0, $$04860 = 0, $$049 = 0, $$050 = 0, $$155 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_push_hash($0,$3)|0);
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = ((($1)) + 16|0);
  $$04664 = 0;
  while(1) {
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($$04664<<2)|0);
   $$04859 = HEAP32[$10>>2]|0;
   $11 = ($$04859|0)==(0|0);
   if (!($11)) {
    $$04860 = $$04859;
    while(1) {
     $12 = ((($$04860)) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($$04860)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     _lily_hash_set($0,$4,$13,$15);
     $16 = ((($$04860)) + 24|0);
     $$048 = HEAP32[$16>>2]|0;
     $17 = ($$048|0)==(0|0);
     if ($17) {
      break;
     } else {
      $$04860 = $$048;
     }
    }
   }
   $18 = (($$04664) + 1)|0;
   $19 = HEAP32[$5>>2]|0;
   $20 = ($18|0)<($19|0);
   if ($20) {
    $$04664 = $18;
   } else {
    break;
   }
  }
 }
 $21 = (_lily_arg_container($0,1)|0);
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  _lily_return_top($0);
  return;
 }
 $25 = ((($21)) + 16|0);
 $$155 = 0;
 while(1) {
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($$155<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)>(0);
  if ($33) {
   $34 = ((($30)) + 16|0);
   $$04751 = 0;
   while(1) {
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + ($$04751<<2)|0);
    $$049 = HEAP32[$36>>2]|0;
    $37 = ($$049|0)==(0|0);
    if (!($37)) {
     $$050 = $$049;
     while(1) {
      $38 = ((($$050)) + 16|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($$050)) + 20|0);
      $41 = HEAP32[$40>>2]|0;
      _lily_hash_set($0,$4,$39,$41);
      $42 = ((($$050)) + 24|0);
      $$0 = HEAP32[$42>>2]|0;
      $43 = ($$0|0)==(0|0);
      if ($43) {
       break;
      } else {
       $$050 = $$0;
      }
     }
    }
    $44 = (($$04751) + 1)|0;
    $45 = HEAP32[$31>>2]|0;
    $46 = ($44|0)<($45|0);
    if ($46) {
     $$04751 = $44;
    } else {
     break;
    }
   }
  }
  $47 = (($$155) + 1)|0;
  $48 = HEAP32[$22>>2]|0;
  $49 = ($47>>>0)<($48>>>0);
  if ($49) {
   $$155 = $47;
  } else {
   break;
  }
 }
 _lily_return_top($0);
 return;
}
function _lily_builtin_Hash_map_values($0) {
 $0 = $0|0;
 var $$0 = 0, $$03235 = 0, $$033 = 0, $$034 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = (_lily_call_result($0)|0);
 _lily_error_callback_push($0,108);
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_push_hash($0,$5)|0);
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if (!($9)) {
  $23 = ((($1)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + -1)|0;
  HEAP32[$23>>2] = $25;
  _lily_error_callback_pop($0);
  _lily_return_top($0);
  return;
 }
 $10 = ((($1)) + 16|0);
 $$03235 = 0;
 while(1) {
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($$03235<<2)|0);
  $$033 = HEAP32[$12>>2]|0;
  $13 = ($$033|0)==(0|0);
  if (!($13)) {
   $$034 = $$033;
   while(1) {
    $14 = ((($$034)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    _lily_push_value($0,$15);
    _lily_call($0,1);
    $16 = ((($$034)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    _lily_hash_set($0,$6,$17,$3);
    $18 = ((($$034)) + 24|0);
    $$0 = HEAP32[$18>>2]|0;
    $19 = ($$0|0)==(0|0);
    if ($19) {
     break;
    } else {
     $$034 = $$0;
    }
   }
  }
  $20 = (($$03235) + 1)|0;
  $21 = HEAP32[$7>>2]|0;
  $22 = ($20|0)<($21|0);
  if ($22) {
   $$03235 = $20;
  } else {
   break;
  }
 }
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + -1)|0;
 HEAP32[$23>>2] = $25;
 _lily_error_callback_pop($0);
 _lily_return_top($0);
 return;
}
function _lily_builtin_Hash_keys($0) {
 $0 = $0|0;
 var $$0 = 0, $$02329 = 0, $$02428 = 0, $$025 = 0, $$027 = 0, $$1$lcssa = 0, $$126 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_lily_push_list($0,$3)|0);
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  _lily_return_top($0);
  return;
 }
 $8 = ((($1)) + 16|0);
 $$02329 = 0;$$02428 = 0;
 while(1) {
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($$02428<<2)|0);
  $$025 = HEAP32[$10>>2]|0;
  $11 = ($$025|0)==(0|0);
  if ($11) {
   $$1$lcssa = $$02329;
  } else {
   $$027 = $$025;$$126 = $$02329;
   while(1) {
    $12 = ((($$027)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    _lily_con_set($4,$$126,$13);
    $14 = (($$126) + 1)|0;
    $15 = ((($$027)) + 24|0);
    $$0 = HEAP32[$15>>2]|0;
    $16 = ($$0|0)==(0|0);
    if ($16) {
     $$1$lcssa = $14;
     break;
    } else {
     $$027 = $$0;$$126 = $14;
    }
   }
  }
  $17 = (($$02428) + 1)|0;
  $18 = HEAP32[$5>>2]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $$02329 = $$1$lcssa;$$02428 = $17;
  } else {
   break;
  }
 }
 _lily_return_top($0);
 return;
}
function _lily_builtin_Hash_has_key($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_hash_get($0,$1,$2)|0);
 $4 = ($3|0)!=(0|0);
 $5 = $4&1;
 _lily_return_boolean($0,$5);
 return;
}
function _lily_builtin_Hash_get($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_arg_value($0,2)|0);
 $4 = (_lily_hash_get($0,$1,$2)|0);
 $5 = ($4|0)==(0|0);
 $$ = $5 ? $3 : $4;
 _lily_return_value($0,$$);
 return;
}
function _lily_builtin_Hash_each_pair($0) {
 $0 = $0|0;
 var $$0 = 0, $$02326 = 0, $$024 = 0, $$025 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 _lily_error_callback_push($0,108);
 $2 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$2);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  _lily_error_callback_pop($0);
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + -1)|0;
  HEAP32[$3>>2] = $23;
  return;
 }
 $9 = ((($1)) + 16|0);
 $$02326 = 0;
 while(1) {
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($$02326<<2)|0);
  $$024 = HEAP32[$11>>2]|0;
  $12 = ($$024|0)==(0|0);
  if (!($12)) {
   $$025 = $$024;
   while(1) {
    $13 = ((($$025)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    _lily_push_value($0,$14);
    $15 = ((($$025)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    _lily_push_value($0,$16);
    _lily_call($0,2);
    $17 = ((($$025)) + 24|0);
    $$0 = HEAP32[$17>>2]|0;
    $18 = ($$0|0)==(0|0);
    if ($18) {
     break;
    } else {
     $$025 = $$0;
    }
   }
  }
  $19 = (($$02326) + 1)|0;
  $20 = HEAP32[$6>>2]|0;
  $21 = ($19|0)<($20|0);
  if ($21) {
   $$02326 = $19;
  } else {
   break;
  }
 }
 _lily_error_callback_pop($0);
 $22 = HEAP32[$3>>2]|0;
 $23 = (($22) + -1)|0;
 HEAP32[$3>>2] = $23;
 return;
}
function _lily_builtin_Hash_delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 _remove_key_check($0,$1);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_hash_take($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _lily_return_unit($0);
  return;
 }
 _lily_stack_drop_top($0);
 _lily_stack_drop_top($0);
 _lily_return_unit($0);
 return;
}
function _lily_builtin_Hash_clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lily_RuntimeError($0,14982,$vararg_buffer);
 }
 _destroy_hash_elems($1);
 $5 = ((($1)) + 12|0);
 HEAP32[$5>>2] = 0;
 _lily_return_unit($0);
 STACKTOP = sp;return;
}
function _lily_builtin_File_write($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_file($0,0)|0);
 $2 = (_lily_arg_value($0,1)|0);
 $3 = (_lily_file_for_write($0,$1)|0);
 $4 = HEAP16[$2>>1]|0;
 $5 = ($4<<16>>16)==(3);
 if ($5) {
  $6 = ((($2)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  (_fputs($9,$3)|0);
  _lily_return_unit($0);
  return;
 } else {
  $10 = ((($0)) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_lily_mb_flush($11)|0);
  _lily_mb_add_value($12,$0,$2);
  $13 = (_lily_mb_raw($12)|0);
  (_fputs($13,$3)|0);
  _lily_return_unit($0);
  return;
 }
}
function _lily_builtin_File_read_line($0) {
 $0 = $0|0;
 var $$0 = 0, $$036 = 0, $$1 = 0, $$137 = 0, $$2 = 0, $$238 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $1 = sp;
 $2 = (_lily_arg_file($0,0)|0);
 $3 = (_lily_msgbuf_get($0)|0);
 $4 = (_lily_file_for_read($0,$2)|0);
 $$0 = 0;$$036 = 0;
 while(1) {
  $5 = (_fgetc($4)|0);
  $6 = ($5|0)==(-1);
  if ($6) {
   $$2 = $$0;$$238 = $$036;
   break;
  }
  $7 = ($$0|0)==(128);
  if ($7) {
   $8 = (($$0) + ($$036))|0;
   _lily_mb_add_slice($3,$1,0,128);
   $$1 = 0;$$137 = $8;
  } else {
   $$1 = $$0;$$137 = $$036;
  }
  $9 = $5&255;
  $10 = (($1) + ($$1)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($$1) + 1)|0;
  $12 = ($5|0)==(10);
  if ($12) {
   $$2 = $11;$$238 = $$137;
   break;
  } else {
   $$0 = $11;$$036 = $$137;
  }
 }
 $13 = ($$2|0)==(0);
 if ($13) {
  $$3 = $$238;
 } else {
  $14 = (($$2) + ($$238))|0;
  _lily_mb_add_slice($3,$1,0,$$2);
  $$3 = $14;
 }
 $15 = (_lily_mb_raw($3)|0);
 _lily_push_bytestring($0,$15,$$3);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_File_read($0) {
 $0 = $0|0;
 var $$$060 = 0, $$058 = 0, $$059 = 0, $$060 = 0, $$062 = 0, $$063 = 0, $$065 = 0, $$1 = 0, $$164 = 0, $$166 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond67 = 0, $or$cond68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_file($0,0)|0);
 $2 = (_lily_file_for_read($0,$1)|0);
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_lily_arg_integer($0,1)|0);
  $6 = tempRet0;
  $$060 = $5;
 } else {
  $$060 = -1;
 }
 $7 = ($$060|0)>(-1);
 $$$060 = $7 ? $$060 : -1;
 $8 = (_lily_malloc(64)|0);
 $9 = ($$060|0)<(0);
 $$059 = 32;$$062 = 0;$$063 = $8;$$065 = 64;
 while(1) {
  $10 = ($$$060|0)>($$059|0);
  $or$cond67 = $9 | $10;
  $$058 = $or$cond67 ? $$059 : $$$060;
  $11 = (($$063) + ($$062)|0);
  $12 = (_fread($11,1,$$058,$2)|0);
  $13 = (($12) + ($$062))|0;
  $14 = ($13>>>0)<($$065>>>0);
  $15 = $$065 << 1;
  if ($14) {
   $$1 = $$059;$$164 = $$063;$$166 = $$065;
  } else {
   $16 = (_lily_realloc($$063,$15)|0);
   $$1 = $$065;$$164 = $16;$$166 = $15;
  }
  $17 = ($12|0)<($$058|0);
  $18 = ($13|0)>=($$$060|0);
  $or$cond = $7 & $18;
  $or$cond68 = $17 | $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $$059 = $$1;$$062 = $13;$$063 = $$164;$$065 = $$166;
  }
 }
 $19 = (($$164) + ($13)|0);
 HEAP8[$19>>0] = 0;
 _lily_push_bytestring($0,$$164,$13);
 _lily_free($$164);
 _lily_return_top($0);
 return;
}
function _lily_builtin_File_print($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_builtin_File_write($0);
 $1 = (_lily_arg_file($0,0)|0);
 $2 = (_lily_file_for_write($0,$1)|0);
 (_fputc(10,$2)|0);
 _lily_return_unit($0);
 return;
}
function _lily_builtin_File_open($0) {
 $0 = $0|0;
 var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 $2 = (_lily_arg_string_raw($0,0)|0);
 $3 = (_lily_arg_string_raw($0,1)|0);
 $4 = (___errno_location()|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP8[$3>>0]|0;
 switch ($5<<24>>24) {
 case 97: case 119: case 114:  {
  $6 = ((($3)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(98);
  $9 = ((($3)) + 2|0);
  $$ = $8 ? $9 : $6;
  $10 = HEAP8[$$>>0]|0;
  $11 = ($10<<24>>24)==(43);
  $12 = ((($$)) + 1|0);
  $$1 = $11 ? $12 : $$;
  $13 = HEAP8[$$1>>0]|0;
  $phitmp = ($13<<24>>24)==(0);
  if (!($phitmp)) {
   label = 3;
  }
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  HEAP32[$vararg_buffer>>2] = $3;
  _lily_IOError($0,14938,$vararg_buffer);
 }
 $14 = (_fopen($2,$3)|0);
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _lily_push_file($0,$14,$3);
  _lily_return_top($0);
  STACKTOP = sp;return;
 }
 $16 = (___errno_location()|0);
 $17 = HEAP32[$16>>2]|0;
 (_strerror_r($17,$1,128)|0);
 $18 = (___errno_location()|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $19;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $1;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $2;
 _lily_IOError($0,14963,$vararg_buffer1);
 _lily_push_file($0,$14,$3);
 _lily_return_top($0);
 STACKTOP = sp;return;
}
function _lily_builtin_File_each_line($0) {
 $0 = $0|0;
 var $$0$be = 0, $$036 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $1 = sp;
 $2 = (_lily_arg_file($0,0)|0);
 $3 = (_lily_msgbuf_get($0)|0);
 $4 = (_lily_file_for_read($0,$2)|0);
 $5 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$5);
 $6 = (_fgetc($4)|0);
 $7 = ($6|0)==(-1);
 if ($7) {
  _lily_return_unit($0);
  STACKTOP = sp;return;
 } else {
  $$036 = 0;$10 = $6;
 }
 while(1) {
  $8 = ($$036|0)==(128);
  if ($8) {
   _lily_mb_add_slice($3,$1,0,128);
   $$1 = 0;
  } else {
   $$1 = $$036;
  }
  $9 = $10&255;
  $11 = (($1) + ($$1)|0);
  HEAP8[$11>>0] = $9;
  $12 = ($10|0)==(10);
  if ($12) {
   $13 = ($$1|0)==(0);
   if (!($13)) {
    _lily_mb_add_slice($3,$1,0,$$1);
   }
   $14 = (_lily_mb_raw($3)|0);
   $15 = (_lily_mb_pos($3)|0);
   _lily_push_bytestring($0,$14,$15);
   _lily_call($0,1);
   (_lily_mb_flush($3)|0);
   $$0$be = 0;
  } else {
   $16 = (($$1) + 1)|0;
   $$0$be = $16;
  }
  $17 = (_fgetc($4)|0);
  $18 = ($17|0)==(-1);
  if ($18) {
   break;
  } else {
   $$036 = $$0$be;$10 = $17;
  }
 }
 _lily_return_unit($0);
 STACKTOP = sp;return;
}
function _lily_builtin_File_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_file($0,0)|0);
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _lily_return_unit($0);
  return;
 }
 $5 = ((($1)) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  (_fclose($3)|0);
 }
 HEAP32[$2>>2] = 0;
 _lily_return_unit($0);
 return;
}
function _lily_builtin_Exception_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,19);
 return;
}
function _lily_builtin_Double_to_i($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_lily_arg_double($0,0));
 $2 = (~~$1)>>>0;
 $3 = +Math_abs($1) >= 1.0 ? $1 > 0.0 ? (~~+Math_min(+Math_floor($1 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($1 - +(~~$1 >>> 0)) / 4294967296.0) >>> 0 : 0;
 _lily_return_integer($0,$2,$3);
 return;
}
function _lily_builtin_DivisionByZeroError_new($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _return_exception($0,25);
 return;
}
function _lily_builtin_ByteString_slice($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _do_str_slice($0,1);
 return;
}
function _lily_builtin_ByteString_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_bytestring($0,0)|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _lily_return_integer($0,$3,0);
 return;
}
function _lily_builtin_ByteString_encode($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_bytestring($0,0)|0);
 $2 = (_lily_arg_count($0)|0);
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = (_lily_arg_string_raw($0,1)|0);
  $$0 = $4;
 } else {
  $$0 = 14676;
 }
 $5 = (_strcmp($$0,14676)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _lily_return_none($0);
  return;
 }
 $7 = (_lily_bytestring_raw($1)|0);
 $8 = (_lily_bytestring_length($1)|0);
 $9 = (_lily_is_valid_sized_utf8($7,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  _lily_return_none($0);
  return;
 } else {
  $11 = (_lily_push_variant($0,14,1)|0);
  _lily_push_string($0,$7);
  _lily_con_set_from_stack($0,$11,0);
  _lily_return_top($0);
  return;
 }
}
function _lily_builtin_ByteString_each_byte($0) {
 $0 = $0|0;
 var $$018 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_bytestring($0,0)|0);
 $2 = (_lily_bytestring_raw($1)|0);
 $3 = (_lily_bytestring_length($1)|0);
 $4 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$4);
 $5 = ($3|0)>(0);
 if ($5) {
  $$018 = 0;
 } else {
  return;
 }
 while(1) {
  $6 = (($2) + ($$018)|0);
  $7 = HEAP8[$6>>0]|0;
  _lily_push_byte($0,$7);
  _lily_call($0,1);
  $8 = (($$018) + 1)|0;
  $exitcond = ($8|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$018 = $8;
  }
 }
 return;
}
function _lily_builtin_Byte_to_i($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_byte($0,0)|0);
 $2 = $1&255;
 _lily_return_integer($0,$2,0);
 return;
}
function _lily_builtin_Boolean_to_s($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_boolean($0,0)|0);
 $2 = ($1|0)==(0);
 $$ = $2 ? 18634 : 18640;
 _lily_push_string($0,$$);
 _lily_return_top($0);
 return;
}
function _lily_builtin_Boolean_to_i($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_boolean($0,0)|0);
 $2 = ($1|0)<(0);
 $3 = $2 << 31 >> 31;
 _lily_return_integer($0,$1,$3);
 return;
}
function _do_str_slice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$142 = 0, $$0 = 0, $$041 = 0, $$1 = 0, $$142 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_string($0,0)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_lily_arg_count($0)|0);
 switch ($5|0) {
 case 3:  {
  $6 = (_lily_arg_integer($0,2)|0);
  $7 = tempRet0;
  $$041 = $6;
  label = 3;
  break;
 }
 case 2:  {
  $$041 = $4;
  label = 3;
  break;
 }
 default: {
  $$0 = 0;$$142 = $4;
 }
 }
 if ((label|0) == 3) {
  $8 = (_lily_arg_integer($0,1)|0);
  $9 = tempRet0;
  $$0 = $8;$$142 = $$041;
 }
 $10 = ($$142|0)<(0);
 $11 = HEAP32[$3>>2]|0;
 $12 = $10 ? $11 : 0;
 $$$142 = (($12) + ($$142))|0;
 $13 = ($$0|0)<(0);
 $14 = $13 ? $11 : 0;
 $$1 = (($14) + ($$0))|0;
 $15 = ($$$142>>>0)>($11>>>0);
 $16 = ($$1>>>0)>($11>>>0);
 $or$cond = $15 | $16;
 $17 = ($$$142|0)<($$1|0);
 $or$cond43 = $17 | $or$cond;
 if ($or$cond43) {
  $18 = ($1|0)==(0);
  if ($18) {
   _lily_push_string($0,21807);
  } else {
   _lily_push_bytestring($0,21807,0);
  }
  _lily_return_top($0);
  return;
 }
 $19 = (_lily_string_raw($2)|0);
 $20 = ($1|0)==(0);
 $21 = (($19) + ($$1)|0);
 do {
  if ($20) {
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = (14682 + ($23)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(-1);
   if (!($26)) {
    $27 = (($19) + ($$$142)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = (14682 + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = ($31<<24>>24)==(-1);
    if (!($32)) {
     $33 = (($19) + ($$1)|0);
     $34 = (($$$142) - ($$1))|0;
     _lily_push_string_sized($0,$33,$34);
     break;
    }
   }
   _lily_push_string($0,21807);
   _lily_return_top($0);
   return;
  } else {
   $35 = (($$$142) - ($$1))|0;
   _lily_push_bytestring($0,$21,$35);
  }
 } while(0);
 _lily_return_top($0);
 return;
}
function _return_exception($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_push_super($0,$1,2)|0);
 $3 = (_lily_arg_value($0,0)|0);
 _lily_con_set($2,0,$3);
 (_lily_push_list($0,0)|0);
 _lily_con_set_from_stack($0,$2,1);
 _lily_return_super($0);
 return;
}
function _destroy_hash_elems($0) {
 $0 = $0|0;
 var $$022 = 0, $$in2021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 16|0);
 $$022 = 0;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($$022<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $$in2021 = $7;
   while(1) {
    $9 = ((($$in2021)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    _lily_deref($10);
    $11 = HEAP32[$9>>2]|0;
    _lily_free($11);
    $12 = ((($$in2021)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    _lily_deref($13);
    $14 = HEAP32[$12>>2]|0;
    _lily_free($14);
    $15 = ((($$in2021)) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    _lily_free($$in2021);
    $17 = ($16|0)==(0|0);
    if ($17) {
     break;
    } else {
     $$in2021 = $16;
    }
   }
  }
  $18 = HEAP32[$4>>2]|0;
  $19 = (($18) + ($$022<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = (($$022) + 1)|0;
  $21 = HEAP32[$1>>2]|0;
  $22 = ($20|0)<($21|0);
  if ($22) {
   $$022 = $20;
  } else {
   break;
  }
 }
 return;
}
function _remove_key_check($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 _lily_RuntimeError($0,14982,$vararg_buffer);
 STACKTOP = sp;return;
}
function _hash_iter_callback($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_arg_hash($0,0)|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 return;
}
function _hash_select_reject_common($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04043 = 0, $$041 = 0, $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_hash($0,0)|0);
 $3 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$3);
 $4 = (_lily_call_result($0)|0);
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_push_hash($0,$6)|0);
 _lily_error_callback_push($0,108);
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 $11 = ((($2)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  $31 = HEAP32[$8>>2]|0;
  $32 = (($31) + -1)|0;
  HEAP32[$8>>2] = $32;
  _lily_error_callback_pop($0);
  _lily_return_top($0);
  return;
 }
 $14 = ((($2)) + 16|0);
 $$04043 = 0;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($$04043<<2)|0);
  $$041 = HEAP32[$16>>2]|0;
  $17 = ($$041|0)==(0|0);
  if (!($17)) {
   $$042 = $$041;
   while(1) {
    $18 = ((($$042)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    _lily_push_value($0,$19);
    $20 = ((($$042)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    _lily_push_value($0,$21);
    $22 = HEAP32[$18>>2]|0;
    _lily_push_value($0,$22);
    $23 = HEAP32[$20>>2]|0;
    _lily_push_value($0,$23);
    _lily_call($0,2);
    $24 = (_lily_as_boolean($4)|0);
    $25 = ($24|0)==($1|0);
    if ($25) {
     _lily_hash_set_from_stack($0,$7);
    } else {
     _lily_stack_drop_top($0);
     _lily_stack_drop_top($0);
    }
    $26 = ((($$042)) + 24|0);
    $$0 = HEAP32[$26>>2]|0;
    $27 = ($$0|0)==(0|0);
    if ($27) {
     break;
    } else {
     $$042 = $$0;
    }
   }
  }
  $28 = (($$04043) + 1)|0;
  $29 = HEAP32[$11>>2]|0;
  $30 = ($28|0)<($29|0);
  if ($30) {
   $$04043 = $28;
  } else {
   break;
  }
 }
 $31 = HEAP32[$8>>2]|0;
 $32 = (($31) + -1)|0;
 HEAP32[$8>>2] = $32;
 _lily_error_callback_pop($0);
 _lily_return_top($0);
 return;
}
function _get_relative_index($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = (_i64Subtract(0,0,($2|0),($3|0))|0);
  $6 = tempRet0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (0)<($6>>>0);
  $10 = ($8>>>0)<($5>>>0);
  $11 = (0)==($6|0);
  $12 = $11 & $10;
  $13 = $9 | $12;
  if ($13) {
   $14 = (_i64Subtract(0,0,($8|0),0)|0);
   $15 = tempRet0;
   $16 = $vararg_buffer;
   $17 = $16;
   HEAP32[$17>>2] = $2;
   $18 = (($16) + 4)|0;
   $19 = $18;
   HEAP32[$19>>2] = $3;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   $20 = $vararg_ptr1;
   $21 = $20;
   HEAP32[$21>>2] = $14;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = $15;
   _lily_IndexError($0,15062,$vararg_buffer);
  }
  $24 = HEAP32[$7>>2]|0;
  $25 = (_i64Add(($24|0),0,($2|0),($3|0))|0);
  $26 = tempRet0;
  $42 = $26;$43 = $25;
  tempRet0 = ($42);
  STACKTOP = sp;return ($43|0);
 } else {
  $27 = ((($1)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (0)<($3|0);
  $30 = ($28>>>0)<($2>>>0);
  $31 = (0)==($3|0);
  $32 = $31 & $30;
  $33 = $29 | $32;
  if (!($33)) {
   $42 = $3;$43 = $2;
   tempRet0 = ($42);
   STACKTOP = sp;return ($43|0);
  }
  $34 = $vararg_buffer2;
  $35 = $34;
  HEAP32[$35>>2] = $2;
  $36 = (($34) + 4)|0;
  $37 = $36;
  HEAP32[$37>>2] = $3;
  $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
  $38 = $vararg_ptr5;
  $39 = $38;
  HEAP32[$39>>2] = $28;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = 0;
  _lily_IndexError($0,15109,$vararg_buffer2);
  $42 = $3;$43 = $2;
  tempRet0 = ($42);
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _list_select_reject_common($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_container($0,0)|0);
 $3 = (_lily_arg_function($0,1)|0);
 _lily_call_prepare($0,$3);
 $4 = (_lily_call_result($0)|0);
 $5 = (_lily_push_list($0,0)|0);
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  _lily_return_top($0);
  return;
 }
 $9 = ((($2)) + 16|0);
 $$026 = 0;
 while(1) {
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($$026<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_push_value($0,$12);
  _lily_call($0,1);
  $13 = (_lily_as_boolean($4)|0);
  $14 = ($13|0)==($1|0);
  if ($14) {
   $15 = HEAP32[$9>>2]|0;
   $16 = (($15) + ($$026<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   _lily_list_push($5,$17);
  }
  $18 = (($$026) + 1)|0;
  $19 = HEAP32[$6>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $$026 = $18;
  } else {
   break;
  }
 }
 _lily_return_top($0);
 return;
}
function _result_optionize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_isa($0,0,18)|0);
 $3 = ($2|0)==($1|0);
 if ($3) {
  $4 = (_lily_arg_container($0,0)|0);
  $5 = (_lily_push_variant($0,14,1)|0);
  $6 = (_lily_con_get($4,0)|0);
  _lily_con_set($5,0,$6);
  _lily_return_top($0);
  return;
 } else {
  _lily_return_none($0);
  return;
 }
}
function _result_is_success_or_failure($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_arg_isa($0,0,18)|0);
 $3 = ($2|0)==($1|0);
 $4 = $3&1;
 _lily_return_boolean($0,$4);
 return;
}
function _char_index($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = (_strchr($2,123)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $$0 = $4 ? -1 : $7;
 return ($$0|0);
}
function _lstrip_ascii_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03847 = 0, $$04044 = 0, $$152 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 if ($10) {
  $15 = HEAP8[$12>>0]|0;
  $16 = ($7|0)>(0);
  if ($16) {
   $$04044 = 0;
  } else {
   $$2 = 0;
   return ($$2|0);
  }
  while(1) {
   $17 = (($5) + ($$04044)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18<<24>>24)==($15<<24>>24);
   if (!($19)) {
    $$2 = $$04044;
    label = 11;
    break;
   }
   $20 = (($$04044) + 1)|0;
   $21 = ($20|0)<($7|0);
   if ($21) {
    $$04044 = $20;
   } else {
    $$2 = $20;
    label = 11;
    break;
   }
  }
  if ((label|0) == 11) {
   return ($$2|0);
  }
 }
 $13 = ($7|0)>(0);
 if (!($13)) {
  $$2 = 0;
  return ($$2|0);
 }
 $14 = ($9|0)>(0);
 $$152 = 0;
 L15: while(1) {
  $22 = (($5) + ($$152)|0);
  $23 = HEAP8[$22>>0]|0;
  if ($14) {
   $$03847 = 0;
  } else {
   $$2 = 0;
   label = 11;
   break;
  }
  while(1) {
   $26 = (($12) + ($$03847)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ($23<<24>>24)==($27<<24>>24);
   $24 = (($$03847) + 1)|0;
   if ($28) {
    break;
   }
   $25 = ($24|0)<($9|0);
   if ($25) {
    $$03847 = $24;
   } else {
    $$2 = $$152;
    label = 11;
    break L15;
   }
  }
  $29 = (($$152) + 1)|0;
  $30 = ($29|0)<($7|0);
  if ($30) {
   $$152 = $29;
  } else {
   $$2 = $29;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lstrip_utf8_start($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07085 = 0, $$07184 = 0, $$090 = 0, $$1$ph = 0, $$172 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP8[$9>>0]|0;
 $13 = $12&255;
 $14 = (14682 + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)==($11|0);
 if (!($17)) {
  $$1$ph = 0;
  L2: while(1) {
   $55 = (($5) + ($$1$ph)|0);
   $36 = HEAP8[$55>>0]|0;
   $$172 = 0;
   L4: while(1) {
    $34 = (($9) + ($$172)|0);
    $35 = HEAP8[$34>>0]|0;
    $37 = ($36<<24>>24)==($35<<24>>24);
    L6: do {
     if ($37) {
      $38 = $35&255;
      $39 = (14682 + ($38)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = (($38) + -194)|0;
      $43 = ($42>>>0)<(51);
      if ($43) {
       $$090 = 1;
      } else {
       break L4;
      }
      while(1) {
       $46 = (($$090) + ($$1$ph))|0;
       $47 = (($5) + ($46)|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = (($$090) + ($$172))|0;
       $50 = (($9) + ($49)|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = ($48<<24>>24)==($51<<24>>24);
       $44 = (($$090) + 1)|0;
       if (!($52)) {
        break L6;
       }
       $45 = ($44|0)<($41|0);
       if ($45) {
        $$090 = $44;
       } else {
        break L4;
       }
      }
     }
    } while(0);
    $56 = HEAP8[$34>>0]|0;
    $57 = $56&255;
    $58 = (14682 + ($57)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = (($60) + ($$172))|0;
    $62 = ($61|0)==($11|0);
    if ($62) {
     $$3 = $$1$ph;
     label = 16;
     break L2;
    } else {
     $$172 = $61;
    }
   }
   $53 = (($41) + ($$1$ph))|0;
   $54 = ($53|0)<($7|0);
   if ($54) {
    $$1$ph = $53;
   } else {
    $$3 = $53;
    label = 16;
    break;
   }
  }
  if ((label|0) == 16) {
   return ($$3|0);
  }
 }
 $18 = ($7|0)>(0);
 if (!($18)) {
  $$3 = 0;
  return ($$3|0);
 }
 $19 = (($13) + -194)|0;
 $20 = ($19>>>0)<(51);
 $$07085 = 0;
 L20: while(1) {
  $21 = (($5) + ($$07085)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==($12<<24>>24);
  if (!($23)) {
   $$3 = $$07085;
   label = 16;
   break;
  }
  if ($20) {
   $$07184 = 1;
   while(1) {
    $26 = (($$07184) + ($$07085))|0;
    $27 = (($5) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (($9) + ($$07184)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($28<<24>>24)==($30<<24>>24);
    $24 = (($$07184) + 1)|0;
    if (!($31)) {
     $$3 = $$07085;
     label = 16;
     break L20;
    }
    $25 = ($24|0)<($16|0);
    if ($25) {
     $$07184 = $24;
    } else {
     break;
    }
   }
  }
  $32 = (($$07085) + ($16))|0;
  $33 = ($32|0)<($7|0);
  if ($33) {
   $$07085 = $32;
  } else {
   $$3 = $32;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  return ($$3|0);
 }
 return (0)|0;
}
function _rstrip_ascii_stop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03847 = 0, $$04044 = 0, $$152 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 $11 = (($7) + -1)|0;
 $12 = ((($1)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 L1: do {
  if ($10) {
   $16 = HEAP8[$13>>0]|0;
   $17 = ($7|0)>(0);
   if ($17) {
    $$04044 = $11;
    while(1) {
     $18 = (($5) + ($$04044)|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19<<24>>24)==($16<<24>>24);
     if (!($20)) {
      $$2 = $$04044;
      break L1;
     }
     $21 = (($$04044) + -1)|0;
     $22 = ($$04044|0)>(0);
     if ($22) {
      $$04044 = $21;
     } else {
      $$2 = $21;
      break;
     }
    }
   } else {
    $$2 = $11;
   }
  } else {
   $14 = ($7|0)>(0);
   if ($14) {
    $15 = ($9|0)>(0);
    $$152 = $11;
    while(1) {
     $23 = (($5) + ($$152)|0);
     $24 = HEAP8[$23>>0]|0;
     if ($15) {
      $$03847 = 0;
     } else {
      $$2 = $11;
      break L1;
     }
     while(1) {
      $27 = (($13) + ($$03847)|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = ($24<<24>>24)==($28<<24>>24);
      $25 = (($$03847) + 1)|0;
      if ($29) {
       break;
      }
      $26 = ($25|0)<($9|0);
      if ($26) {
       $$03847 = $25;
      } else {
       $$2 = $$152;
       break L1;
      }
     }
     $30 = (($$152) + -1)|0;
     $31 = ($$152|0)>(0);
     if ($31) {
      $$152 = $30;
     } else {
      $$2 = $30;
      break;
     }
    }
   } else {
    $$2 = $11;
   }
  }
 } while(0);
 $32 = (($$2) + 1)|0;
 return ($32|0);
}
function _rstrip_utf8_stop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06075 = 0, $$06174 = 0, $$06276 = 0, $$06276$in = 0, $$064 = 0, $$066 = 0, $$1 = 0, $$3 = 0, $$369 = 0, $$4 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond71 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($7) + -1)|0;
 $$old1 = ($7|0)>(0);
 if ($$old1) {
  $$064 = $12;$$066 = 0;
 } else {
  $$4 = $12;
  $44 = (($$4) + 1)|0;
  return ($44|0);
 }
 while(1) {
  $13 = (($9) + ($$066)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (14682 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = (($$066) + -1)|0;
  $20 = (($19) + ($18))|0;
  $21 = (($9) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = (($5) + ($$064)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=($22<<24>>24);
  $26 = (($$064) + 1)|0;
  $27 = ($26|0)<($18|0);
  $or$cond71 = $27 | $25;
  L5: do {
   if ($or$cond71) {
    label = 8;
   } else {
    $28 = (($15) + -194)|0;
    $29 = ($28>>>0)<(51);
    if ($29) {
     $30 = (($$066) + -2)|0;
     $31 = (($30) + ($18))|0;
     $$06075 = 1;$$06174 = $31;$$06276$in = $$064;
     while(1) {
      $$06276 = (($$06276$in) + -1)|0;
      $32 = (($5) + ($$06276)|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = (($9) + ($$06174)|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($33<<24>>24)==($35<<24>>24);
      if (!($36)) {
       label = 8;
       break L5;
      }
      $37 = (($$06174) + -1)|0;
      $38 = (($$06075) + 1)|0;
      $39 = ($38|0)<($18|0);
      if ($39) {
       $$06075 = $38;$$06174 = $37;$$06276$in = $$06276;
      } else {
       break;
      }
     }
    }
    $40 = (($$064) - ($18))|0;
    $$1 = 2;$$3 = $40;$$369 = 0;
   }
  } while(0);
  if ((label|0) == 8) {
   label = 0;
   $41 = (($18) + ($$066))|0;
   $42 = ($41|0)==($11|0);
   $$ = $42 ? 3 : 2;
   $$1 = $$;$$3 = $$064;$$369 = $41;
  }
  $switch = ($$1|0)==(2);
  $43 = ($$3|0)>(-1);
  $or$cond = $43 & $switch;
  if ($or$cond) {
   $$064 = $$3;$$066 = $$369;
  } else {
   $$4 = $$3;
   break;
  }
 }
 $44 = (($$4) + 1)|0;
 return ($44|0);
}
function _string_split_by_val($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$073$ph102 = 0, $$07399 = 0, $$082 = 0, $$086 = 0, $$089$ph$lcssa = 0, $$089$ph101 = 0, $$090 = 0, $$174 = 0, $$178 = 0, $$187 = 0, $$2 = 0, $$284 = 0, $$3 = 0, $$380 = 0, $$4 = 0, $$691 = 0, $$693 = 0, $$pr = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = (15420 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 L1: do {
  if ($7) {
   $$089$ph$lcssa = 0;
  } else {
   $8 = $6 << 24 >> 24;
   $9 = HEAP8[$2>>0]|0;
   $$073$ph102 = $1;$$089$ph101 = 0;$61 = $8;$62 = $3;
   while(1) {
    $$07399 = $$073$ph102;$10 = $62;$30 = $61;
    while(1) {
     $11 = ($10<<24>>24)==($9<<24>>24);
     if ($11) {
      $$174 = $$07399;$$178 = $2;
      break;
     }
     $29 = (($$07399) + ($30)|0);
     $31 = HEAP8[$29>>0]|0;
     $32 = $31&255;
     $33 = (15420 + ($32)|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = ($34<<24>>24)==(0);
     if ($36) {
      $$089$ph$lcssa = $$089$ph101;
      break L1;
     } else {
      $$07399 = $29;$10 = $31;$30 = $35;
     }
    }
    while(1) {
     $12 = HEAP8[$$174>>0]|0;
     $13 = HEAP8[$$178>>0]|0;
     $14 = ($12<<24>>24)==($13<<24>>24);
     if (!($14)) {
      $$090 = 1;$$2 = $$174;
      break;
     }
     $15 = ((($$178)) + 1|0);
     $16 = ((($$174)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $$090 = 1;$$2 = $16;
      break;
     }
     $19 = HEAP8[$16>>0]|0;
     $20 = ($19<<24>>24)==($17<<24>>24);
     if ($20) {
      $$174 = $16;$$178 = $15;
     } else {
      label = 8;
      break;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $21 = ((($$07399)) + 1|0);
     $$090 = 0;$$2 = $21;
    }
    $22 = (($$090) + ($$089$ph101))|0;
    $23 = HEAP8[$$2>>0]|0;
    $24 = $23&255;
    $25 = (15420 + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = ($26<<24>>24)==(0);
    if ($28) {
     $$089$ph$lcssa = $22;
     break;
    } else {
     $$073$ph102 = $$2;$$089$ph101 = $22;$61 = $27;$62 = $23;
    }
   }
  }
 } while(0);
 $37 = (($$089$ph$lcssa) + 1)|0;
 $38 = (_lily_push_list($0,$37)|0);
 $$082 = $1;$$086 = 0;$$3 = $1;
 while(1) {
  $39 = HEAP8[$$3>>0]|0;
  $40 = HEAP8[$2>>0]|0;
  $41 = ($39<<24>>24)==($40<<24>>24);
  L18: do {
   if ($41) {
    $$380 = $2;$$4 = $$3;
    while(1) {
     $42 = HEAP8[$$4>>0]|0;
     $43 = HEAP8[$$380>>0]|0;
     $44 = ($42<<24>>24)==($43<<24>>24);
     if (!($44)) {
      $$691 = $$4;
      label = 18;
      break L18;
     }
     $45 = ((($$380)) + 1|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = ($46<<24>>24)==(0);
     if ($47) {
      $$691 = $$4;
      label = 18;
      break L18;
     }
     $48 = ((($$4)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)==($46<<24>>24);
     if ($50) {
      $$380 = $45;$$4 = $48;
     } else {
      break;
     }
    }
    $$pr = HEAP8[$$3>>0]|0;
    $51 = $$pr;
    label = 17;
   } else {
    $51 = $39;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   $52 = ($51<<24>>24)==(0);
   if ($52) {
    $$691 = $$3;
    label = 18;
   } else {
    $$187 = $$086;$$284 = $$082;$$693 = $$3;
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $53 = $$3;
   $54 = $$082;
   $55 = (($53) - ($54))|0;
   _lily_push_string_sized($0,$$082,$55);
   _lily_con_set_from_stack($0,$38,$$086);
   $56 = (($$086) + 1)|0;
   $57 = HEAP8[$$691>>0]|0;
   $58 = ($57<<24>>24)==(0);
   $59 = ((($$691)) + 1|0);
   if ($58) {
    break;
   } else {
    $$187 = $56;$$284 = $59;$$693 = $$691;
   }
  }
  $60 = ((($$693)) + 1|0);
  $$082 = $$284;$$086 = $$187;$$3 = $60;
 }
 return;
}
function _new_builtin_file($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_push_file($0,$1,$2);
 $3 = (_lily_stack_get_top($0)|0);
 $4 = (_lily_as_file($3)|0);
 $5 = ((($4)) + 6|0);
 HEAP8[$5>>0] = 1;
 return;
}
function _lily_destroy_hash($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _destroy_hash_elems($2);
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 _lily_free($4);
 _lily_free($2);
 return;
}
function _lily_init_pkg_builtin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_build_class($0,15685,0,44)|0);
 $2 = ((($0)) + 36|0);
 HEAP32[$2>>2] = $1;
 $3 = (_build_class($0,15693,0,13)|0);
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = $3;
 $5 = (_build_class($0,15700,0,94)|0);
 $6 = ((($0)) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = (_build_class($0,15707,0,4)|0);
 $8 = ((($0)) + 48|0);
 HEAP32[$8>>2] = $7;
 $9 = (_build_class($0,15712,0,6)|0);
 $10 = ((($0)) + 52|0);
 HEAP32[$10>>2] = $9;
 $11 = (_build_class($0,15723,0,1)|0);
 $12 = ((($0)) + 56|0);
 HEAP32[$12>>2] = $11;
 $13 = (_build_class($0,15731,-1,29)|0);
 $14 = ((($0)) + 60|0);
 HEAP32[$14>>2] = $13;
 $15 = (_build_class($0,15740,0,15)|0);
 $16 = (_build_class($0,15748,1,53)|0);
 $17 = ((($0)) + 64|0);
 HEAP32[$17>>2] = $16;
 $18 = (_build_class($0,15753,2,30)|0);
 $19 = ((($0)) + 68|0);
 HEAP32[$19>>2] = $18;
 $20 = (_build_class($0,15758,-1,115)|0);
 $21 = ((($0)) + 72|0);
 HEAP32[$21>>2] = $20;
 (_build_class($0,15764,0,21)|0);
 $22 = (_build_special($0,18503,1,65532)|0);
 $23 = ((($0)) + 76|0);
 HEAP32[$23>>2] = $22;
 $24 = (_build_special($0,15769,0,65534)|0);
 $25 = (_build_special($0,15772,0,65533)|0);
 $26 = ((($24)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 6|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 | 32;
 HEAP16[$28>>1] = $30;
 $31 = ((($25)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 6|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 | 32;
 HEAP16[$33>>1] = $35;
 $36 = HEAP32[$2>>2]|0;
 $37 = ((($36)) + 6|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 | 64;
 HEAP16[$37>>1] = $39;
 $40 = HEAP32[$6>>2]|0;
 $41 = ((($40)) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42 | 64;
 HEAP16[$41>>1] = $43;
 $44 = HEAP32[$14>>2]|0;
 $45 = ((($44)) + 6|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 | 256;
 HEAP16[$45>>1] = $47;
 $48 = ((($15)) + 6|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 | 512;
 HEAP16[$48>>1] = $50;
 $51 = ((($0)) + 28|0);
 HEAP16[$51>>1] = 27;
 return;
}
function _build_class($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_lily_new_class($0,$1)|0);
 $5 = $3&65535;
 $6 = ((($4)) + 46|0);
 HEAP16[$6>>1] = $5;
 $7 = $2&65535;
 $8 = ((($4)) + 42|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($4)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 | 4096;
 HEAP16[$9>>1] = $11;
 return ($4|0);
}
function _build_special($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_lily_new_class($0,$1)|0);
 $5 = $3&65535;
 $6 = ((($4)) + 8|0);
 HEAP16[$6>>1] = $5;
 $7 = $2&65535;
 $8 = ((($4)) + 42|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($4)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 | 4096;
 HEAP16[$9>>1] = $11;
 $12 = HEAP32[$4>>2]|0;
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = $12;
 $16 = ((($0)) + 28|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = (($17) + -1)<<16>>16;
 HEAP16[$16>>1] = $18;
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$4>>2] = $20;
 HEAP32[$19>>2] = $4;
 return ($4|0);
}
function _lily_new_type_system($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(24)|0);
 $2 = (_lily_malloc(16)|0);
 $3 = ((($1)) + 20|0);
 HEAP32[$3>>2] = $0;
 HEAP32[$1>>2] = $2;
 $4 = ((($1)) + 4|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($1)) + 10|0);
 HEAP16[$5>>1] = 4;
 $6 = ((($1)) + 8|0);
 HEAP16[$6>>1] = 1;
 $7 = ((($1)) + 6|0);
 HEAP16[$7>>1] = 0;
 $8 = HEAP32[629]|0;
 $9 = HEAP32[$1>>2]|0;
 HEAP32[$9>>2] = $8;
 $10 = ((($1)) + 12|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 return ($1|0);
}
function _lily_free_type_system($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  _lily_free($2);
 }
 _lily_free($0);
 return;
}
function _lily_ts_resolve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$035 = 0, $$1 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 34;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  $$1 = $1;
  return ($$1|0);
 }
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 42|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $47 = ((($7)) + 8|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = ($48<<16>>16)==(-5);
  if (!($49)) {
   $$1 = $1;
   return ($$1|0);
  }
  $50 = HEAP32[$0>>2]|0;
  $51 = ((($0)) + 4|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = ((($1)) + 8|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = (($56) + ($53))|0;
  $58 = (($50) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $$1 = $59;
  return ($$1|0);
 }
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 10|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ((($0)) + 6|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (($18) + ($15))|0;
 _lily_tm_reserve($12,$19);
 $20 = ((($1)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$11>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP16[$13>>1]|0;
 $26 = ($25<<16>>16)==(0);
 if ($26) {
  $$lcssa = $22;
 } else {
  $$035 = 0;$30 = $22;
  while(1) {
   $27 = (($21) + ($$035<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_lily_ts_resolve($0,$28)|0);
   _lily_tm_add_unchecked($30,$29);
   $31 = (($$035) + 1)|0;
   $32 = HEAP16[$13>>1]|0;
   $33 = $32&65535;
   $34 = ($31|0)<($33|0);
   $35 = HEAP32[$11>>2]|0;
   if ($34) {
    $$035 = $31;$30 = $35;
   } else {
    $$lcssa = $35;
    break;
   }
  }
 }
 $36 = HEAP32[$6>>2]|0;
 $37 = ((($36)) + 8|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38<<16>>16)==(7);
 $40 = ((($$lcssa)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) - ($24))|0;
 if ($39) {
  $43 = HEAP16[$2>>1]|0;
  $44 = $43&65535;
  $45 = (_lily_tm_make_call($$lcssa,$44,$36,$42)|0);
  $$1 = $45;
  return ($$1|0);
 } else {
  $46 = (_lily_tm_make($$lcssa,$36,$42)|0);
  $$1 = $46;
  return ($$1|0);
 }
 return (0)|0;
}
function _lily_ts_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_check_raw($0,$1,$2,2)|0);
 return ($3|0);
}
function _check_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(-6);
 if ($8) {
  $9 = $3 & 8;
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 1;
   return ($$0|0);
  }
  $11 = ((($0)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  _lily_tm_add($12,$2);
  $$0 = 1;
  return ($$0|0);
 }
 $13 = ((($2)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(-6);
 if ($17) {
  $18 = $3 & 8;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = 1;
   return ($$0|0);
  }
  $20 = ((($0)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _lily_tm_add($21,$1);
  $$0 = 1;
  return ($$0|0);
 }
 switch ($7<<16>>16) {
 case -5:  {
  $22 = (_check_generic($0,$1,$2,$3)|0);
  $$0 = $22;
  return ($$0|0);
  break;
 }
 case 7:  {
  label = 9;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 9) {
  $23 = ($16<<16>>16)==(7);
  if ($23) {
   $24 = (_check_function($0,$1,$2,$3)|0);
   $$0 = $24;
   return ($$0|0);
  }
 }
 $25 = HEAP32[$4>>2]|0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP16[$26>>1]|0;
 switch ($27<<16>>16) {
 case 11:  {
  $28 = (_check_tuple($0,$1,$2,$3)|0);
  $$0 = $28;
  return ($$0|0);
  break;
 }
 case -2:  {
  $29 = (_collect_scoop($0,$1,$2,$3)|0);
  $$0 = $29;
  return ($$0|0);
  break;
 }
 default: {
  $30 = (_check_misc($0,$1,$2,$3)|0);
  $$0 = $30;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _check_generic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$2 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ($1|0)==($2|0);
  $7 = $6&1;
  $$not = $6 ^ 1;
  $8 = $3 & 8;
  $9 = ($8|0)==(0);
  $or$cond = $9 | $$not;
  if ($or$cond) {
   $$2 = $7;
   return ($$2|0);
  }
  $10 = ((($0)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_tm_add($11,$1);
  $$2 = $7;
  return ($$2|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ((($1)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($17) + ($14))|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + ($18<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($25<<16>>16)==(-2);
 if ($26) {
  $$2 = 0;
  return ($$2|0);
 }
 $27 = HEAP32[629]|0;
 $28 = ($21|0)==($27|0);
 if ($28) {
  HEAP32[$20>>2] = $2;
  $$2 = 1;
  return ($$2|0);
 }
 $29 = ($21|0)==($2|0);
 if ($29) {
  $$2 = 1;
  return ($$2|0);
 }
 $30 = ((($21)) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 & 16;
 $33 = ($32<<16>>16)==(0);
 if ($33) {
  $38 = $3 | 1;
  $39 = (_check_raw($0,$21,$2,$38)|0);
  $$2 = $39;
  return ($$2|0);
 }
 $34 = (_lily_ts_unify($0,$21,$2)|0);
 $35 = ($34|0)==(0|0);
 if ($35) {
  $$2 = 0;
  return ($$2|0);
 }
 $36 = HEAP32[$0>>2]|0;
 $37 = (($36) + ($18<<2)|0);
 HEAP32[$37>>2] = $34;
 $$2 = 1;
 return ($$2|0);
}
function _check_function($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$v = 0, $$058 = 0, $$060$lcssa = 0, $$06070 = 0, $$061 = 0, $$1 = 0, $$162 = 0, $$162$ = 0, $$263 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_lily_tm_pos($5)|0);
 $7 = $3 & 9;
 $8 = ((($1)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7 | 2;
 $15 = (_check_raw($0,$10,$13,$14)|0);
 $16 = ($15|0)!=(0);
 $17 = $3 & 8;
 $18 = ($17|0)==(0);
 $or$cond = $18 | $16;
 if (!($or$cond)) {
  $19 = HEAP32[$4>>2]|0;
  _lily_tm_restore($19,$6);
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[628]|0;
  _lily_tm_add($20,$21);
 }
 $22 = ((($1)) + 10|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ((($2)) + 10|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ($23&65535)>($25&65535);
 $$$v = $26 ? $25 : $23;
 $$ = $$$v&65535;
 $27 = $7 | 4;
 $28 = ($$$v&65535)>(1);
 L4: do {
  if ($28) {
   $$06070 = 1;
   while(1) {
    $29 = HEAP32[$8>>2]|0;
    $30 = (($29) + ($$06070<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$11>>2]|0;
    $33 = (($32) + ($$06070<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($36)) + 8|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = ($38<<16>>16)==(-4);
    if ($39) {
     $40 = ((($31)) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 8|0);
     $43 = HEAP16[$42>>1]|0;
     $44 = ($43<<16>>16)==(-4);
     if ($44) {
      $$058 = $34;
     } else {
      $45 = ((($34)) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = HEAP32[$46>>2]|0;
      $$058 = $47;
     }
    } else {
     $$058 = $34;
    }
    $48 = (_check_raw($0,$31,$$058,$27)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $$060$lcssa = $$06070;$$061 = 0;$$1 = $31;
     break L4;
    }
    $50 = (($$06070) + 1)|0;
    $51 = ($50|0)<($$|0);
    if ($51) {
     $$06070 = $50;
    } else {
     $$060$lcssa = $50;$$061 = 1;$$1 = $31;
     break;
    }
   }
  } else {
   $$060$lcssa = 1;$$061 = 1;$$1 = 0;
  }
 } while(0);
 $52 = HEAP16[$24>>1]|0;
 $53 = HEAP16[$22>>1]|0;
 $54 = ($52&65535)<($53&65535);
 if ($54) {
  $55 = ($$1|0)==(0|0);
  $56 = ($53<<16>>16)==(2);
  $or$cond65 = $55 & $56;
  if ($or$cond65) {
   $57 = HEAP32[$8>>2]|0;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $$162 = 0;$$3 = $59;
  } else {
   $$162 = 0;$$3 = $$1;
  }
 } else {
  $$162 = $$061;$$3 = $$1;
 }
 $60 = ($$3|0)==(0|0);
 if ($60) {
  label = 14;
 } else {
  $61 = ((($$3)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 8|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = ($64&65535)>(65532);
  $or$cond67 = $18 & $65;
  if ($or$cond67) {
   $$263 = 1;
  } else {
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $66 = HEAP16[$24>>1]|0;
  $67 = HEAP16[$22>>1]|0;
  $68 = ($66&65535)>($67&65535);
  if ($68) {
   $69 = HEAP32[$11>>2]|0;
   $70 = (($69) + ($$060$lcssa<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($71)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($73)) + 8|0);
   $75 = HEAP16[$74>>1]|0;
   $76 = ($75<<16>>16)==(-4);
   $$162$ = $76 ? $$162 : 0;
   $$263 = $$162$;
  } else {
   $$263 = $$162;
  }
 }
 $77 = ($$263|0)==(0);
 $or$cond69 = $18 | $77;
 if ($or$cond69) {
  return ($$263|0);
 }
 $78 = HEAP16[$22>>1]|0;
 $79 = $78&65535;
 _unify_call($0,$1,$2,$79);
 return ($$263|0);
}
function _check_tuple($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$036 = 0, $$037 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(11);
 if (!($8)) {
  $$036 = 0;
  return ($$036|0);
 }
 $9 = ((($1)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 & 32;
 $12 = ($11<<16>>16)==(0);
 if ($12) {
  $13 = ((($1)) + 10|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ((($2)) + 10|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($14<<16>>16)==($16<<16>>16);
  if (!($17)) {
   $$036 = 0;
   return ($$036|0);
  }
  $18 = (_check_misc($0,$1,$2,$3)|0);
  $$036 = $18;
  return ($$036|0);
 }
 $19 = $3 & 8;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$036 = 0;
  return ($$036|0);
 }
 $21 = ((($1)) + 10|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ((($2)) + 10|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ($22&65535)>($24&65535);
 if ($25) {
  $$036 = 0;
  return ($$036|0);
 }
 $26 = $24&65535;
 $27 = ((($0)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ((($0)) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = (($32) + ($29))|0;
 $34 = ((($1)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 8|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 ^ -1;
 $42 = $41&65535;
 $43 = (($33) + ($26))|0;
 $44 = ((($0)) + 10|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = ($43>>>0)<($46>>>0);
 if (!($47)) {
  _grow_types($0);
 }
 $48 = HEAP16[$23>>1]|0;
 $49 = $48&65535;
 $50 = ($48<<16>>16)==(0);
 if ($50) {
  $$lcssa = $49;
 } else {
  $51 = ((($2)) + 16|0);
  $52 = HEAP16[$23>>1]|0;
  $53 = $52&65535;
  $$037 = 0;
  while(1) {
   $54 = HEAP32[$51>>2]|0;
   $55 = (($54) + ($$037<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$0>>2]|0;
   $58 = (($$037) + ($33))|0;
   $59 = (($57) + ($58<<2)|0);
   HEAP32[$59>>2] = $56;
   $60 = (($$037) + 1)|0;
   $61 = ($60|0)<($53|0);
   if ($61) {
    $$037 = $60;
   } else {
    $$lcssa = $53;
    break;
   }
  }
 }
 $62 = HEAP16[$30>>1]|0;
 $63 = $62&65535;
 $64 = (($63) + ($$lcssa))|0;
 $65 = $64&65535;
 HEAP16[$30>>1] = $65;
 $66 = HEAP16[$27>>1]|0;
 $67 = $66&65535;
 $68 = (($67) + ($64))|0;
 $69 = $68&65535;
 $70 = (((($0)) + 12|0) + ($42<<1)|0);
 HEAP16[$70>>1] = $69;
 $$036 = 1;
 return ($$036|0);
}
function _collect_scoop($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ((($0)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = (($11) + ($8))|0;
 $13 = ((($1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 ^ -1;
 $18 = $17&65535;
 $19 = ((($2)) + 10|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = (($21) + ($12))|0;
 $23 = ((($0)) + 10|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = ($22>>>0)<($25>>>0);
 if (!($26)) {
  _grow_types($0);
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + ($12<<2)|0);
 HEAP32[$28>>2] = $2;
 $29 = HEAP16[$9>>1]|0;
 $30 = $29&65535;
 $31 = (($30) + 1)|0;
 $32 = $31&65535;
 HEAP16[$9>>1] = $32;
 $33 = HEAP16[$6>>1]|0;
 $34 = $33&65535;
 $35 = (($34) + ($31))|0;
 $36 = $35&65535;
 $37 = (((($0)) + 12|0) + ($18<<1)|0);
 HEAP16[$37>>1] = $36;
 $$0 = 1;
 return ($$0|0);
}
function _check_misc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$1 = 0, $$040 = 0, $$041 = 0, $$04245 = 0, $$146 = 0, $$4 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond44 = 0;
 var $or$cond49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = $3 & 2;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $8 = $3 & 4;
   $9 = ($8|0)==(0);
   if ($9) {
    $11 = (_invariant_check($1,$2,$4)|0);
    $$041 = $11;
    break;
   } else {
    $10 = (_non_invariant_check($2,$1,$4)|0);
    $$041 = $10;
    break;
   }
  } else {
   $7 = (_non_invariant_check($1,$2,$4)|0);
   $$041 = $7;
  }
 } while(0);
 $12 = ($$041|0)!=(0);
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)!=(0);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = $3 & 9;
  $16 = ((($1)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($2)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$4>>2]|0;
  $21 = ($20|0)>(0);
  if ($21) {
   $22 = HEAP32[$4>>2]|0;
   $$04245 = 0;$$146 = 1;
   while(1) {
    $23 = (($17) + ($$04245<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($19) + ($$04245<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (_check_raw($0,$24,$26,$15)|0);
    $28 = ($27|0)==(0);
    $$$1 = $28 ? 0 : $$146;
    $29 = (($$04245) + 1)|0;
    $$not = $28 ^ 1;
    $30 = ($29|0)<($22|0);
    $or$cond49 = $30 & $$not;
    if ($or$cond49) {
     $$04245 = $29;$$146 = $$$1;
    } else {
     $$040 = $15;$$4 = $$$1;
     break;
    }
   }
  } else {
   $$040 = $15;$$4 = 1;
  }
 } else {
  $$040 = $3;$$4 = $$041;
 }
 $31 = ($$4|0)==(0);
 $32 = $$040 & 8;
 $33 = ($32|0)==(0);
 $or$cond44 = $31 | $33;
 if ($or$cond44) {
  STACKTOP = sp;return ($$4|0);
 }
 $34 = HEAP32[$4>>2]|0;
 _unify_simple($0,$1,$2,$34);
 STACKTOP = sp;return ($$4|0);
}
function _non_invariant_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_lily_class_greater_eq($4,$6)|0);
 $8 = ((($0)) + 10|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 HEAP32[$2>>2] = $10;
 return ($7|0);
}
function _invariant_check($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 $8 = $7&1;
 $9 = ((($0)) + 10|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 HEAP32[$2>>2] = $11;
 return ($8|0);
}
function _unify_simple($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($2)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($7&65535)<($11&65535);
 $$sink1 = $12 ? $1 : $2;
 $13 = ((($$sink1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($3|0)==(0);
 $16 = ((($0)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 if ($15) {
  $19 = ((($14)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  _lily_tm_add($17,$20);
  return;
 } else {
  $18 = (_lily_tm_make($17,$14,$3)|0);
  _lily_tm_add($17,$18);
  return;
 }
}
function _lily_class_greater_eq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$0 = 1;
  } else {
   $$07 = $1;
   while(1) {
    $3 = ($$07|0)==(0|0);
    if ($3) {
     $$0 = 0;
     break L1;
    }
    $4 = ((($$07)) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==($0|0);
    if ($6) {
     $$0 = 1;
     break;
    } else {
     $$07 = $5;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _grow_types($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 10|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = $3 << 3;
 $8 = $7 & 262136;
 $9 = (_lily_realloc($6,$8)|0);
 HEAP32[$0>>2] = $9;
 return;
}
function _unify_call($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($2)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($7&65535)<($11&65535);
 $$sink1 = $12 ? $1 : $2;
 $13 = ((($$sink1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ((($2)) + 6|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $16 & 1;
 $20 = $19 & $18;
 $21 = $20&65535;
 $22 = ((($0)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_lily_tm_make_call($23,$21,$14,$3)|0);
 _lily_tm_add($23,$24);
 return;
}
function _lily_ts_unify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_check_raw($0,$1,$2,11)|0);
 $8 = ($7|0)==(0);
 $9 = HEAP32[$3>>2]|0;
 if ($8) {
  $11 = ((($9)) + 4|0);
  HEAP32[$11>>2] = $6;
  $$0 = 0;
  return ($$0|0);
 } else {
  $10 = (_lily_tm_pop($9)|0);
  $$0 = $10;
  return ($$0|0);
 }
 return (0)|0;
}
function _lily_ts_type_greater_eq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_check_raw($0,$1,$2,3)|0);
 return ($3|0);
}
function _lily_ts_resolve_by_second($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($5) + 1)|0;
 $10 = (($9) + ($8))|0;
 $11 = ((($1)) + 10|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($10) + ($13))|0;
 $15 = ((($0)) + 10|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ($14>>>0)<($17>>>0);
 if (!($18)) {
  _grow_types($0);
 }
 $19 = HEAP16[$11>>1]|0;
 $20 = ($19<<16>>16)==(0);
 if ($20) {
  $32 = $10&65535;
  HEAP16[$3>>1] = $32;
  $33 = (_lily_ts_resolve($0,$2)|0);
  HEAP16[$3>>1] = $4;
  return ($33|0);
 }
 $21 = ((($1)) + 16|0);
 $22 = HEAP16[$11>>1]|0;
 $23 = $22&65535;
 $$028 = 0;
 while(1) {
  $24 = HEAP32[$21>>2]|0;
  $25 = (($24) + ($$028<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$0>>2]|0;
  $28 = (($$028) + ($10))|0;
  $29 = (($27) + ($28<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = (($$028) + 1)|0;
  $31 = ($30|0)<($23|0);
  if ($31) {
   $$028 = $30;
  } else {
   break;
  }
 }
 $32 = $10&65535;
 HEAP16[$3>>1] = $32;
 $33 = (_lily_ts_resolve($0,$2)|0);
 HEAP16[$3>>1] = $4;
 return ($33|0);
}
function _lily_ts_reset_scoops($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _lily_ts_scope_save($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 HEAP16[$1>>1] = $3;
 $4 = ((($0)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($1)) + 2|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($1)) + 8|0);
 $8 = ((($0)) + 12|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = HEAP16[$4>>1]|0;
 $20 = $19&65535;
 $21 = HEAP16[$2>>1]|0;
 $22 = $21&65535;
 $23 = (($22) + ($20))|0;
 $24 = $23&65535;
 HEAP16[$2>>1] = $24;
 $25 = ((($0)) + 8|0);
 $26 = HEAP16[$25>>1]|0;
 HEAP16[$4>>1] = $26;
 $27 = $26&65535;
 $28 = (($27) + ($23))|0;
 $29 = $28&65535;
 HEAP16[$8>>1] = $29;
 $30 = HEAP16[$2>>1]|0;
 $31 = $30&65535;
 $32 = HEAP16[$4>>1]|0;
 $33 = $32&65535;
 $34 = (($33) + ($31))|0;
 $35 = ((($0)) + 10|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = ($34>>>0)<($37>>>0);
 if (!($38)) {
  _grow_types($0);
 }
 $39 = HEAP16[$4>>1]|0;
 $40 = ($39<<16>>16)==(0);
 if ($40) {
  return;
 }
 $41 = HEAP16[$2>>1]|0;
 $42 = $41&65535;
 $43 = HEAP16[$4>>1]|0;
 $44 = $43&65535;
 $$023 = 0;
 while(1) {
  $45 = HEAP32[629]|0;
  $46 = HEAP32[$0>>2]|0;
  $47 = (($42) + ($$023))|0;
  $48 = (($46) + ($47<<2)|0);
  HEAP32[$48>>2] = $45;
  $49 = (($$023) + 1)|0;
  $50 = ($49|0)<($44|0);
  if ($50) {
   $$023 = $49;
  } else {
   break;
  }
 }
 return;
}
function _lily_ts_scope_restore($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($0)) + 4|0);
 HEAP16[$3>>1] = $2;
 $4 = ((($1)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($0)) + 6|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($0)) + 12|0);
 $8 = ((($1)) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $7;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 return;
}
function _lily_ts_generics_seen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)<($1|0);
 if (!($5)) {
  return;
 }
 $6 = $1&65535;
 HEAP16[$2>>1] = $6;
 return;
}
function _lily_func_type_num_optargs($0) {
 $0 = $0|0;
 var $$011 = 0, $$011$in = 0, $$011$neg = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 10|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ((($0)) + 16|0);
 $$011$in = $3;
 while(1) {
  $$011 = (($$011$in) + -1)|0;
  $5 = ($$011$in|0)>(1);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$4>>2]|0;
  $7 = (($6) + ($$011<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)==(-4);
  if ($13) {
   $$011$in = $$011;
  } else {
   break;
  }
 }
 $14 = HEAP16[$1>>1]|0;
 $15 = $14&65535;
 $$011$neg = (1 - ($$011$in))|0;
 $16 = (($$011$neg) + -1)|0;
 $17 = (($16) + ($15))|0;
 return ($17|0);
}
function _lily_class_greater_eq_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$056 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$056 = $1;
 }
 while(1) {
  $3 = ((($$056)) + 8|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = ($5|0)==($0|0);
  if ($6) {
   $$0 = 1;
   label = 4;
   break;
  }
  $7 = ((($$056)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $$056 = $8;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = (15775 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $12 = 255 >>> $5;
  $13 = $12 & $2;
  $14 = $13;
 } else {
  $8 = $2 & 63;
  $9 = HEAP32[$1>>2]|0;
  $10 = $9 << 6;
  $11 = $10 | $8;
  $14 = $11;
 }
 HEAP32[$1>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 << 4;
 $17 = $5 | 256;
 $18 = (($17) + ($16))|0;
 $19 = (15775 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 HEAP32[$0>>2] = $21;
 return ($21|0);
}
function _lily_is_valid_utf8($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if (!($4)) {
   $$05 = $0;$9 = $3;
   while(1) {
    $8 = $9&255;
    $10 = (_decode($2,$1,$8)|0);
    $11 = ($10|0)==(1);
    $6 = ((($$05)) + 1|0);
    if ($11) {
     break L1;
    }
    $5 = HEAP8[$6>>0]|0;
    $7 = ($5<<24>>24)==(0);
    if ($7) {
     break;
    } else {
     $$05 = $6;$9 = $5;
    }
   }
  }
 } while(0);
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)==(0);
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _lily_is_valid_sized_utf8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0$lcssa = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (($0) + ($1)|0);
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[$0>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L1: do {
  if ($6) {
   $$0$lcssa = $0;
  } else {
   $$010 = $0;$8 = $5;
   while(1) {
    $7 = $8&255;
    $9 = (_decode($3,$2,$7)|0);
    $10 = ($9|0)==(1);
    if ($10) {
     $$0$lcssa = $$010;
     break L1;
    }
    $11 = ((($$010)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0$lcssa = $11;
     break;
    } else {
     $$010 = $11;$8 = $12;
    }
   }
  }
 } while(0);
 $14 = HEAP32[$3>>2]|0;
 $15 = ($14|0)==(0);
 $16 = ($$0$lcssa|0)==($4|0);
 $$ = $16 & $15;
 $17 = $$&1;
 STACKTOP = sp;return ($17|0);
}
function _lily_new_emit_state($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(96)|0);
 $3 = (_lily_new_buffer_u16(4)|0);
 HEAP32[$2>>2] = $3;
 $4 = (_lily_malloc(16)|0);
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (_lily_new_type_maker()|0);
 $7 = ((($2)) + 84|0);
 HEAP32[$7>>2] = $6;
 $8 = (_lily_new_type_system($6)|0);
 $9 = ((($2)) + 80|0);
 HEAP32[$9>>2] = $8;
 $10 = (_lily_new_buffer_u16(32)|0);
 $11 = ((($2)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($2)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = (_lily_new_buffer_u16(4)|0);
 $14 = ((($2)) + 16|0);
 HEAP32[$14>>2] = $13;
 $15 = (_new_storage_stack()|0);
 $16 = ((($2)) + 40|0);
 HEAP32[$16>>2] = $15;
 $17 = (_new_proto_stack()|0);
 $18 = ((($2)) + 44|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($2)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($2)) + 24|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (_lily_new_string_pile()|0);
 $26 = ((($2)) + 76|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($2)) + 32|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($2)) + 34|0);
 HEAP16[$28>>1] = 4;
 $29 = ((($2)) + 56|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($2)) + 62|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($2)) + 72|0);
 HEAP32[$31>>2] = $1;
 $32 = ((($2)) + 64|0);
 HEAP32[$32>>2] = 1;
 $33 = (_lily_malloc(48)|0);
 $34 = ((($33)) + 44|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($33)) + 40|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($33)) + 13|0);
 HEAP8[$36>>0] = 14;
 $37 = ((($33)) + 28|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($33)) + 36|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($33)) + 16|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($33)) + 20|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($33)) + 6|0);
 HEAP16[$41>>1] = 0;
 $42 = ((($33)) + 10|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($33)) + 12|0);
 HEAP8[$43>>0] = 0;
 $44 = ((($33)) + 14|0);
 HEAP16[$44>>1] = 0;
 HEAP32[$29>>2] = $33;
 $45 = HEAP16[$30>>1]|0;
 $46 = (($45) + 1)<<16>>16;
 HEAP16[$30>>1] = $46;
 $47 = ((($2)) + 48|0);
 HEAP32[$47>>2] = $33;
 $48 = ((($2)) + 52|0);
 HEAP32[$48>>2] = $33;
 $49 = ((($2)) + 60|0);
 HEAP16[$49>>1] = 0;
 return ($2|0);
}
function _new_storage_stack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = (_new_storage()|0);
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 $4 = (_new_storage()|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = (_new_storage()|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = (_new_storage()|0);
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = $10;
 $13 = ((($0)) + 4|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 6|0);
 HEAP16[$14>>1] = 4;
 return ($0|0);
}
function _new_proto_stack() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 4;
 return ($0|0);
}
function _new_storage() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(20)|0);
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 6|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 4|0);
 HEAP16[$4>>1] = 2;
 return ($0|0);
}
function _lily_free_emit_state($0) {
 $0 = $0|0;
 var $$0 = 0, $$124 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 while(1) {
  $3 = ($$0|0)==(0|0);
  if ($3) {
   break;
  }
  $4 = ((($$0)) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$124 = $$0;
   label = 4;
   break;
  } else {
   $$0 = $5;
  }
 }
 if ((label|0) == 4) {
  while(1) {
   label = 0;
   $7 = ((($$124)) + 40|0);
   $8 = HEAP32[$7>>2]|0;
   _lily_free($$124);
   $9 = ($8|0)==(0|0);
   if ($9) {
    break;
   } else {
    $$124 = $8;
    label = 4;
   }
  }
 }
 $10 = ((($0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 _free_storage_stack($11);
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 _free_proto_stack($13);
 $14 = ((($0)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 _lily_free_string_pile($15);
 $16 = ((($0)) + 84|0);
 $17 = HEAP32[$16>>2]|0;
 _lily_free_type_maker($17);
 $18 = ((($0)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 _lily_free($19);
 $20 = ((($0)) + 80|0);
 $21 = HEAP32[$20>>2]|0;
 _lily_free_type_system($21);
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_free($23);
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _lily_free_buffer_u16($25);
 }
 $27 = ((($0)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 _lily_free_buffer_u16($28);
 $29 = HEAP32[$0>>2]|0;
 _lily_free_buffer_u16($29);
 $30 = ((($0)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 _lily_free_buffer_u16($31);
 _lily_free($0);
 return;
}
function _free_storage_stack($0) {
 $0 = $0|0;
 var $$06 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  $$lcssa = $4;
  _lily_free($$lcssa);
  _lily_free($0);
  return;
 } else {
  $$06 = 0;$6 = $4;
 }
 while(1) {
  $5 = (($6) + ($$06<<2)|0);
  $7 = HEAP32[$5>>2]|0;
  _lily_free($7);
  $8 = (($$06) + 1)|0;
  $9 = HEAP16[$1>>1]|0;
  $10 = $9&65535;
  $11 = ($8|0)<($10|0);
  $12 = HEAP32[$0>>2]|0;
  if ($11) {
   $$06 = $8;$6 = $12;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _lily_free($$lcssa);
 _lily_free($0);
 return;
}
function _free_proto_stack($0) {
 $0 = $0|0;
 var $$014 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = HEAP32[$0>>2]|0;
 if ($3) {
  $$lcssa = $4;
  _lily_free($$lcssa);
  _lily_free($0);
  return;
 } else {
  $$014 = 0;$6 = $4;
 }
 while(1) {
  $5 = (($6) + ($$014<<2)|0);
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  _lily_free($9);
  $10 = ((($7)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($11);
  $12 = ((($7)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  _lily_free($13);
  $14 = ((($7)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  _lily_free($15);
  _lily_free($7);
  $16 = (($$014) + 1)|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  $19 = HEAP32[$0>>2]|0;
  if ($18) {
   $$014 = $16;$6 = $19;
  } else {
   $$lcssa = $19;
   break;
  }
 }
 _lily_free($$lcssa);
 _lily_free($0);
 return;
}
function _lily_emit_write_import_call($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[628]|0;
 $3 = (_get_storage($0,$2)|0);
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($3)) + 8|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($0)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 _lily_u16_write_5($5,29,$7,0,$9,$13);
 return;
}
function _get_storage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03648 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($3)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($9&65535)<($11&65535);
 L1: do {
  if ($12) {
   $13 = $9&65535;
   $14 = $11&65535;
   $15 = HEAP32[$3>>2]|0;
   $$03648 = $13;$29 = $14;
   while(1) {
    $16 = (($15) + ($$03648<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break;
    }
    $33 = ($19|0)==($1|0);
    if ($33) {
     $34 = ((($17)) + 16|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==($5|0);
     if (!($36)) {
      label = 9;
      break;
     }
    }
    $37 = (($$03648) + 1)|0;
    $38 = HEAP16[$10>>1]|0;
    $39 = $38&65535;
    $40 = ($37|0)<($39|0);
    if ($40) {
     $$03648 = $37;$29 = $39;
    } else {
     $$1 = $17;
     break L1;
    }
   }
   if ((label|0) == 9) {
    HEAP32[$34>>2] = $5;
    $$1 = $17;
    break;
   }
   HEAP32[$18>>2] = $1;
   $21 = HEAP32[$6>>2]|0;
   $22 = ((($21)) + 20|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23&65535;
   $25 = ((($17)) + 8|0);
   HEAP16[$25>>1] = $24;
   $26 = (($23) + 1)|0;
   HEAP32[$22>>2] = $26;
   $27 = (($$03648) + 1)|0;
   $28 = ($27|0)==($29|0);
   if ($28) {
    $30 = HEAP32[$2>>2]|0;
    _grow_storages($30);
   }
   $31 = $27&65535;
   $32 = ((($3)) + 4|0);
   HEAP16[$32>>1] = $31;
   $$1 = $17;
  } else {
   $$1 = 0;
  }
 } while(0);
 $41 = ((($$1)) + 16|0);
 HEAP32[$41>>2] = $5;
 $42 = ((($$1)) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 & -3;
 HEAP16[$42>>1] = $44;
 return ($$1|0);
}
function _grow_storages($0) {
 $0 = $0|0;
 var $$017 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = HEAP32[$0>>2]|0;
 $6 = $3 << 3;
 $7 = (_lily_realloc($5,$6)|0);
 $8 = HEAP16[$1>>1]|0;
 $9 = $8&65535;
 $10 = ($9>>>0)<($4>>>0);
 if ($10) {
  $$017 = $9;
 } else {
  HEAP32[$0>>2] = $7;
  $14 = $4&65535;
  HEAP16[$1>>1] = $14;
  return;
 }
 while(1) {
  $11 = (_new_storage()|0);
  $12 = (($7) + ($$017<<2)|0);
  HEAP32[$12>>2] = $11;
  $13 = (($$017) + 1)|0;
  $exitcond = ($13|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $13;
  }
 }
 HEAP32[$0>>2] = $7;
 $14 = $4&65535;
 HEAP16[$1>>1] = $14;
 return;
}
function _lily_emit_eval_optarg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _eval_tree($0,$1,0);
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_lily_u16_pop($5)|0);
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $6&65535;
 $12 = (1 - ($11))|0;
 $13 = (($12) + ($10))|0;
 $14 = $13&65535;
 $15 = HEAP32[$8>>2]|0;
 $16 = (($15) + ($11<<1)|0);
 HEAP16[$16>>1] = $14;
 return;
}
function _eval_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 do {
  switch ($4<<24>>24) {
  case 21: case 17: case 18: case 19: case 6: case 7:  {
   _emit_nonlocal_var($0,$1);
   return;
   break;
  }
  case 16:  {
   _emit_literal($0,$1);
   return;
   break;
  }
  case 24:  {
   _emit_integer($0,$1);
   return;
   break;
  }
  case 23:  {
   _emit_byte($0,$1);
   return;
   break;
  }
  case 22:  {
   _emit_boolean($0,$1);
   return;
   break;
  }
  case 0:  {
   _eval_call($0,$1,$2);
   return;
   break;
  }
  case 28:  {
   $5 = ((($1)) + 8|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6&255)>(22);
   if ($7) {
    _eval_assign($0,$1);
    return;
   }
   switch ($6<<24>>24) {
   case 20: case 21:  {
    _eval_logical_op($0,$1);
    return;
    break;
   }
   case 22:  {
    _eval_func_pipe($0,$1,$2);
    return;
    break;
   }
   case 1:  {
    _eval_plus_plus($0,$1);
    return;
    break;
   }
   default: {
    $8 = ((($1)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($9)) + 4|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(5);
    if (!($12)) {
     _eval_tree($0,$9,0);
    }
    $13 = ((($1)) + 32|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($14)) + 4|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(5);
    if (!($17)) {
     $18 = HEAP32[$8>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($19)) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     _eval_tree($0,$14,$21);
    }
    _emit_binary_op($0,$1);
    return;
   }
   }
   break;
  }
  case 4:  {
   $22 = ((($1)) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   _eval_tree($0,$23,$2);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$1>>2] = $24;
   return;
   break;
  }
  case 9:  {
   _eval_unary_op($0,$1);
   return;
   break;
  }
  case 2:  {
   _eval_build_list($0,$1,$2);
   return;
   break;
  }
  case 3:  {
   _eval_build_hash($0,$1,$2);
   return;
   break;
  }
  case 12:  {
   _eval_build_tuple($0,$1,$2);
   return;
   break;
  }
  case 1:  {
   _eval_subscript($0,$1);
   return;
   break;
  }
  case 11:  {
   _eval_typecast($0,$1);
   return;
   break;
  }
  case 8:  {
   _eval_oo_access($0,$1);
   return;
   break;
  }
  case 13:  {
   _eval_property($0,$1);
   return;
   break;
  }
  case 14:  {
   _eval_variant($0,$1,$2);
   return;
   break;
  }
  case 15:  {
   _eval_lambda($0,$1,$2);
   return;
   break;
  }
  case 20:  {
   _eval_self($0,$1);
   return;
   break;
  }
  case 25:  {
   $25 = ((($1)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$1>>2] = $27;
   return;
   break;
  }
  case 26:  {
   _eval_named_call($0,$1,$2);
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
}
function _emit_nonlocal_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$037 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_get_storage($0,$5)|0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 switch ($8<<24>>24) {
 case 7:  {
  $9 = ((($3)) + 8|0);
  $10 = HEAP16[$9>>1]|0;
  $$0 = 39;$$1 = $10;
  break;
 }
 case 21:  {
  $11 = ((($3)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12&65535;
  $14 = ((($3)) + 8|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = (_find_closed_sym_spot_raw($0,$13,$15)|0);
  $17 = $16&65535;
  $18 = $16 & 65535;
  $19 = ($18|0)==(65535);
  if ($19) {
   $20 = (_checked_close_over_var($0,$3)|0);
   $$037 = $20;
  } else {
   $$037 = $17;
  }
  $21 = ((($0)) + 52|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 12|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 | 1;
  HEAP8[$23>>0] = $25;
  $$0 = 54;$$1 = $$037;
  break;
 }
 case 19:  {
  $26 = HEAP32[$2>>2]|0;
  _ensure_valid_scope($0,$26);
  label = 7;
  break;
 }
 default: {
  label = 7;
 }
 }
 if ((label|0) == 7) {
  $27 = ((($6)) + 6|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 | 2;
  HEAP16[$27>>1] = $29;
  $30 = ((($3)) + 8|0);
  $31 = HEAP16[$30>>1]|0;
  $$0 = 41;$$1 = $31;
 }
 $32 = ((($3)) + 6|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 & 64;
 $35 = ($34<<16>>16)==(0);
 if (!($35)) {
  $36 = HEAP8[$7>>0]|0;
  $37 = ($36<<24>>24)==(21);
  if (!($37)) {
   _emit_create_function($0,$3,$6);
   HEAP32[$1>>2] = $6;
   return;
  }
 }
 $38 = ((($0)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($6)) + 8|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = ((($1)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43&65535;
 _lily_u16_write_4($39,$$0,$$1,$41,$44);
 HEAP32[$1>>2] = $6;
 return;
}
function _emit_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_get_storage($0,$3)|0);
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 24|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($4)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 _lily_u16_write_4($6,41,$8,$10,$13);
 HEAP32[$1>>2] = $4;
 return;
}
function _emit_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_get_storage($0,$7)|0);
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 24|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($8)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 _lily_u16_write_4($10,42,$12,$14,$17);
 HEAP32[$1>>2] = $8;
 return;
}
function _emit_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_get_storage($0,$7)|0);
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 24|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($8)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 _lily_u16_write_4($10,44,$12,$14,$17);
 HEAP32[$1>>2] = $8;
 return;
}
function _emit_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_get_storage($0,$7)|0);
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 24|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($8)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 _lily_u16_write_4($10,43,$12,$14,$17);
 HEAP32[$1>>2] = $8;
 return;
}
function _eval_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 HEAP32[$3>>2] = 0;
 _begin_call($0,$1,$3);
 $5 = ((($0)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_ts_scope_save($6,$4);
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 2;
 $11 = ($10<<16>>16)==(0);
 L1: do {
  if (!($11)) {
   $12 = ((($1)) + 8|0);
   $13 = HEAP8[$12>>0]|0;
   switch ($13<<24>>24) {
   case 5: case 17: case 21:  {
    $14 = HEAP32[$5>>2]|0;
    (_lily_ts_check($14,$7,$7)|0);
    break L1;
    break;
   }
   default: {
   }
   }
   $15 = ($2|0)==(0|0);
   if (!($15)) {
    $16 = ((($2)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = ((($7)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 8|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = ($19<<16>>16)==($26<<16>>16);
    if ($27) {
     $28 = HEAP32[$5>>2]|0;
     (_lily_ts_check($28,$22,$2)|0);
    }
   }
  }
 } while(0);
 $29 = HEAP32[$3>>2]|0;
 _run_call($0,$1,$29);
 $30 = HEAP32[$5>>2]|0;
 _lily_ts_scope_restore($30,$4);
 STACKTOP = sp;return;
}
function _eval_assign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$0137 = 0, $$0139 = 0, $$1 = 0, $$1138 = 0, $$2 = 0, $$off = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(7);
 $7 = $5 | 2;
 $8 = ($7<<24>>24)==(7);
 L1: do {
  if ($8) {
   _eval_assign_global_local($0,$1);
   $9 = HEAP32[$2>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 6|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 & -2;
   HEAP16[$11>>1] = $13;
   $14 = ((($1)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($10)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $20 = ((($16)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$17>>2] = $21;
    $$0 = $10;$$0137 = $16;
    label = 11;
   } else {
    $$0 = $10;$$0137 = $16;
    label = 11;
   }
  } else {
   switch ($5<<24>>24) {
   case 13:  {
    _eval_assign_property($0,$1);
    $22 = HEAP32[$2>>2]|0;
    $23 = ((($22)) + 28|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 6|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 & -2;
    HEAP16[$25>>1] = $27;
    $28 = ((($1)) + 32|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($24)) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $$0 = $24;$$0137 = $30;
     label = 11;
     break L1;
    }
    $34 = ((($30)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$31>>2] = $35;
    $$0 = $24;$$0137 = $30;
    label = 11;
    break L1;
    break;
   }
   case 8:  {
    _eval_assign_oo($0,$1);
    $36 = HEAP32[$2>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($1)) + 32|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    $$1 = $38;$$1138 = $41;
    break L1;
    break;
   }
   case 21:  {
    _eval_assign_upvalue($0,$1);
    $42 = HEAP32[$2>>2]|0;
    $43 = ((($42)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($1)) + 32|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    $$0 = $44;$$0137 = $47;
    label = 11;
    break L1;
    break;
   }
   case 1:  {
    _eval_assign_sub($0,$1);
    $48 = ((($1)) + 32|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$49>>2]|0;
    $$1 = 0;$$1138 = $50;
    break L1;
    break;
   }
   default: {
    $51 = ((($1)) + 16|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($0)) + 72|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 12|0);
    HEAP32[$55>>2] = $52;
    $56 = ((($1)) + 8|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = (_opname($58)|0);
    HEAP32[$vararg_buffer>>2] = $59;
    _lily_raise_syn($54,17653,$vararg_buffer);
    // unreachable;
   }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $60 = ((($$0137)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 6|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 & 16;
  $65 = ($64<<16>>16)==(0);
  if (!($65)) {
   $66 = ((($1)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   _incomplete_type_assign_error($0,$67,$61);
  }
  $68 = ((($$0)) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[$60>>2]|0;
  $71 = ($69|0)==($70|0);
  if ($71) {
   $$1 = $$0;$$1138 = $$0137;
  } else {
   $72 = ((($0)) + 80|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (_lily_ts_type_greater_eq($73,$69,$70)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = ((($1)) + 16|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$68>>2]|0;
    $79 = HEAP32[$60>>2]|0;
    _bad_assign_error($0,$77,$78,$79);
    $$1 = $$0;$$1138 = $$0137;
   } else {
    $$1 = $$0;$$1138 = $$0137;
   }
  }
 }
 $80 = ((($1)) + 8|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = ($81&255)>(23);
 if ($82) {
  _emit_compound_op($0,$1);
  $83 = HEAP32[$1>>2]|0;
  $$2 = $83;
 } else {
  $$2 = $$1138;
 }
 L23: do {
  if ($8) {
   $84 = (_assign_optimize_check($1)|0);
   $85 = ($84|0)==(0);
   if (!($85)) {
    $86 = ((($0)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + -2)|0;
    $91 = ((($$1)) + 8|0);
    $92 = HEAP16[$91>>1]|0;
    $93 = HEAP32[$87>>2]|0;
    $94 = (($93) + ($90<<1)|0);
    HEAP16[$94>>1] = $92;
    break;
   }
   if ($6) {
    $$0139 = 40;
   } else {
    $95 = ((($$1)) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ((($96)) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($98)) + 8|0);
    $100 = HEAP16[$99>>1]|0;
    $$off = (($100) + -1)<<16>>16;
    $switch = ($$off&65535)<(2);
    $$ = $switch&1;
    $$0139 = $$;
   }
   $101 = ((($0)) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($$2)) + 8|0);
   $104 = HEAP16[$103>>1]|0;
   $105 = ((($$1)) + 8|0);
   $106 = HEAP16[$105>>1]|0;
   $107 = ((($1)) + 16|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108&65535;
   _lily_u16_write_4($102,$$0139,$104,$106,$109);
  } else {
   switch ($5<<24>>24) {
   case 13:  {
    $110 = ((($0)) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ((($$1)) + 8|0);
    $113 = HEAP16[$112>>1]|0;
    $114 = ((($0)) + 52|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($115)) + 36|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($117)) + 8|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = ((($$2)) + 8|0);
    $121 = HEAP16[$120>>1]|0;
    $122 = ((($1)) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $123&65535;
    _lily_u16_write_5($111,48,$113,$119,$121,$124);
    break L23;
    break;
   }
   case 8:  {
    $125 = ((($$1)) + 8|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = ((($0)) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = HEAP32[$2>>2]|0;
    $130 = ((($129)) + 32|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = HEAP32[$131>>2]|0;
    $133 = ((($132)) + 8|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = ((($$2)) + 8|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = ((($1)) + 16|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138&65535;
    _lily_u16_write_5($128,48,$126,$134,$136,$139);
    break L23;
    break;
   }
   case 21:  {
    $140 = ((($$1)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $141&65535;
    $143 = ((($$1)) + 8|0);
    $144 = HEAP16[$143>>1]|0;
    $145 = (_find_closed_sym_spot_raw($0,$142,$144)|0);
    $146 = $145&65535;
    $147 = ((($0)) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ((($$2)) + 8|0);
    $150 = HEAP16[$149>>1]|0;
    $151 = ((($1)) + 16|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $152&65535;
    _lily_u16_write_4($148,55,$146,$150,$153);
    break L23;
    break;
   }
   case 1:  {
    $154 = HEAP32[$2>>2]|0;
    $155 = ((($154)) + 32|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($156)) + 40|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = HEAP32[$156>>2]|0;
    $160 = HEAP32[$158>>2]|0;
    $161 = ((($0)) + 8|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = ((($159)) + 8|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = ((($160)) + 8|0);
    $166 = HEAP16[$165>>1]|0;
    $167 = ((($$2)) + 8|0);
    $168 = HEAP16[$167>>1]|0;
    $169 = ((($1)) + 16|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $170&65535;
    _lily_u16_write_5($162,38,$164,$166,$168,$171);
    break L23;
    break;
   }
   default: {
    break L23;
   }
   }
  }
 } while(0);
 $172 = ((($1)) + 36|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($173|0)==(0|0);
 if ($174) {
  $$sink = $174 ? 0 : $$2;
  HEAP32[$1>>2] = $$sink;
  STACKTOP = sp;return;
 }
 $175 = ((($173)) + 4|0);
 $176 = HEAP8[$175>>0]|0;
 $177 = ($176<<24>>24)==(28);
 if (!($177)) {
  $181 = ((($0)) + 72|0);
  $182 = HEAP32[$181>>2]|0;
  _lily_raise_syn($182,17688,$vararg_buffer1);
  // unreachable;
 }
 $178 = ((($173)) + 8|0);
 $179 = HEAP8[$178>>0]|0;
 $180 = ($179&255)<(23);
 if ($180) {
  $181 = ((($0)) + 72|0);
  $182 = HEAP32[$181>>2]|0;
  _lily_raise_syn($182,17688,$vararg_buffer1);
  // unreachable;
 } else {
  $$sink = $174 ? 0 : $$2;
  HEAP32[$1>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function _eval_logical_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$neg = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(21);
 $5 = $4&1;
 $6 = ((($1)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  label = 4;
 } else {
  $9 = ((($7)) + 4|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(28);
  if ($11) {
   $12 = ((($7)) + 8|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($3<<24>>24);
   if ($14) {
    $$0 = -1;
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $$0 = $17;
 }
 $18 = ((($1)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(5);
 if (!($22)) {
  _eval_tree($0,$19,0);
 }
 $23 = HEAP32[$18>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ($25<<24>>24)==(28);
 if ($26) {
  $27 = ((($23)) + 8|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = HEAP8[$2>>0]|0;
  $30 = ($28<<24>>24)==($29<<24>>24);
  if (!($30)) {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  _emit_jump_if($0,$23,$5);
 }
 $31 = ((($1)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)==(5);
 if (!($35)) {
  _eval_tree($0,$32,0);
 }
 $36 = HEAP32[$31>>2]|0;
 _emit_jump_if($0,$36,$5);
 $37 = ($$0|0)==(-1);
 if ($37) {
  return;
 }
 $38 = ((($0)) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 56|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (_get_storage($0,$43)|0);
 $45 = HEAP8[$2>>0]|0;
 $46 = ($45<<24>>24)==(20);
 $47 = ((($0)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $46&1;
 $50 = ((($44)) + 8|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = ((($1)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53&65535;
 _lily_u16_write_4($48,43,$49,$51,$54);
 $55 = HEAP32[$47>>2]|0;
 _lily_u16_write_2($55,23,0);
 $56 = HEAP32[$47>>2]|0;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + -1)|0;
 _write_patches_since($0,$$0);
 $60 = HEAP32[$47>>2]|0;
 $61 = $46 ^ 1;
 $62 = $61&1;
 $63 = HEAP16[$50>>1]|0;
 $64 = HEAP32[$52>>2]|0;
 $65 = $64&65535;
 _lily_u16_write_4($60,43,$62,$63,$65);
 $66 = HEAP32[$47>>2]|0;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $$neg = (1 - ($58))|0;
 $69 = (($$neg) + 1)|0;
 $70 = (($69) + ($68))|0;
 $71 = $70&65535;
 $72 = HEAP32[$66>>2]|0;
 $73 = (($72) + ($59<<1)|0);
 HEAP16[$73>>1] = $71;
 HEAP32[$1>>2] = $44;
 return;
}
function _eval_func_pipe($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 40|0);
 HEAP32[$7>>2] = $4;
 $8 = ((($1)) + 22|0);
 HEAP16[$8>>1] = 2;
 $9 = ((($1)) + 4|0);
 HEAP8[$9>>0] = 0;
 _eval_call($0,$1,$2);
 return;
}
function _eval_plus_plus($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$039 = 0, $$138 = 0, $$neg = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(5);
 if (!($6)) {
  _eval_tree($0,$3,0);
 }
 $7 = ((($1)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(5);
 if (!($11)) {
  _eval_tree($0,$8,0);
 }
 $12 = ((($1)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($13)) + 4|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(28);
  if ($17) {
   $18 = ((($13)) + 8|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(1);
   if ($20) {
    return;
   }
  }
 }
 $21 = ((($0)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 _lily_u16_write_2($22,58,0);
 $23 = HEAP32[$21>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($0)) + 92|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_get_storage($0,$33)|0);
 $35 = ((($27)) + 4|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)==(28);
 L12: do {
  if ($37) {
   $$039 = $27;
   while(1) {
    $38 = ((($$039)) + 8|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)==(1);
    if (!($40)) {
     $$0$lcssa = $$039;
     break L12;
    }
    $41 = ((($$039)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 4|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = ($44<<24>>24)==(28);
    if ($45) {
     $$039 = $42;
    } else {
     $$0$lcssa = $42;
     break;
    }
   }
  } else {
   $$0$lcssa = $27;
  }
 } while(0);
 $46 = ((($$0$lcssa)) + 36|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$21>>2]|0;
 $49 = ((($47)) + 28|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($51)) + 8|0);
 $53 = HEAP16[$52>>1]|0;
 _lily_u16_write_1($48,$53);
 $54 = ($47|0)==($1|0);
 $55 = HEAP32[$21>>2]|0;
 $56 = ((($47)) + 32|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($58)) + 8|0);
 $60 = HEAP16[$59>>1]|0;
 _lily_u16_write_1($55,$60);
 if (!($54)) {
  $$138 = $47;
  while(1) {
   $61 = ((($$138)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==($1|0);
   $64 = HEAP32[$21>>2]|0;
   $65 = ((($62)) + 32|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 8|0);
   $69 = HEAP16[$68>>1]|0;
   _lily_u16_write_1($64,$69);
   if ($63) {
    break;
   } else {
    $$138 = $62;
   }
  }
 }
 $70 = HEAP32[$21>>2]|0;
 $71 = ((($70)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $$neg = (1 - ($25))|0;
 $73 = (($$neg) + 65535)|0;
 $74 = (($73) + ($72))|0;
 $75 = $74&65535;
 $76 = HEAP32[$70>>2]|0;
 $77 = (($76) + ($26<<1)|0);
 HEAP16[$77>>1] = $75;
 $78 = ((($34)) + 8|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = ((($1)) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81&65535;
 _lily_u16_write_2($70,$79,$82);
 HEAP32[$1>>2] = $34;
 return;
}
function _emit_binary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$0100 = 0, $$1116 = 0, $$197115 = 0, $$3114 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond104 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($9|0)==($13|0);
 L1: do {
  if ($16) {
   $17 = ((($11)) + 8|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = ((($1)) + 8|0);
   $20 = HEAP8[$19>>0]|0;
   L3: do {
    switch ($18<<16>>16) {
    case 1:  {
     switch ($20<<24>>24) {
     case 0:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 2;
      break L3;
      break;
     }
     case 5:  {
      label = 25;
      break L3;
      break;
     }
     case 4:  {
      label = 19;
      break L3;
      break;
     }
     case 7:  {
      label = 20;
      break L3;
      break;
     }
     case 6:  {
      label = 21;
      break L3;
      break;
     }
     case 3:  {
      label = 26;
      break L3;
      break;
     }
     case 8:  {
      label = 23;
      break L3;
      break;
     }
     case 2:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 3;
      break L3;
      break;
     }
     case 10:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 5;
      break L3;
      break;
     }
     case 11:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 6;
      break L3;
      break;
     }
     case 9:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 4;
      break L3;
      break;
     }
     case 12:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 7;
      break L3;
      break;
     }
     case 13:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 8;
      break L3;
      break;
     }
     case 14:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 9;
      break L3;
      break;
     }
     case 15:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 10;
      break L3;
      break;
     }
     case 16:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 11;
      break L3;
      break;
     }
     default: {
      break L1;
     }
     }
     break;
    }
    case 2:  {
     switch ($20<<24>>24) {
     case 0:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 12;
      break L3;
      break;
     }
     case 5:  {
      label = 25;
      break L3;
      break;
     }
     case 4:  {
      label = 19;
      break L3;
      break;
     }
     case 7:  {
      label = 20;
      break L3;
      break;
     }
     case 6:  {
      label = 21;
      break L3;
      break;
     }
     case 3:  {
      label = 26;
      break L3;
      break;
     }
     case 8:  {
      label = 23;
      break L3;
      break;
     }
     case 2:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 13;
      break L3;
      break;
     }
     case 10:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 14;
      break L3;
      break;
     }
     case 11:  {
      $$1116 = $4;$$197115 = $7;$$3114 = 15;
      break L3;
      break;
     }
     default: {
      break L1;
     }
     }
     break;
    }
    default: {
     $$off = (($18) + -1)<<16>>16;
     $21 = ($$off&65535)<(4);
     if ($21) {
      switch ($20<<24>>24) {
      case 5:  {
       label = 25;
       break L3;
       break;
      }
      case 4:  {
       label = 19;
       break L3;
       break;
      }
      case 7:  {
       label = 20;
       break L3;
       break;
      }
      case 6:  {
       label = 21;
       break L3;
       break;
      }
      case 3:  {
       $$1116 = $4;$$197115 = $7;$$3114 = 16;
       break L3;
       break;
      }
      case 8:  {
       label = 23;
       break L3;
       break;
      }
      default: {
       break L1;
      }
      }
     } else {
      switch ($20<<24>>24) {
      case 8:  {
       label = 23;
       break L3;
       break;
      }
      case 3:  {
       label = 26;
       break L3;
       break;
      }
      default: {
       break L1;
      }
      }
     }
    }
    }
   } while(0);
   if ((label|0) == 19) {
    $$1116 = $7;$$197115 = $4;$$3114 = 18;
   }
   else if ((label|0) == 20) {
    $$1116 = $4;$$197115 = $7;$$3114 = 19;
   }
   else if ((label|0) == 21) {
    $$1116 = $4;$$197115 = $7;$$3114 = 18;
   }
   else if ((label|0) == 23) {
    $$1116 = $4;$$197115 = $7;$$3114 = 17;
   }
   else if ((label|0) == 25) {
    $$1116 = $7;$$197115 = $4;$$3114 = 19;
   }
   else if ((label|0) == 26) {
    $$1116 = $4;$$197115 = $7;$$3114 = 16;
   }
   $39 = ((($1)) + 8|0);
   $40 = HEAP8[$39>>0]|0;
   switch ($40<<24>>24) {
   case 11: case 10: case 2: case 0:  {
    $41 = ((($$1116)) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 12|0);
    $$0$in = $43;
    break;
   }
   case 8: case 7: case 6: case 5: case 4: case 3:  {
    $44 = ((($0)) + 92|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 56|0);
    $$0$in = $46;
    break;
   }
   default: {
    $47 = ((($0)) + 92|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + 36|0);
    $$0$in = $49;
   }
   }
   $$0 = HEAP32[$$0$in>>2]|0;
   $50 = ((($$1116)) + 4|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = ($51<<16>>16)==(2);
   $53 = ($11|0)==($$0|0);
   $or$cond = $53 & $52;
   do {
    if ($or$cond) {
     $$0100 = $$1116;
    } else {
     $54 = ((($$197115)) + 4|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = ($55<<16>>16)==(2);
     $57 = ($15|0)==($$0|0);
     $or$cond104 = $57 & $56;
     if ($or$cond104) {
      $$0100 = $$197115;
      break;
     } else {
      $58 = ((($$0)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (_get_storage($0,$59)|0);
      $61 = ((($60)) + 6|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62 | 2;
      HEAP16[$61>>1] = $63;
      $$0100 = $60;
      break;
     }
    }
   } while(0);
   $64 = ((($0)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($$1116)) + 8|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = ((($$197115)) + 8|0);
   $69 = HEAP16[$68>>1]|0;
   $70 = ((($$0100)) + 8|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = ((($1)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73&65535;
   _lily_u16_write_5($65,$$3114,$67,$69,$71,$74);
   HEAP32[$1>>2] = $$0100;
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = ((($1)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $23;
 $27 = HEAP32[$2>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($1)) + 8|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = (_opname($33)|0);
 $35 = HEAP32[$5>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$vararg_buffer>>2] = $30;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $34;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $38;
 _lily_raise_syn($25,17624,$vararg_buffer);
 // unreachable;
}
function _eval_unary_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(5);
 if (!($6)) {
  _eval_tree($0,$3,0);
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 8|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ((($0)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($12|0)==($18|0);
 L4: do {
  if ($19) {
   $20 = ($14<<24>>24)==(17);
   if ($20) {
    $$035 = 20;
    label = 10;
   } else {
    label = 9;
   }
  } else {
   $21 = ((($16)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($12|0)==($22|0);
   if ($23) {
    switch ($14<<24>>24) {
    case 18:  {
     $$035 = 21;
     label = 10;
     break L4;
     break;
    }
    case 17:  {
     $$035 = 20;
     label = 10;
     break L4;
     break;
    }
    case 19:  {
     $$035 = 22;
     label = 10;
     break L4;
     break;
    }
    default: {
     label = 9;
     break L4;
    }
    }
   } else {
    label = 9;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $24 = ((($1)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 72|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 12|0);
  HEAP32[$28>>2] = $25;
  $29 = HEAP8[$13>>0]|0;
  $30 = $29&255;
  $31 = (_opname($30)|0);
  $32 = ((($12)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  _lily_raise_syn($27,17515,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 10) {
  $34 = ((($12)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_get_storage($0,$35)|0);
  $37 = ((($36)) + 6|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38 | 2;
  HEAP16[$37>>1] = $39;
  $40 = ((($0)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$2>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = ((($36)) + 8|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = ((($1)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $49&65535;
  _lily_u16_write_4($41,$$035,$45,$47,$50);
  HEAP32[$1>>2] = $36;
  STACKTOP = sp;return;
 }
}
function _eval_build_list($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$044 = 0, $$04445 = 0, $$04447 = 0, $$1 = 0, $$2$lcssa = 0, $$246 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  _make_empty_list_or_hash($0,$1,$2);
  return;
 }
 $6 = ($2|0)==(0|0);
 if ($6) {
  label = 7;
 } else {
  $7 = ((($2)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==(9);
  if ($11) {
   $12 = ((($2)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 7;
   } else {
    $16 = ((($14)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = ($19<<16>>16)==(-2);
    if ($20) {
     label = 7;
    } else {
     $$1 = $14;
    }
   }
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $21 = HEAP32[629]|0;
  $$1 = $21;
 }
 $22 = ((($1)) + 32|0);
 $$04445 = HEAP32[$22>>2]|0;
 $23 = ($$04445|0)==(0|0);
 if ($23) {
  $$2$lcssa = $$1;
 } else {
  $24 = ((($0)) + 80|0);
  $$04447 = $$04445;$$246 = $$1;
  while(1) {
   _eval_tree($0,$$04447,$$246);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$$04447>>2]|0;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (_lily_ts_unify($25,$$246,$28)|0);
   $30 = ($29|0)==(0|0);
   if ($30) {
    _inconsistent_type_error($0,$$04447,$$246,17501);
   }
   $31 = ((($$04447)) + 40|0);
   $$044 = HEAP32[$31>>2]|0;
   $32 = ($$044|0)==(0|0);
   if ($32) {
    $$2$lcssa = $29;
    break;
   } else {
    $$04447 = $$044;$$246 = $29;
   }
  }
 }
 $33 = ((($0)) + 84|0);
 $34 = HEAP32[$33>>2]|0;
 _lily_tm_add($34,$$2$lcssa);
 $35 = HEAP32[$33>>2]|0;
 $36 = ((($0)) + 92|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 64|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_lily_tm_make($35,$39,1)|0);
 $41 = (_get_storage($0,$40)|0);
 $42 = HEAP32[$22>>2]|0;
 $43 = ((($1)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP16[$3>>1]|0;
 $46 = $45&65535;
 _write_build_op($0,33,$42,$44,$46,$41);
 HEAP32[$1>>2] = $41;
 return;
}
function _eval_build_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$069 = 0, $$073 = 0, $$076 = 0, $$1 = 0, $$170$lcssa = 0, $$17074 = 0, $$2$lcssa = 0, $$271 = 0, $$275 = 0, $$3 = 0, $$72 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  label = 4;
 } else {
  $4 = ((($2)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = ($7<<16>>16)==(10);
  if ($8) {
   $9 = ((($2)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($10)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==(0|0);
   $15 = HEAP32[629]|0;
   $$ = $14 ? $15 : $11;
   $16 = ($13|0)==(0|0);
   $$72 = $16 ? $15 : $13;
   $$069 = $$72;$$1 = $$;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[629]|0;
  $$069 = $17;$$1 = $17;
 }
 $18 = ((($1)) + 32|0);
 $$073 = HEAP32[$18>>2]|0;
 $19 = ($$073|0)==(0|0);
 if ($19) {
  $$170$lcssa = $$069;$$2$lcssa = $$1;
 } else {
  $20 = ((($0)) + 80|0);
  $$076 = $$073;$$17074 = $$069;$$275 = $$1;
  while(1) {
   $21 = ((($$076)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   _eval_tree($0,$$076,$$275);
   $23 = HEAP32[$20>>2]|0;
   $24 = HEAP32[$$076>>2]|0;
   $25 = ((($24)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_lily_ts_unify($23,$$275,$26)|0);
   $28 = ($27|0)==(0|0);
   if ($28) {
    _inconsistent_type_error($0,$$076,$$275,17370);
    $$3 = $$275;
   } else {
    _ensure_valid_key_type($0,$1,$27);
    $$3 = $27;
   }
   _eval_tree($0,$22,$$17074);
   $29 = HEAP32[$20>>2]|0;
   $30 = HEAP32[$22>>2]|0;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (_lily_ts_unify($29,$$17074,$32)|0);
   $34 = ($33|0)==(0|0);
   if ($34) {
    _inconsistent_type_error($0,$22,$$17074,17380);
    $$271 = $$17074;
   } else {
    $$271 = $33;
   }
   $35 = HEAP32[$21>>2]|0;
   $36 = ((($35)) + 40|0);
   $$0 = HEAP32[$36>>2]|0;
   $37 = ($$0|0)==(0|0);
   if ($37) {
    $$170$lcssa = $$271;$$2$lcssa = $$3;
    break;
   } else {
    $$076 = $$0;$$17074 = $$271;$$275 = $$3;
   }
  }
 }
 $38 = ((($0)) + 92|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 68|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($0)) + 84|0);
 $43 = HEAP32[$42>>2]|0;
 _lily_tm_add($43,$$2$lcssa);
 $44 = HEAP32[$42>>2]|0;
 _lily_tm_add($44,$$170$lcssa);
 $45 = HEAP32[$42>>2]|0;
 $46 = (_lily_tm_make($45,$41,2)|0);
 $47 = (_get_storage($0,$46)|0);
 $48 = HEAP32[$18>>2]|0;
 $49 = ((($1)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($1)) + 22|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 _write_build_op($0,35,$48,$50,$53,$47);
 HEAP32[$1>>2] = $47;
 return;
}
function _eval_build_tuple($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04352 = 0, $$044 = 0, $$045 = 0, $$04551 = 0, $$04553 = 0, $$1$lcssa = 0, $$14649 = 0, $$14649$in = 0, $$148 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  $6 = ((($0)) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,17340,$vararg_buffer);
  // unreachable;
 }
 $8 = ($2|0)==(0|0);
 do {
  if ($8) {
   $$0 = 0;
  } else {
   $9 = ((($2)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 8|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(11);
   if ($13) {
    $14 = HEAP16[$3>>1]|0;
    $15 = ((($2)) + 10|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($14&65535)>($16&65535);
    if (!($17)) {
     $$0 = $2;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 $18 = ((($1)) + 32|0);
 $$04551 = HEAP32[$18>>2]|0;
 $19 = ($$04551|0)==(0|0);
 if (!($19)) {
  $20 = ($$0|0)==(0|0);
  $21 = ((($$0)) + 16|0);
  $$04352 = 0;$$04553 = $$04551;
  while(1) {
   if ($20) {
    $$044 = 0;
   } else {
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + ($$04352<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $$044 = $28;
   }
   _eval_tree($0,$$04553,$$044);
   $29 = (($$04352) + 1)|0;
   $30 = ((($$04553)) + 40|0);
   $$045 = HEAP32[$30>>2]|0;
   $31 = ($$045|0)==(0|0);
   if ($31) {
    break;
   } else {
    $$04352 = $29;$$04553 = $$045;
   }
  }
 }
 $22 = HEAP16[$3>>1]|0;
 $23 = ($22<<16>>16)==(0);
 $24 = ((($0)) + 84|0);
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $$1$lcssa = 0;$$lcssa = $25;
 } else {
  $$14649$in = $18;$$148 = 0;$35 = $25;
  while(1) {
   $$14649 = HEAP32[$$14649$in>>2]|0;
   $32 = HEAP32[$$14649>>2]|0;
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   _lily_tm_add($35,$34);
   $36 = (($$148) + 1)|0;
   $37 = ((($$14649)) + 40|0);
   $38 = HEAP16[$3>>1]|0;
   $39 = $38&65535;
   $40 = ($36|0)<($39|0);
   $41 = HEAP32[$24>>2]|0;
   if ($40) {
    $$14649$in = $37;$$148 = $36;$35 = $41;
   } else {
    $$1$lcssa = $36;$$lcssa = $41;
    break;
   }
  }
 }
 $42 = ((($0)) + 92|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 72|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_lily_tm_make($$lcssa,$45,$$1$lcssa)|0);
 $47 = (_get_storage($0,$46)|0);
 $48 = HEAP32[$18>>2]|0;
 $49 = ((($1)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP16[$3>>1]|0;
 $52 = $51&65535;
 _write_build_op($0,34,$48,$50,$52,$47);
 HEAP32[$1>>2] = $47;
 STACKTOP = sp;return;
}
function _eval_subscript($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(5);
 if (!($8)) {
  _eval_tree($0,$3,0);
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(5);
 if (!($11)) {
  _eval_tree($0,$5,0);
 }
 _check_valid_subscript($0,$3,$5);
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_get_subscript_result($0,$14,$5)|0);
 $16 = (_get_storage($0,$15)|0);
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = HEAP32[$5>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ((($16)) + 8|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ((($1)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 _lily_u16_write_5($18,37,$21,$24,$26,$29);
 $30 = HEAP32[$3>>2]|0;
 $31 = ((($30)) + 6|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 & 2;
 $34 = ($33<<16>>16)==(0);
 if ($34) {
  HEAP32[$1>>2] = $16;
  return;
 }
 $35 = ((($16)) + 6|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36 | 2;
 HEAP16[$35>>1] = $37;
 HEAP32[$1>>2] = $16;
 return;
}
function _eval_typecast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 _eval_tree($0,$3,$7);
 $8 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = (_type_matchup($0,$7,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = ((($1)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 72|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  HEAP32[$19>>2] = $16;
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  _lily_raise_syn($18,17125,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _eval_oo_access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _eval_oo_access_for_item($0,$1);
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(4);
 if ($6) {
  _oo_property_read($0,$1);
  return;
 } else {
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_get_storage($0,$9)|0);
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ((($10)) + 8|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = ((($1)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19&65535;
  _lily_u16_write_4($12,41,$15,$17,$20);
  HEAP32[$1>>2] = $10;
  return;
 }
}
function _eval_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _ensure_valid_scope($0,$3);
 $4 = ((($0)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _close_over_class_self($0,$1);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 1;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_get_storage($0,$23)|0);
  $25 = ((($0)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$2>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = HEAP32[$4>>2]|0;
  $31 = ((($30)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 8|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = ((($24)) + 8|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = ((($1)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38&65535;
  _lily_u16_write_5($26,47,$29,$34,$36,$39);
  HEAP32[$1>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $14 = ((($1)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 72|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  HEAP32[$18>>2] = $15;
  $19 = ((($9)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer>>2] = $20;
  _lily_raise_syn($17,17080,$vararg_buffer);
  // unreachable;
 }
}
function _eval_variant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($1)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 6|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 2048;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $11 = ((($6)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  _get_func_min_max($12,$3,$4);
  $13 = ((($1)) + 24|0);
  HEAP16[$13>>1] = 0;
  $14 = HEAP32[$3>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  _error_argument_count($0,$1,-1,$14,$15);
 }
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($6)) + 8|0);
 $19 = HEAP16[$18>>1]|0;
 _lily_u16_write_2($17,45,$19);
 $20 = ((($6)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 42|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ($23<<16>>16)==(0);
 $25 = ((($21)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 if ($24) {
  $$0 = $26;
  $38 = (_get_storage($0,$$0)|0);
  $39 = HEAP32[$16>>2]|0;
  $40 = ((($38)) + 8|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = ((($1)) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43&65535;
  _lily_u16_write_2($39,$41,$44);
  HEAP32[$1>>2] = $38;
  STACKTOP = sp;return;
 }
 $27 = ((($0)) + 80|0);
 $28 = HEAP32[$27>>2]|0;
 _lily_ts_scope_save($28,$3);
 $29 = ($2|0)==(0|0);
 if (!($29)) {
  $30 = ((($2)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$20>>2]|0;
  $33 = ($31|0)==($32|0);
  if ($33) {
   $34 = HEAP32[$27>>2]|0;
   (_lily_ts_check($34,$26,$2)|0);
  }
 }
 $35 = HEAP32[$27>>2]|0;
 $36 = (_lily_ts_resolve($35,$26)|0);
 $37 = HEAP32[$27>>2]|0;
 _lily_ts_scope_restore($37,$3);
 $$0 = $36;
 $38 = (_get_storage($0,$$0)|0);
 $39 = HEAP32[$16>>2]|0;
 $40 = ((($38)) + 8|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = ((($1)) + 16|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43&65535;
 _lily_u16_write_2($39,$41,$44);
 HEAP32[$1>>2] = $38;
 STACKTOP = sp;return;
}
function _eval_lambda($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_sp_get($6,$8)|0);
 $10 = ($2|0)==(0|0);
 if ($10) {
  $$0 = 0;
 } else {
  $11 = ((($2)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14<<16>>16)==(7);
  if ($15) {
   $16 = ((($2)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[627]|0;
   $22 = ($20|0)==($21|0);
   if ($22) {
    $23 = ((($1)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($0)) + 72|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 12|0);
    HEAP32[$27>>2] = $24;
    HEAP32[$vararg_buffer>>2] = 21807;
    _lily_raise_syn($26,17022,$vararg_buffer);
    // unreachable;
   } else {
    $$0 = $2;
   }
  } else {
   $$0 = 0;
  }
 }
 $28 = ((($0)) + 88|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($1)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_lily_parser_lambda_eval($29,$31,$9,$$0)|0);
 HEAP32[$3>>2] = $4;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_get_storage($0,$34)|0);
 $36 = ((($0)) + 52|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 12|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $42 = ((($0)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($32)) + 8|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = ((($35)) + 8|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = HEAP32[$30>>2]|0;
  $49 = $48&65535;
  _lily_u16_write_4($43,41,$45,$47,$49);
  HEAP32[$1>>2] = $35;
  STACKTOP = sp;return;
 } else {
  _emit_create_function($0,$32,$35);
  HEAP32[$1>>2] = $35;
  STACKTOP = sp;return;
 }
}
function _eval_self($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$0 = $5;
  HEAP32[$1>>2] = $$0;
  return;
 }
 _close_over_class_self($0,$1);
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $$0 = $9;
 HEAP32[$1>>2] = $$0;
 return;
}
function _eval_named_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 HEAP32[$3>>2] = 0;
 _begin_call($0,$1,$3);
 $5 = ((($0)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_ts_scope_save($6,$4);
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 2;
 $11 = ($10<<16>>16)==(0);
 L1: do {
  if (!($11)) {
   $12 = ((($1)) + 32|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP8[$14>>0]|0;
   switch ($15<<24>>24) {
   case 5: case 17: case 21:  {
    $16 = HEAP32[$5>>2]|0;
    (_lily_ts_check($16,$7,$7)|0);
    break L1;
    break;
   }
   default: {
   }
   }
   $17 = ($2|0)==(0|0);
   if (!($17)) {
    $18 = ((($2)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 8|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = ((($7)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 8|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = ($21<<16>>16)==($28<<16>>16);
    if ($29) {
     $30 = HEAP32[$5>>2]|0;
     (_lily_ts_check($30,$24,$2)|0);
    }
   }
  }
 } while(0);
 $31 = HEAP32[$3>>2]|0;
 _run_named_call($0,$1,$31);
 $32 = HEAP32[$5>>2]|0;
 _lily_ts_scope_restore($32,$4);
 STACKTOP = sp;return;
}
function _begin_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$ = 0, $$0 = 0, $$04 = 0, $$082 = 0, $$0823 = 0, $$083 = 0, $$0832 = 0, $$1 = 0, $$184 = 0, $$2 = 0, $$285 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($1)) + 8|0);
 HEAP8[$7>>0] = $6;
 $8 = ((($1)) + 24|0);
 HEAP16[$8>>1] = 0;
 L1: do {
  switch ($6<<24>>24) {
  case 18:  {
   $9 = ((($4)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 6|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 & 512;
   $14 = ($13<<16>>16)==(0);
   if ($14) {
    HEAP16[$8>>1] = 1;
    HEAP8[$5>>0] = 20;
    $$0 = $10;$$082 = -1;$$083 = 255;
    label = 15;
   } else {
    $$0 = $10;$$082 = -1;$$083 = 255;
    label = 15;
   }
   break;
  }
  case 17: case 6:  {
   $15 = ((($4)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 6|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18 & 64;
   $20 = ($19<<16>>16)==(0);
   if ($20) {
    $$0 = $16;$$082 = -1;$$083 = 255;
    label = 15;
   } else {
    $21 = ((($16)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_get_storage($0,$22)|0);
    $24 = HEAP32[$15>>2]|0;
    _emit_create_function($0,$24,$23);
    $25 = ((($23)) + 8|0);
    $26 = HEAP16[$25>>1]|0;
    $$04 = $16;$$0823 = $26;$$0832 = 30;
    label = 16;
   }
   break;
  }
  case 19:  {
   $27 = ((($4)) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   _ensure_valid_scope($0,$28);
   $29 = HEAP32[$27>>2]|0;
   $$0 = $29;$$082 = -1;$$083 = 255;
   label = 15;
   break;
  }
  case 8:  {
   _eval_oo_access_for_item($0,$4);
   $30 = ((($4)) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 4|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = ($33<<16>>16)==(4);
   if ($34) {
    _oo_property_read($0,$4);
    $35 = HEAP32[$30>>2]|0;
    $36 = HEAP32[$4>>2]|0;
    $37 = ((($36)) + 8|0);
    $38 = HEAP16[$37>>1]|0;
    $$0 = $35;$$082 = $38;$$083 = 30;
    label = 15;
    break L1;
   } else {
    HEAP16[$8>>1] = 1;
    $39 = HEAP32[$30>>2]|0;
    HEAP8[$5>>0] = 25;
    $$0 = $39;$$082 = -1;$$083 = 255;
    label = 15;
    break L1;
   }
   break;
  }
  case 14:  {
   $40 = ((($4)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 6|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 & 2048;
   $45 = ($44<<16>>16)==(0);
   if ($45) {
    $50 = ((($1)) + 28|0);
    HEAP32[$50>>2] = $41;
    $51 = ((($41)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    HEAP32[$2>>2] = $52;
    $53 = ((($41)) + 8|0);
    $54 = HEAP16[$53>>1]|0;
    $$2 = $54;$$285 = 36;
    break L1;
   } else {
    $46 = ((($0)) + 72|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($41)) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$vararg_buffer>>2] = $49;
    _lily_raise_syn($47,16630,$vararg_buffer);
    // unreachable;
   }
   break;
  }
  case 21: case 7:  {
   _eval_tree($0,$4,0);
   $55 = ((($4)) + 28|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$4>>2]|0;
   $58 = ((($57)) + 8|0);
   $59 = HEAP16[$58>>1]|0;
   $$0 = $56;$$082 = $59;$$083 = 30;
   label = 15;
   break;
  }
  default: {
   _eval_tree($0,$4,0);
   $60 = HEAP32[$4>>2]|0;
   $$0 = $60;$$082 = -1;$$083 = 255;
   label = 15;
  }
  }
 } while(0);
 if ((label|0) == 15) {
  $61 = ($$0|0)==(0|0);
  if ($61) {
   $$2 = $$082;$$285 = $$083;
  } else {
   $$04 = $$0;$$0823 = $$082;$$0832 = $$083;
   label = 16;
  }
 }
 if ((label|0) == 16) {
  $62 = ($$0823<<16>>16)==(-1);
  if ($62) {
   $63 = ((($$04)) + 8|0);
   $64 = HEAP16[$63>>1]|0;
   $$1 = $64;
  } else {
   $$1 = $$0823;
  }
  $65 = ($$0832<<16>>16)==(255);
  if ($65) {
   $66 = ((($$04)) + 6|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67&65535;
   $69 = $68 & 32;
   $70 = ($69|0)==(0);
   $71 = $68 & 256;
   $72 = $71&65535;
   $73 = ($72&65535) >>> 8;
   $74 = (29 - ($73))<<16>>16;
   $$$ = $70 ? 30 : $74;
   $$184 = $$$;
  } else {
   $$184 = $$0832;
  }
  $75 = ((($1)) + 28|0);
  HEAP32[$75>>2] = $$04;
  $76 = ((($$04)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$2>>2] = $77;
  $78 = HEAP32[$76>>2]|0;
  $79 = ((($78)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 8|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = ($82<<16>>16)==(7);
  if ($83) {
   $$2 = $$1;$$285 = $$184;
  } else {
   $84 = ((($1)) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($0)) + 72|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 12|0);
   HEAP32[$88>>2] = $85;
   HEAP32[$vararg_buffer1>>2] = $78;
   _lily_raise_syn($87,16662,$vararg_buffer1);
   // unreachable;
  }
 }
 $89 = HEAP16[$8>>1]|0;
 $90 = ($89<<16>>16)==(0);
 if (!($90)) {
  $97 = ((($1)) + 20|0);
  HEAP16[$97>>1] = $$2;
  $98 = ((($1)) + 12|0);
  HEAP16[$98>>1] = $$285;
  STACKTOP = sp;return;
 }
 $91 = HEAP32[$3>>2]|0;
 $92 = ((($91)) + 40|0);
 $93 = HEAP32[$92>>2]|0;
 HEAP32[$3>>2] = $93;
 $94 = ((($1)) + 22|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = (($95) + -1)<<16>>16;
 HEAP16[$94>>1] = $96;
 $97 = ((($1)) + 20|0);
 HEAP16[$97>>1] = $$2;
 $98 = ((($1)) + 12|0);
 HEAP16[$98>>1] = $$285;
 STACKTOP = sp;return;
}
function _run_named_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0140 = 0, $$0141$lcssa = 0, $$0141$ph23 = 0, $$01418 = 0, $$0143$ph$lcssa = 0, $$0143$ph22 = 0, $$0145$lcssa = 0, $$0145$ph21 = 0, $$01457 = 0, $$0147$ph$lcssa = 0, $$0147$ph20 = 0, $$1 = 0, $$1146 = 0, $$1148 = 0, $$36 = 0, $$in = 0;
 var $$in29 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($1)) + 22|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 _get_func_min_max($2,$3,$4);
 $8 = HEAP32[$4>>2]|0;
 $9 = ($7>>>0)>($8>>>0);
 if ($9) {
  $10 = HEAP32[$3>>2]|0;
  _error_argument_count($0,$1,$7,$10,$8);
 }
 _keyargs_mark_and_verify($0,$1,$2);
 $11 = ((($2)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_get_va_type($2)|0);
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 6|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 & 1;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  $$0140 = 2147483647;
 } else {
  $23 = ((($2)) + 10|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = (($25) + -2)|0;
  $$0140 = $26;
 }
 $27 = ($18|0)==(0|0);
 L7: do {
  if ($27) {
   $$0141$lcssa = 0;$$0143$ph$lcssa = 0;$$0145$lcssa = 0;$$0147$ph$lcssa = 0;
  } else {
   $$0141$ph23 = 0;$$0143$ph22 = 0;$$0145$ph21 = 0;$$0147$ph20 = 0;$$in = $18;
   while(1) {
    $$01418 = $$0141$ph23;$$01457 = $$0145$ph21;$$in29 = $$in;
    while(1) {
     $28 = ((($$in29)) + 20|0);
     $29 = HEAP16[$28>>1]|0;
     $30 = ((($$in29)) + 4|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(28);
     if ($32) {
      $33 = ((($$in29)) + 8|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(34);
      if ($35) {
       $36 = ((($$in29)) + 32|0);
       $37 = HEAP32[$36>>2]|0;
       $$0138 = $37;$49 = $37;
      } else {
       $$0138 = $$in29;$49 = $$in29;
      }
     } else {
      $$0138 = $$in29;$49 = $$in29;
     }
     $38 = $29&65535;
     $39 = ($$0140|0)>($38|0);
     if ($39) {
      $40 = (($38) + 1)|0;
      $41 = (($12) + ($40<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $$0136 = $42;$$0137 = 0;
     } else {
      $$0136 = $16;$$0137 = 1;
     }
     $43 = (_eval_call_arg($0,$$0138,$$0136)|0);
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = HEAP32[$$0138>>2]|0;
      $46 = ((($45)) + 12|0);
      $47 = HEAP32[$46>>2]|0;
      _error_bad_arg($0,$1,$2,$38,$47);
     }
     $48 = HEAP32[$49>>2]|0;
     HEAP32[$$in29>>2] = $48;
     $50 = ((($$in29)) + 40|0);
     $51 = HEAP32[$50>>2]|0;
     HEAP32[$50>>2] = 0;
     HEAP16[$28>>1] = $29;
     $52 = ($$0137|0)==(0);
     if ($52) {
      break;
     }
     $64 = ($$01457|0)==(0|0);
     if ($64) {
      $$1146 = $$in29;
     } else {
      $65 = ((($$01457)) + 28|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($66)) + 40|0);
      HEAP32[$67>>2] = $$in29;
      $$1146 = $$01457;
     }
     $68 = ((($$1146)) + 28|0);
     HEAP32[$68>>2] = $$in29;
     $69 = (($$01418) + 1)|0;
     $70 = ($51|0)==(0|0);
     if ($70) {
      $$0141$lcssa = $69;$$0143$ph$lcssa = $$0143$ph22;$$0145$lcssa = $$1146;$$0147$ph$lcssa = $$0147$ph20;
      break L7;
     } else {
      $$01418 = $69;$$01457 = $$1146;$$in29 = $51;
     }
    }
    $53 = ($$0147$ph20|0)==(0|0);
    do {
     if ($53) {
      $54 = ((($$in29)) + 28|0);
      HEAP32[$54>>2] = $$in29;
      $$1148 = $$in29;
     } else {
      $55 = ((($$0147$ph20)) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($56)) + 20|0);
      $58 = HEAP16[$57>>1]|0;
      $59 = ($58&65535)<($29&65535);
      if ($59) {
       $60 = ((($56)) + 40|0);
       HEAP32[$60>>2] = $$in29;
       HEAP32[$55>>2] = $$in29;
       $$1148 = $$0147$ph20;
       break;
      } else {
       $61 = (_relink_arg($$0147$ph20,$$in29)|0);
       $$1148 = $61;
       break;
      }
     }
    } while(0);
    $62 = (($$0143$ph22) + 1)|0;
    $63 = ($51|0)==(0|0);
    if ($63) {
     $$0141$lcssa = $$01418;$$0143$ph$lcssa = $62;$$0145$lcssa = $$01457;$$0147$ph$lcssa = $$1148;
     break;
    } else {
     $$0141$ph23 = $$01418;$$0143$ph22 = $62;$$0145$ph21 = $$01457;$$0147$ph20 = $$1148;$$in = $51;
    }
   }
  }
 } while(0);
 $71 = ($$0140|0)==(2147483647);
 if ($71) {
  $$1 = 0;
 } else {
  $72 = HEAP32[$11>>2]|0;
  $73 = ((($2)) + 10|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = (($75) + -1)|0;
  $77 = (($72) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 8|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = ($82<<16>>16)!=(-4);
  $84 = ($$0145$lcssa|0)!=(0|0);
  $or$cond = $84 | $83;
  if ($or$cond) {
   $85 = (_get_va_type($2)|0);
   $86 = ((($85)) + 6|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 & 2;
   $89 = ($88<<16>>16)==(0);
   if ($89) {
    $$0 = $85;
   } else {
    $90 = ((($0)) + 80|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (_lily_ts_resolve($91,$85)|0);
    $$0 = $92;
   }
   $93 = (_get_storage($0,$$0)|0);
   $94 = ((($0)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $$0141$lcssa&65535;
   _lily_u16_write_2($95,33,$96);
   $97 = ($$0145$lcssa|0)==(0|0);
   $98 = HEAP32[$94>>2]|0;
   if ($97) {
    $$lcssa = $98;
   } else {
    $$36 = $$0145$lcssa;$102 = $98;
    while(1) {
     $99 = HEAP32[$$36>>2]|0;
     $100 = ((($99)) + 8|0);
     $101 = HEAP16[$100>>1]|0;
     _lily_u16_write_1($102,$101);
     $103 = ((($$36)) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==(0|0);
     $106 = HEAP32[$94>>2]|0;
     if ($105) {
      $$lcssa = $106;
      break;
     } else {
      $$36 = $104;$102 = $106;
     }
    }
   }
   $107 = ((($93)) + 8|0);
   $108 = HEAP16[$107>>1]|0;
   $109 = ((($1)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110&65535;
   _lily_u16_write_2($$lcssa,$108,$111);
   $$1 = $93;
  } else {
   $$1 = 0;
  }
 }
 HEAP32[$17>>2] = $$0147$ph$lcssa;
 $112 = HEAP32[$12>>2]|0;
 _setup_call_result($0,$1,$112);
 $113 = HEAP16[$19>>1]|0;
 $114 = $113 & 4;
 $115 = ($114<<16>>16)==(0);
 if ($115) {
  _write_call($0,$1,$$0143$ph$lcssa,$$1);
  STACKTOP = sp;return;
 } else {
  _write_call_keyopt($0,$1,$2,$$1);
  STACKTOP = sp;return;
 }
}
function _get_func_min_max($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 10|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5) + -1)|0;
 HEAP32[$1>>2] = $6;
 HEAP32[$2>>2] = $6;
 $7 = ((($0)) + 6|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 4;
 $10 = ($9<<16>>16)==(0);
 if (!($10)) {
  $11 = ($4&65535)>(1);
  L3: do {
   if ($11) {
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $$017 = 1;
    while(1) {
     $14 = (($13) + ($$017<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($15)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($17)) + 8|0);
     $19 = HEAP16[$18>>1]|0;
     $20 = ($19<<16>>16)==(-4);
     if ($20) {
      $$0$lcssa = $$017;
      break L3;
     }
     $21 = (($$017) + 1)|0;
     $22 = ($21|0)<($5|0);
     if ($22) {
      $$017 = $21;
     } else {
      $$0$lcssa = $21;
      break;
     }
    }
   } else {
    $$0$lcssa = 1;
   }
  } while(0);
  $23 = (($$0$lcssa) + -1)|0;
  HEAP32[$1>>2] = $23;
 }
 $24 = HEAP16[$7>>1]|0;
 $25 = $24&65535;
 $26 = $25 & 1;
 $27 = ($26|0)==(0);
 if ($27) {
  return;
 }
 HEAP32[$2>>2] = -1;
 $28 = $25 & 4;
 $29 = ($28|0)==(0);
 if (!($29)) {
  return;
 }
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + -1)|0;
 HEAP32[$1>>2] = $31;
 return;
}
function _error_argument_count($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$026 = 0, $$30 = 0, $$31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$32 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $5 = sp + 64|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = ((($1)) + 24|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 $11 = ($4|0)==(-1);
 $12 = (($4) + -1)|0;
 $$ = $11 ? -1 : $12;
 $not$ = $10 ^ 1;
 $13 = $not$ << 31 >> 31;
 $$30 = (($13) + ($3))|0;
 $$$ = $10 ? $4 : $$;
 $not$32 = $10 ^ 1;
 $14 = $not$32 << 31 >> 31;
 $$31 = (($14) + ($2))|0;
 $15 = $6;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = $7;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = ($$31|0)==(-1);
 if ($23) {
  (_strncpy($5,16572,8)|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $$31;
  (_snprintf($5,8,18525,$vararg_buffer)|0);
 }
 HEAP32[$vararg_buffer1>>2] = $$30;
 (_snprintf($6,8,18525,$vararg_buffer1)|0);
 $24 = ($$30|0)==($$$|0);
 if ($24) {
  $$026 = 21807;
 } else {
  $25 = ($$$|0)==(-1);
  if ($25) {
   $$026 = 16580;
  } else {
   HEAP32[$vararg_buffer4>>2] = $$$;
   (_snprintf($7,8,18525,$vararg_buffer4)|0);
   $$026 = 16577;
  }
 }
 $26 = ((($0)) + 72|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 (_lily_mb_flush($29)|0);
 _lily_mb_add($29,16582);
 _add_call_name_to_msgbuf($0,$29,$1);
 HEAP32[$vararg_buffer7>>2] = $5;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $6;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $$026;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $7;
 _lily_mb_add_fmt($29,16612,$vararg_buffer7);
 $30 = ((($1)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$26>>2]|0;
 $33 = ((($32)) + 12|0);
 HEAP32[$33>>2] = $31;
 $34 = HEAP32[$26>>2]|0;
 $35 = (_lily_mb_raw($29)|0);
 HEAP32[$vararg_buffer13>>2] = 21807;
 _lily_raise_syn($34,$35,$vararg_buffer13);
 // unreachable;
}
function _keyargs_mark_and_verify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$$071 = 0, $$06783 = 0, $$068$lcssa = 0, $$06882 = 0, $$07081 = 0, $$07081$phi = 0, $$07180 = 0, $$07378 = 0, $$074 = 0, $$074$$073 = 0, $$07577 = 0, $$084 = 0, $$1 = 0, $$176 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 22|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ((($2)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 1;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $$074 = 2147483647;
 } else {
  $14 = ((($2)) + 10|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + -2)|0;
  $$074 = $17;
 }
 $18 = (_get_keyarg_names($0,$1)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  _error_keyarg_not_supported($0,$1);
 }
 $20 = ($6|0)==(0|0);
 if ($20) {
  $$068$lcssa = $9;
 } else {
  $21 = ((($0)) + 76|0);
  $$06783 = 0;$$06882 = $9;$$07081 = 0;$$07180 = 0;$$07378 = 0;$$07577 = 0;$$084 = $6;
  while(1) {
   $22 = ((($$084)) + 4|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(28);
   do {
    if ($24) {
     $25 = ((($$084)) + 8|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(34);
     if ($27) {
      $28 = HEAP32[$21>>2]|0;
      $29 = ((($$084)) + 28|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($30)) + 24|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (_lily_sp_get($28,$32)|0);
      $34 = (_keyarg_to_pos($18,$33)|0);
      $35 = ($34|0)==(-1);
      if ($35) {
       _error_keyarg_not_valid($0,$1,$$084);
      }
      $36 = ($$074|0)>($34|0);
      if (!($36)) {
       $37 = (($$06882) + -1)|0;
       $$1 = $34;$$176 = 1;$$2 = $37;
       break;
      }
      $38 = (_keyarg_at_pos($$07180,$$07081,$34)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $$1 = $34;$$176 = 1;$$2 = $$06882;
      } else {
       _error_keyarg_duplicate($0,$1,$$084);
       $$1 = $34;$$176 = 1;$$2 = $$06882;
      }
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
   } while(0);
   do {
    if ((label|0) == 15) {
     label = 0;
     $40 = ($$07577|0)==(0);
     if ($40) {
      $41 = ($$07378|0)>($$074|0);
      $$074$$073 = $41 ? $$074 : $$07378;
      $$1 = $$074$$073;$$176 = 0;$$2 = $$06882;
      break;
     } else {
      _error_keyarg_before_posarg($0,$$084);
      $$1 = $$06783;$$176 = $$07577;$$2 = $$06882;
      break;
     }
    }
   } while(0);
   $42 = $$1&65535;
   $43 = ((($$084)) + 20|0);
   HEAP16[$43>>1] = $42;
   $44 = ($$07180|0)==(0|0);
   $$0$$071 = $44 ? $$084 : $$07180;
   $45 = (($$07378) + 1)|0;
   $46 = ((($$084)) + 40|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $$068$lcssa = $$2;
    break;
   } else {
    $$07081$phi = $$084;$$06783 = $$1;$$06882 = $$2;$$07180 = $$0$$071;$$07378 = $45;$$07577 = $$176;$$084 = $47;$$07081 = $$07081$phi;
   }
  }
 }
 _get_func_min_max($2,$3,$4);
 $49 = HEAP32[$3>>2]|0;
 $50 = ($49>>>0)>($$068$lcssa>>>0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 _error_keyarg_missing_params($0,$1,$2,$18);
 STACKTOP = sp;return;
}
function _get_va_type($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & 1;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $$0 = $0;
  return ($$0|0);
 }
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 10|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + -1)|0;
 $11 = (($6) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(-4);
 if (!($17)) {
  $$0 = $12;
  return ($$0|0);
 }
 $18 = ((($12)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $$0 = $20;
 return ($$0|0);
}
function _eval_call_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$043 = 0, $$044 = 0, $$045 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(-4);
 if ($8) {
  $9 = ((($2)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $$043 = $11;
 } else {
  $$043 = $2;
 }
 $12 = ((($$043)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 & 2;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  $$045 = $$043;
 } else {
  $16 = ((($0)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_lily_ts_resolve($17,$$043)|0);
  $$045 = $18;
 }
 _eval_tree($0,$1,$$045);
 $19 = HEAP32[$1>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 6|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 & 2;
 $25 = ($24<<16>>16)==(0);
 L7: do {
  if ($25) {
   $$1 = $21;
  } else {
   $26 = ((($1)) + 4|0);
   $27 = HEAP8[$26>>0]|0;
   switch ($27<<24>>24) {
   case 6: case 19:  {
    break;
   }
   default: {
    $$1 = $21;
    break L7;
   }
   }
   $28 = ((($0)) + 80|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (_lily_ts_resolve($29,$$043)|0);
   $31 = HEAP32[$28>>2]|0;
   _lily_ts_scope_save($31,$3);
   $32 = HEAP32[$28>>2]|0;
   (_lily_ts_check($32,$21,$30)|0);
   $33 = HEAP32[$28>>2]|0;
   $34 = (_lily_ts_resolve($33,$21)|0);
   $35 = HEAP32[$28>>2]|0;
   _lily_ts_scope_restore($35,$3);
   $36 = ($34|0)==($30|0);
   if ($36) {
    label = 9;
   } else {
    $37 = HEAP32[$28>>2]|0;
    $38 = (_lily_ts_type_greater_eq($37,$30,$34)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $$044 = $21;
    } else {
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $$044 = $34;
   }
   $$1 = $$044;
  }
 } while(0);
 $40 = HEAP16[$12>>1]|0;
 $41 = $40 & 2;
 $42 = ($41<<16>>16)==(0);
 if (!($42)) {
  $43 = ((($0)) + 80|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_lily_ts_check($44,$$043,$$1)|0);
  $46 = ($45|0)==(0);
  if (!($46)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $47 = HEAP16[$12>>1]|0;
 $48 = $47 & 2;
 $49 = ($48<<16>>16)==(0);
 if ($49) {
  $50 = ((($0)) + 80|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_lily_ts_type_greater_eq($51,$$043,$$1)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _error_bad_arg($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$in = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = ((($0)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 _lily_ts_reset_scoops($6);
 $7 = ((($2)) + 6|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 1;
 $10 = ($9<<16>>16)==(0);
 $11 = ((($2)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 if ($10) {
  label = 3;
 } else {
  $13 = ((($2)) + 10|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = (($15) + -2)|0;
  $17 = ($16|0)>($3|0);
  if ($17) {
   label = 3;
  } else {
   $20 = (($15) + -1)|0;
   $21 = (($12) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $$0$in = $24;
  }
 }
 if ((label|0) == 3) {
  $18 = (($3) + 1)|0;
  $19 = (($12) + ($18<<2)|0);
  $$0$in = $19;
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $25 = ((($$0)) + 6|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 & 2;
 $28 = ($27<<16>>16)==(0);
 if ($28) {
  $$1 = $$0;
 } else {
  $29 = HEAP32[$5>>2]|0;
  $30 = (_lily_ts_resolve($29,$$0)|0);
  $$1 = $30;
 }
 $31 = ((($0)) + 72|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 (_lily_mb_flush($34)|0);
 $35 = (($3) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $35;
 _lily_mb_add_fmt($34,16175,$vararg_buffer);
 _add_call_name_to_msgbuf($0,$34,$1);
 HEAP32[$vararg_buffer1>>2] = $$1;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 _lily_mb_add_fmt($34,16192,$vararg_buffer1);
 $36 = ((($1)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$31>>2]|0;
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = $37;
 $40 = HEAP32[$31>>2]|0;
 $41 = (_lily_mb_raw($34)|0);
 HEAP32[$vararg_buffer5>>2] = 21807;
 _lily_raise_syn($40,$41,$vararg_buffer5);
 // unreachable;
}
function _relink_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$019 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($1)) + 20|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($3&65535)>($5&65535);
 if ($6) {
  $8 = ((($1)) + 40|0);
  HEAP32[$8>>2] = $0;
  $9 = ((($0)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($1)) + 28|0);
  HEAP32[$11>>2] = $10;
  $$019 = $1;
  return ($$019|0);
 }
 $7 = HEAP16[$4>>1]|0;
 $$020 = $0;
 while(1) {
  $12 = ((($$020)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15&65535)>($7&65535);
  if ($16) {
   break;
  } else {
   $$020 = $13;
  }
 }
 $17 = ((($1)) + 40|0);
 HEAP32[$17>>2] = $13;
 HEAP32[$12>>2] = $1;
 $$019 = $0;
 return ($$019|0);
}
function _setup_call_result($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$028 = 0, $$1 = 0, $$127 = 0, $$sink29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[627]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$1>>2] = $9;
  return;
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(17);
 if ($12) {
  $13 = ((($0)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$1>>2] = $16;
  return;
 }
 $17 = ((($1)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 6|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 & 2;
 $22 = ($21<<16>>16)==(0);
 if ($22) {
  $$028 = $2;
 } else {
  $23 = ((($0)) + 80|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_lily_ts_resolve($24,$2)|0);
  $$028 = $25;
 }
 $26 = HEAP8[$10>>0]|0;
 $27 = ($26<<24>>24)==(14);
 if ($27) {
  $$sink29 = $18;
  label = 8;
 } else {
  $$127 = $18;
 }
 while(1) {
  if ((label|0) == 8) {
   label = 0;
   $28 = ((($$sink29)) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   $$127 = $29;
  }
  $30 = ($$127|0)==(0|0);
  if ($30) {
   label = 13;
   break;
  }
  $31 = HEAP32[$$127>>2]|0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = ($33<<16>>16)==(2);
  if (!($34)) {
   $$sink29 = $$127;
   label = 8;
   continue;
  }
  $35 = ((($31)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==($$028|0);
  if ($37) {
   label = 12;
   break;
  } else {
   $$sink29 = $$127;
   label = 8;
  }
 }
 if ((label|0) == 12) {
  $$1 = $31;
 }
 else if ((label|0) == 13) {
  $38 = (_get_storage($0,$$028)|0);
  $39 = ((($38)) + 6|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 | 2;
  HEAP16[$39>>1] = $41;
  $$1 = $38;
 }
 HEAP32[$1>>2] = $$1;
 return;
}
function _write_call($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02122 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 12|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($1)) + 20|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($3|0)!=(0|0);
 $13 = $12&1;
 $14 = (($13) + ($2))|0;
 $15 = $14&65535;
 _lily_u16_write_3($7,$9,$11,$15);
 $16 = ($2|0)>(0);
 if ($16) {
  $$02122 = $5;$$023 = 0;
  while(1) {
   $17 = HEAP32[$6>>2]|0;
   $18 = HEAP32[$$02122>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = HEAP16[$19>>1]|0;
   _lily_u16_write_1($17,$20);
   $21 = (($$023) + 1)|0;
   $22 = ((($$02122)) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   $exitcond = ($21|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$02122 = $23;$$023 = $21;
   }
  }
 }
 if ($12) {
  $24 = HEAP32[$6>>2]|0;
  $25 = ((($3)) + 8|0);
  $26 = HEAP16[$25>>1]|0;
  _lily_u16_write_1($24,$26);
 }
 $27 = HEAP32[$6>>2]|0;
 $28 = HEAP32[$1>>2]|0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = ((($1)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 _lily_u16_write_2($27,$30,$33);
 return;
}
function _write_call_keyopt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$052 = 0, $$053 = 0, $$053$ph = 0, $$054 = 0, $$16 = 0, $$2 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[630]|0;
 $5 = (_get_storage($0,$4)|0);
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 12|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($1)) + 20|0);
 $12 = HEAP16[$11>>1]|0;
 _lily_u16_write_3($8,$10,$12,0);
 $13 = HEAP32[$7>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 65535)|0;
 $17 = ((($5)) + 8|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ((($1)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 6|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 & 1;
 $24 = ($23<<16>>16)==(0);
 if ($24) {
  $$052 = -1;$30 = $20;
 } else {
  $25 = ((($2)) + 10|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = (($27) + 65534)|0;
  $29 = $28&65535;
  $$pr = HEAP32[$19>>2]|0;
  $$052 = $29;$30 = $$pr;
 }
 $31 = ($30|0)==(0|0);
 if ($31) {
  $$053$ph = $$052;
 } else {
  $32 = ((($30)) + 20|0);
  $33 = HEAP16[$32>>1]|0;
  $$053$ph = $33;
 }
 $34 = ($$052<<16>>16)!=(-1);
 $35 = ($3|0)!=(0|0);
 $or$cond = $35 & $34;
 $$0 = $20;$$053 = $$053$ph;$$054 = 0;
 while(1) {
  $36 = ($$053<<16>>16)==($$054<<16>>16);
  if ($36) {
   $$2 = $$054;
  } else {
   $$16 = $$054;
   while(1) {
    $37 = HEAP32[$7>>2]|0;
    _lily_u16_write_1($37,$18);
    $38 = (($$16) + 1)<<16>>16;
    $39 = ($$053<<16>>16)==($38<<16>>16);
    if ($39) {
     $$2 = $$053;
     break;
    } else {
     $$16 = $38;
    }
   }
  }
  $40 = (($$2) + 1)<<16>>16;
  $41 = ($$053<<16>>16)==($$052<<16>>16);
  $42 = HEAP32[$7>>2]|0;
  if ($41) {
   break;
  }
  $45 = HEAP32[$$0>>2]|0;
  $46 = ((($45)) + 8|0);
  $47 = HEAP16[$46>>1]|0;
  _lily_u16_write_1($42,$47);
  $48 = ((($$0)) + 40|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   if ($or$cond) {
    $$0 = 0;$$053 = $$052;$$054 = $40;
    continue;
   } else {
    label = 13;
    break;
   }
  } else {
   $51 = ((($49)) + 20|0);
   $52 = HEAP16[$51>>1]|0;
   $$0 = $49;$$053 = $52;$$054 = $40;
   continue;
  }
 }
 if ((label|0) == 13) {
  $53 = HEAP32[$7>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $16 & 65535;
  $56 = (($54) + ($55<<1)|0);
  HEAP16[$56>>1] = $40;
  $57 = HEAP32[$1>>2]|0;
  $58 = ((($57)) + 8|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = ((($1)) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61&65535;
  _lily_u16_write_2($53,$59,$62);
  return;
 }
 $43 = ((($3)) + 8|0);
 $44 = HEAP16[$43>>1]|0;
 _lily_u16_write_1($42,$44);
 $53 = HEAP32[$7>>2]|0;
 $54 = HEAP32[$53>>2]|0;
 $55 = $16 & 65535;
 $56 = (($54) + ($55<<1)|0);
 HEAP16[$56>>1] = $40;
 $57 = HEAP32[$1>>2]|0;
 $58 = ((($57)) + 8|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ((($1)) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61&65535;
 _lily_u16_write_2($53,$59,$62);
 return;
}
function _add_call_name_to_msgbuf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 switch ($6<<16>>16) {
 case 1:  {
  $7 = ((($4)) + 6|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 & 32;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $26 = ((($4)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   _lily_mb_add($1,$27);
   STACKTOP = sp;return;
  } else {
   $11 = ((($0)) + 92|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($4)) + 8|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = (($14) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   _lily_mb_add($1,$25);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $28 = ((($4)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($4)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$vararg_buffer>>2] = $31;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $33;
  _lily_mb_add_fmt($1,16241,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $34 = ((($4)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $35;
  _lily_mb_add_fmt($1,16247,$vararg_buffer2);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _lily_mb_add($1,16250);
  STACKTOP = sp;return;
 }
 }
}
function _get_keyarg_names($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 switch ($5<<16>>16) {
 case 1:  {
  $6 = ((($3)) + 6|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 32;
  $9 = ($8<<16>>16)==(0);
  if ($9) {
   $$1 = 0;
   return ($$1|0);
  }
  $10 = (_lily_emit_proto_for_var($0,$3)|0);
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $$1 = $12;
  return ($$1|0);
  break;
 }
 case 3:  {
  $13 = HEAP32[$2>>2]|0;
  $14 = ((($13)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $$1 = $15;
  return ($$1|0);
  break;
 }
 default: {
  $$1 = 0;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function _error_keyarg_not_supported($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 (_lily_mb_flush($5)|0);
 _add_call_name_to_msgbuf($0,$5,$1);
 $6 = ((($1)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(1);
 if ($10) {
  $11 = ((($7)) + 6|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 & 32;
  $14 = ($13<<16>>16)==(0);
  if ($14) {
   label = 4;
  } else {
   _lily_mb_add($5,16483);
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  _lily_mb_add($5,16524);
 }
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = (_lily_mb_raw($5)|0);
 HEAP32[$vararg_buffer>>2] = 21807;
 _lily_raise_syn($17,$19,$vararg_buffer);
 // unreachable;
}
function _keyarg_to_pos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$012 = 0;
 L1: while(1) {
  $2 = HEAP8[$$0>>0]|0;
  switch ($2<<24>>24) {
  case 9:  {
   $$1 = -1;
   label = 6;
   break L1;
   break;
  }
  case 32:  {
   $$sink = 2;
   break;
  }
  default: {
   $3 = (_strcmp($$0,$1)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$1 = $$012;
    label = 6;
    break L1;
   }
   $5 = (_strlen($$0)|0);
   $6 = (($5) + 1)|0;
   $$sink = $6;
  }
  }
  $7 = (($$0) + ($$sink)|0);
  $8 = (($$012) + 1)|0;
  $$0 = $7;$$012 = $8;
 }
 if ((label|0) == 6) {
  return ($$1|0);
 }
 return (0)|0;
}
function _error_keyarg_not_valid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_sp_get($4,$8)|0);
 $10 = ((($0)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 (_lily_mb_flush($13)|0);
 _add_call_name_to_msgbuf($0,$13,$1);
 HEAP32[$vararg_buffer>>2] = $9;
 _lily_mb_add_fmt($13,16445,$vararg_buffer);
 $14 = ((($2)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$10>>2]|0;
 $19 = (_lily_mb_raw($13)|0);
 HEAP32[$vararg_buffer1>>2] = 21807;
 _lily_raise_syn($18,$19,$vararg_buffer1);
 // unreachable;
}
function _keyarg_at_pos($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$067 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$067 = $0;
 }
 while(1) {
  $4 = ((($$067)) + 20|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = ($6|0)==($2|0);
  if ($7) {
   $$0 = 1;
   label = 4;
   break;
  }
  $8 = ((($$067)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $$067 = $9;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _error_keyarg_duplicate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_lily_sp_get($4,$8)|0);
 $10 = ((($0)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 (_lily_mb_flush($13)|0);
 _lily_mb_add($13,16262);
 _add_call_name_to_msgbuf($0,$13,$1);
 HEAP32[$vararg_buffer>>2] = $9;
 _lily_mb_add_fmt($13,16403,$vararg_buffer);
 $14 = ((($2)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$10>>2]|0;
 $19 = (_lily_mb_raw($13)|0);
 HEAP32[$vararg_buffer1>>2] = 21807;
 _lily_raise_syn($18,$19,$vararg_buffer1);
 // unreachable;
}
function _error_keyarg_before_posarg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = $3;
 HEAP32[$vararg_buffer>>2] = 21807;
 _lily_raise_syn($5,16359,$vararg_buffer);
 // unreachable;
}
function _error_keyarg_missing_params($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$ = 0, $$06067 = 0, $$068 = 0, $$068$in = 0, $$1$be = 0, $$165 = 0, $$2 = 0, $$64 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 (_lily_mb_flush($7)|0);
 _lily_mb_add($7,16262);
 _add_call_name_to_msgbuf($0,$7,$1);
 _lily_mb_add($7,16271);
 $8 = ((($2)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 10|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ((($2)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 & 1;
 $16 = $15&65535;
 $17 = $16 ^ -1;
 $$ = (($12) + ($17))|0;
 $18 = ($$|0)==(0);
 if ($18) {
  $45 = ((($1)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$4>>2]|0;
  $48 = ((($47)) + 12|0);
  HEAP32[$48>>2] = $46;
  $49 = (_lily_mb_raw($7)|0);
  HEAP32[$vararg_buffer7>>2] = 21807;
  _lily_raise_syn($47,$49,$vararg_buffer7);
  // unreachable;
 }
 $19 = ((($1)) + 32|0);
 $20 = (($$) + 1)|0;
 $$06067 = 0;$$068$in = $19;
 while(1) {
  $$068 = HEAP32[$$068$in>>2]|0;
  $21 = ((($$068)) + 20|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = ($23|0)==($$06067|0);
  if ($24) {
   $$2 = $$06067;
  } else {
   $25 = ((($$068)) + 40|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   $$$ = $27 ? $$ : $23;
   $$64 = $27 ? $23 : $20;
   $28 = ($$06067|0)==($$$|0);
   if ($28) {
    $$2 = $$06067;
   } else {
    $$165 = $$06067;
    while(1) {
     $29 = ($$165|0)==($$64|0);
     do {
      if ($29) {
       $30 = (($$165) + 1)|0;
       $$1$be = $30;
      } else {
       $32 = (_keypos_to_keyarg($3,$$165)|0);
       $33 = (($$165) + 1)|0;
       $34 = (($9) + ($33<<2)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ((($35)) + 12|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ((($37)) + 8|0);
       $39 = HEAP16[$38>>1]|0;
       $40 = ($39<<16>>16)==(-4);
       if ($40) {
        $$1$be = $33;
       } else {
        $41 = HEAP8[$32>>0]|0;
        $42 = ($41<<24>>24)==(32);
        if ($42) {
         HEAP32[$vararg_buffer3>>2] = $33;
         $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
         HEAP32[$vararg_ptr6>>2] = $35;
         _lily_mb_add_fmt($7,16330,$vararg_buffer3);
         $$1$be = $33;
         break;
        } else {
         HEAP32[$vararg_buffer>>2] = $33;
         $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
         HEAP32[$vararg_ptr1>>2] = $32;
         $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
         HEAP32[$vararg_ptr2>>2] = $35;
         _lily_mb_add_fmt($7,16295,$vararg_buffer);
         $$1$be = $33;
         break;
        }
       }
      }
     } while(0);
     $31 = ($$1$be|0)==($$$|0);
     if ($31) {
      $$2 = $$1$be;
      break;
     } else {
      $$165 = $$1$be;
     }
    }
   }
  }
  $43 = ((($$068)) + 40|0);
  $44 = ($$2|0)==($$|0);
  if ($44) {
   break;
  } else {
   $$06067 = $$2;$$068$in = $43;
  }
 }
 $45 = ((($1)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$4>>2]|0;
 $48 = ((($47)) + 12|0);
 HEAP32[$48>>2] = $46;
 $49 = (_lily_mb_raw($7)|0);
 HEAP32[$vararg_buffer7>>2] = 21807;
 _lily_raise_syn($47,$49,$vararg_buffer7);
 // unreachable;
}
function _keypos_to_keyarg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$04$lcssa = 0, $$045 = 0, $$06 = 0, $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$04$lcssa = $0;
  return ($$04$lcssa|0);
 } else {
  $$045 = $0;$$06 = $1;
 }
 while(1) {
  $3 = HEAP8[$$045>>0]|0;
  $4 = ($3<<24>>24)==(32);
  if ($4) {
   $$sink = 2;
  } else {
   $5 = (_strlen($$045)|0);
   $6 = (($5) + 1)|0;
   $$sink = $6;
  }
  $7 = (($$045) + ($$sink)|0);
  $8 = (($$06) + -1)|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $$04$lcssa = $7;
   break;
  } else {
   $$045 = $7;$$06 = $8;
  }
 }
 return ($$04$lcssa|0);
}
function _lily_emit_proto_for_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = (($5) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 return ($14|0);
}
function _emit_create_function($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($0)) + 68|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11&65535;
 _lily_u16_write_4($4,57,$6,$8,$12);
 $13 = ((($0)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 | 1;
 HEAP8[$15>>0] = $17;
 return;
}
function _ensure_valid_scope($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$034 = 0, $$034$in = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 12;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4 & 4;
 $12 = ((($1)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(4);
 $15 = ((($1)) + 32|0);
 $16 = ((($1)) + 40|0);
 $$0$in = $14 ? $15 : $16;
 $$034$in = ((($1)) + 16|0);
 $$0 = HEAP32[$$0$in>>2]|0;
 $$034 = HEAP32[$$034$in>>2]|0;
 $17 = ($11|0)!=(0);
 $$not = $17 ^ 1;
 $18 = ($10|0)==($$0|0);
 $or$cond = $18 | $$not;
 if ($or$cond) {
  $19 = ($11|0)==(0);
  if (!($19)) {
   STACKTOP = sp;return;
  }
  $20 = ($10|0)==(0|0);
  if (!($20)) {
   $21 = (_lily_class_greater_eq($$0,$10)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    STACKTOP = sp;return;
   }
  }
 }
 $23 = $17 ? 16862 : 16870;
 $24 = ((($0)) + 72|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($$0)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$034;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $23;
 _lily_raise_syn($25,16880,$vararg_buffer);
 // unreachable;
}
function _eval_oo_access_for_item($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(5);
 if (!($6)) {
  _eval_tree($0,$3,0);
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)==(3);
 if ($15) {
  $16 = ((($12)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $$0 = $17;
 } else {
  $$0 = $12;
 }
 $18 = ((($0)) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_lily_sp_get($19,$21)|0);
 $23 = ((($0)) + 88|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_lily_find_or_dl_member($24,$$0,$22,0)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = (_lily_find_class_of_member($$0,$22)|0);
  $28 = ($27|0)==(0|0);
  $29 = HEAP32[$2>>2]|0;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($0)) + 72|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 12|0);
  HEAP32[$34>>2] = $31;
  $35 = HEAP32[$32>>2]|0;
  if ($28) {
   $38 = ((($$0)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $39;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $22;
   _lily_raise_syn($35,16765,$vararg_buffer2);
   // unreachable;
  } else {
   $36 = ((($27)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer>>2] = $22;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   _lily_raise_syn($35,16707,$vararg_buffer);
   // unreachable;
  }
 }
 $40 = ((($25)) + 4|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = ($41<<16>>16)==(4);
 if (!($42)) {
  $52 = ((($1)) + 28|0);
  HEAP32[$52>>2] = $25;
  _ensure_valid_scope($0,$25);
  STACKTOP = sp;return;
 }
 $43 = HEAP32[$2>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = ($45<<24>>24)==(20);
 if ($46) {
  $47 = ((($43)) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($0)) + 72|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 12|0);
  HEAP32[$51>>2] = $48;
  HEAP32[$vararg_buffer6>>2] = 21807;
  _lily_raise_syn($50,16810,$vararg_buffer6);
  // unreachable;
 } else {
  $52 = ((($1)) + 28|0);
  HEAP32[$52>>2] = $25;
  _ensure_valid_scope($0,$25);
  STACKTOP = sp;return;
 }
}
function _oo_property_read($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_get_solved_property_type($0,$1)|0);
 $5 = (_get_storage($0,$4)|0);
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($3)) + 8|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($1)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($5)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ((($1)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18&65535;
 _lily_u16_write_5($7,47,$9,$14,$16,$19);
 HEAP32[$1>>2] = $5;
 return;
}
function _get_solved_property_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 2;
 $9 = ($8<<16>>16)==(0);
 if ($9) {
  $$0 = $5;
  return ($$0|0);
 }
 $10 = ((($0)) + 80|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_lily_ts_resolve_by_second($11,$16,$5)|0);
 $$0 = $17;
 return ($$0|0);
}
function _close_over_class_self($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$028 = 0, $$028$in = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 62|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($0)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $$0 = $3;$$pn = $5;
 while(1) {
  $$028$in = ((($$pn)) + 32|0);
  $$028 = HEAP32[$$028$in>>2]|0;
  $6 = ((($$028)) + 13|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(12);
  $9 = (($$0) + -1)<<16>>16;
  if ($8) {
   break;
  } else {
   $$0 = $9;$$pn = $$028;
  }
 }
 $10 = ((($$028)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 13|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(11);
 if (!($14)) {
  $15 = ((($1)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 72|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 12|0);
  HEAP32[$19>>2] = $16;
  HEAP32[$vararg_buffer>>2] = 21807;
  _lily_raise_syn($18,16924,$vararg_buffer);
  // unreachable;
 }
 $20 = ((($11)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = ((($1)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($0)) + 72|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 12|0);
  HEAP32[$27>>2] = $24;
  HEAP32[$vararg_buffer1>>2] = 21807;
  _lily_raise_syn($26,16979,$vararg_buffer1);
  // unreachable;
 }
 $28 = HEAP32[$20>>2]|0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = (_find_closed_sym_spot_raw($0,$$0,$30)|0);
 $32 = ($31|0)==(-1);
 if (!($32)) {
  $33 = ((($28)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_get_storage($0,$34)|0);
  $36 = HEAP32[$4>>2]|0;
  $37 = ((($36)) + 36|0);
  HEAP32[$37>>2] = $35;
  $38 = HEAP32[$4>>2]|0;
  $39 = ((($38)) + 12|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 | 1;
  HEAP8[$39>>0] = $41;
  STACKTOP = sp;return;
 }
 _close_over_sym($0,$$0,$28);
 $33 = ((($28)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_get_storage($0,$34)|0);
 $36 = HEAP32[$4>>2]|0;
 $37 = ((($36)) + 36|0);
 HEAP32[$37>>2] = $35;
 $38 = HEAP32[$4>>2]|0;
 $39 = ((($38)) + 12|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 | 1;
 HEAP8[$39>>0] = $41;
 STACKTOP = sp;return;
}
function _find_closed_sym_spot_raw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$013 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$013 = -1;
  return ($$013|0);
 } else {
  $$015 = 0;$9 = $4;
 }
 while(1) {
  $8 = HEAP32[$9>>2]|0;
  $10 = (($8) + ($$015<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)==($2<<16>>16);
  if ($12) {
   $13 = $$015 | 1;
   $14 = (($8) + ($13<<1)|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = ($15<<16>>16)==($1<<16>>16);
   if ($16) {
    break;
   }
  }
  $18 = (($$015) + 2)|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18>>>0)<($21>>>0);
  if ($22) {
   $$015 = $18;$9 = $19;
  } else {
   $$013 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$013|0);
 }
 $17 = (($$015|0) / 2)&-1;
 $$013 = $17;
 return ($$013|0);
}
function _close_over_sym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 _lily_u16_write_2($4,$6,$1);
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 | 1;
 HEAP8[$9>>0] = $11;
 return;
}
function _type_matchup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($1|0);
 if ($6) {
  return 1;
 } else {
  $7 = ((($0)) + 80|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_lily_ts_type_greater_eq($8,$1,$5)|0);
  $not$ = ($9|0)!=(0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _check_valid_subscript($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP16[$8>>1]|0;
 switch ($9<<16>>16) {
 case 5: case 9:  {
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = ($16<<16>>16)==(1);
  if ($17) {
   STACKTOP = sp;return;
  } else {
   $18 = ((($1)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($0)) + 72|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 12|0);
   HEAP32[$22>>2] = $19;
   $23 = ((($7)) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer>>2] = $24;
   _lily_raise_syn($21,17161,$vararg_buffer);
   // unreachable;
  }
  break;
 }
 case 10:  {
  $25 = ((($5)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$2>>2]|0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)==($30|0);
  if ($31) {
   STACKTOP = sp;return;
  } else {
   $32 = ((($1)) + 16|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($0)) + 72|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 12|0);
   HEAP32[$36>>2] = $33;
   HEAP32[$vararg_buffer1>>2] = $27;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $30;
   _lily_raise_syn($35,17189,$vararg_buffer1);
   // unreachable;
  }
  break;
 }
 case 11:  {
  $37 = ((($2)) + 4|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)==(24);
  if (!($39)) {
   $40 = ((($1)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($0)) + 72|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 12|0);
   HEAP32[$44>>2] = $41;
   HEAP32[$vararg_buffer5>>2] = 21807;
   _lily_raise_syn($43,17236,$vararg_buffer5);
   // unreachable;
  }
  $45 = ((($2)) + 24|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = HEAP32[$1>>2]|0;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($46<<16>>16)<(0);
  if ($51) {
   $56 = ((($1)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($0)) + 72|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($59)) + 12|0);
   HEAP32[$60>>2] = $57;
   HEAP32[$vararg_buffer8>>2] = $47;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $50;
   _lily_raise_syn($59,17279,$vararg_buffer8);
   // unreachable;
  }
  $52 = ((($50)) + 10|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = ($47|0)<($54|0);
  if ($55) {
   STACKTOP = sp;return;
  } else {
   $56 = ((($1)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($0)) + 72|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($59)) + 12|0);
   HEAP32[$60>>2] = $57;
   HEAP32[$vararg_buffer8>>2] = $47;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $50;
   _lily_raise_syn($59,17279,$vararg_buffer8);
   // unreachable;
  }
  break;
 }
 default: {
  $61 = ((($1)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($0)) + 72|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 12|0);
  HEAP32[$65>>2] = $62;
  $66 = HEAP32[$1>>2]|0;
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $68;
  _lily_raise_syn($64,17312,$vararg_buffer12);
  // unreachable;
 }
 }
}
function _get_subscript_result($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP16[$5>>1]|0;
 switch ($6<<16>>16) {
 case 9:  {
  $7 = ((($1)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $$sink = $8;
  break;
 }
 case 10:  {
  $9 = ((($1)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $$sink = $11;
  break;
 }
 case 11:  {
  $12 = ((($2)) + 24|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = ((($1)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<2)|0);
  $$sink = $17;
  break;
 }
 case 5:  {
  $18 = ((($0)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 12|0);
  $$sink = $22;
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $23 = HEAP32[$$sink>>2]|0;
 $$0 = $23;
 return ($$0|0);
}
function _write_build_op($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$020 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + 5)|0;
 _lily_u16_write_prep($7,$8);
 $9 = HEAP32[$6>>2]|0;
 $10 = $1&65535;
 _lily_u16_write_1($9,$10);
 $11 = ($1|0)==(35);
 if ($11) {
  $12 = HEAP32[$6>>2]|0;
  $13 = ((($5)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP16[$20>>1]|0;
  _lily_u16_write_1($12,$21);
 }
 $22 = HEAP32[$6>>2]|0;
 $23 = $4&65535;
 _lily_u16_write_1($22,$23);
 $24 = ($2|0)==(0|0);
 $25 = HEAP32[$6>>2]|0;
 if ($24) {
  $$lcssa = $25;
  $34 = ((($5)) + 8|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $3&65535;
  _lily_u16_write_2($$lcssa,$35,$36);
  return;
 } else {
  $$020 = $2;$29 = $25;
 }
 while(1) {
  $26 = HEAP32[$$020>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP16[$27>>1]|0;
  _lily_u16_write_1($29,$28);
  $30 = ((($$020)) + 40|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  $33 = HEAP32[$6>>2]|0;
  if ($32) {
   $$lcssa = $33;
   break;
  } else {
   $$020 = $31;$29 = $33;
  }
 }
 $34 = ((($5)) + 8|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $3&65535;
 _lily_u16_write_2($$lcssa,$35,$36);
 return;
}
function _inconsistent_type_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 72|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $11;
 _lily_raise_syn($7,17431,$vararg_buffer);
 // unreachable;
}
function _ensure_valid_key_type($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ($2|0)==(0|0);
 $4 = HEAP32[629]|0;
 $$ = $3 ? $4 : $2;
 $5 = ((($$)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 6|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 64;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $11 = ((($1)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 72|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 12|0);
  HEAP32[$15>>2] = $12;
  HEAP32[$vararg_buffer>>2] = $$;
  _lily_raise_syn($14,17392,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _make_empty_list_or_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$0$in = 0, $$043 = 0, $$045 = 0, $$046 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   label = 5;
  } else {
   $4 = ((($2)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 8|0);
   $7 = HEAP16[$6>>1]|0;
   switch ($7<<16>>16) {
   case 10:  {
    $8 = ((($2)) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($9)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    _ensure_valid_key_type($0,$1,$10);
    $13 = ($12|0)==(0|0);
    $14 = HEAP32[629]|0;
    $$ = $13 ? $14 : $12;
    $15 = ((($0)) + 84|0);
    $16 = HEAP32[$15>>2]|0;
    _lily_tm_add($16,$10);
    $17 = HEAP32[$15>>2]|0;
    _lily_tm_add($17,$$);
    $18 = ((($0)) + 92|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($19)) + 68|0);
    $$0$in = $20;$$045 = 2;$$046 = 35;
    break L1;
    break;
   }
   case 9:  {
    $21 = ((($2)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($25)) + 8|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = ($27<<16>>16)==(-6);
    if ($28) {
     label = 5;
     break L1;
    } else {
     $$043 = $23;
     label = 6;
     break L1;
    }
    break;
   }
   default: {
    label = 5;
    break L1;
   }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $29 = HEAP32[629]|0;
  $$043 = $29;
  label = 6;
 }
 if ((label|0) == 6) {
  $30 = ((($0)) + 84|0);
  $31 = HEAP32[$30>>2]|0;
  _lily_tm_add($31,$$043);
  $32 = ((($0)) + 92|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 64|0);
  $$0$in = $34;$$045 = 1;$$046 = 33;
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $35 = ((($0)) + 84|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_lily_tm_make($36,$$0,$$045)|0);
 $38 = (_get_storage($0,$37)|0);
 $39 = ((($1)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($1)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 _write_build_op($0,$$046,$40,$42,0,$38);
 HEAP32[$1>>2] = $38;
 return;
}
function _opname($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (2524 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _emit_jump_if($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2&65535;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 _lily_u16_write_4($4,24,$5,$8,3);
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 65535)|0;
 $14 = $13&65535;
 _lily_u16_write_1($9,$14);
 return;
}
function _write_patches_since($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$020 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $$020 = (($4) + -1)|0;
 $9 = ($$020|0)<($1|0);
 if ($9) {
  return;
 } else {
  $$021 = $$020;
 }
 while(1) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (_lily_u16_pop($10)|0);
  $12 = $11&65535;
  $13 = ($11<<16>>16)==(0);
  if (!($13)) {
   $15 = HEAP32[$5>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($12<<1)|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = (($8) - ($12))|0;
   $21 = (($20) + ($19))|0;
   $22 = $21&65535;
   HEAP16[$17>>1] = $22;
  }
  $$0 = (($$021) + -1)|0;
  $14 = ($$0|0)<($1|0);
  if ($14) {
   break;
  } else {
   $$021 = $$0;
  }
 }
 return;
}
function _eval_assign_global_local($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 _eval_tree($0,$3,$8);
 return;
}
function _eval_assign_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _close_over_class_self($0,$1);
 }
 $7 = ((($1)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 _ensure_valid_scope($0,$10);
 $11 = ((($1)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$7>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 _eval_tree($0,$12,$17);
 return;
}
function _eval_assign_oo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _eval_oo_access_for_item($0,$3);
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 _ensure_valid_scope($0,$6);
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(4);
 if (!($12)) {
  $13 = ((($1)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 12|0);
  HEAP32[$17>>2] = $14;
  $18 = ((($1)) + 8|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (_opname($20)|0);
  HEAP32[$vararg_buffer>>2] = $21;
  _lily_raise_syn($16,17653,$vararg_buffer);
  // unreachable;
 }
 $22 = HEAP32[$2>>2]|0;
 $23 = (_get_solved_property_type($0,$22)|0);
 $24 = ((($1)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 _eval_tree($0,$25,$23);
 $26 = HEAP32[$24>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31 & 16;
 $33 = ($32<<16>>16)==(0);
 if (!($33)) {
  $34 = ((($1)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  _incomplete_type_assign_error($0,$35,$29);
 }
 $36 = ($23|0)==($29|0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$24>>2]|0;
 $38 = (_type_matchup($0,$23,$37)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = ((($1)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($0)) + 72|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 12|0);
 HEAP32[$44>>2] = $41;
 _bad_assign_error($0,$41,$23,$29);
 STACKTOP = sp;return;
}
function _eval_assign_upvalue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _eval_tree($0,$3,0);
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 $11 = ((($7)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (_find_closed_sym_spot_raw($0,$10,$12)|0);
 $14 = $13 & 65535;
 $15 = ($14|0)==(65535);
 if (!($15)) {
  return;
 }
 (_checked_close_over_var($0,$7)|0);
 return;
}
function _eval_assign_sub($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_determine_left_type($0,$3)|0);
 $9 = ((($1)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(5);
 if (!($13)) {
  _eval_tree($0,$10,$8);
 }
 $14 = ((($5)) + 4|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(5);
 if (!($16)) {
  _eval_tree($0,$5,0);
  $17 = HEAP32[$5>>2]|0;
  $18 = ((($17)) + 6|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 & 2;
  $21 = ($20<<16>>16)==(0);
  if (!($21)) {
   $22 = ((($1)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($0)) + 72|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 12|0);
   HEAP32[$26>>2] = $23;
   $27 = ((($1)) + 8|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = (_opname($29)|0);
   HEAP32[$vararg_buffer>>2] = $30;
   _lily_raise_syn($25,17653,$vararg_buffer);
   // unreachable;
  }
 }
 $31 = ((($7)) + 4|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)==(5);
 if (!($33)) {
  _eval_tree($0,$7,0);
 }
 _check_valid_subscript($0,$5,$7);
 $34 = HEAP32[$5>>2]|0;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (_get_subscript_result($0,$36,$7)|0);
 $38 = HEAP32[$9>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43 & 16;
 $45 = ($44<<16>>16)==(0);
 if (!($45)) {
  $46 = ((($1)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  _incomplete_type_assign_error($0,$47,$41);
 }
 $48 = HEAP32[$9>>2]|0;
 $49 = (_type_matchup($0,$37,$48)|0);
 $50 = ($49|0)==(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = ((($1)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($0)) + 72|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 12|0);
 HEAP32[$55>>2] = $52;
 _bad_assign_error($0,$52,$37,$41);
 STACKTOP = sp;return;
}
function _incomplete_type_assign_error($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 _lily_raise_syn($4,17799,$vararg_buffer);
 // unreachable;
}
function _bad_assign_error($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = ((($0)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 _lily_raise_syn($5,17761,$vararg_buffer);
 // unreachable;
}
function _emit_compound_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 | 2;
 $7 = ($6<<24>>24)==(7);
 L1: do {
  if ($7) {
   $8 = ($5<<24>>24)==(7);
   if ($8) {
    _eval_tree($0,$3,0);
   }
  } else {
   switch ($5<<24>>24) {
   case 13:  {
    _eval_tree($0,$3,0);
    break L1;
    break;
   }
   case 8:  {
    _oo_property_read($0,$3);
    break L1;
    break;
   }
   case 21:  {
    $9 = ((($3)) + 28|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($10)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12&65535;
    $14 = ((($10)) + 8|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = (_find_closed_sym_spot_raw($0,$13,$15)|0);
    $17 = $16&65535;
    $18 = ((($10)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_get_storage($0,$19)|0);
    $21 = ((($0)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($20)) + 8|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = ((($1)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    _lily_u16_write_4($22,54,$17,$24,$27);
    $28 = HEAP32[$2>>2]|0;
    HEAP32[$28>>2] = $20;
    break L1;
    break;
   }
   case 1:  {
    $29 = ((($3)) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$30>>2]|0;
    $34 = HEAP32[$32>>2]|0;
    $35 = ((($33)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_get_subscript_result($0,$36,$32)|0);
    $38 = (_get_storage($0,$37)|0);
    $39 = ((($0)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($33)) + 8|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = ((($34)) + 8|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = ((($38)) + 8|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = ((($1)) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48&65535;
    _lily_u16_write_5($40,37,$42,$44,$46,$49);
    $50 = HEAP32[$2>>2]|0;
    HEAP32[$50>>2] = $38;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $51 = ((($1)) + 8|0);
 $52 = HEAP8[$51>>0]|0;
 _set_compound_spoof_op($0,$1);
 _emit_binary_op($0,$1);
 HEAP8[$51>>0] = $52;
 return;
}
function _assign_optimize_check($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$1 = 0, $$pn = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(7);
 if ($5) {
  $$1 = 0;
  return ($$1|0);
 } else {
  $$pn = $0;
 }
 L3: while(1) {
  $$0$in = ((($$pn)) + 32|0);
  $$0 = HEAP32[$$0$in>>2]|0;
  $6 = ((($$0)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  switch ($7<<24>>24) {
  case 4:  {
   $$pn = $$0;
   break;
  }
  case 28:  {
   label = 3;
   break L3;
   break;
  }
  case 5:  {
   $$1 = 0;
   label = 8;
   break L3;
   break;
  }
  default: {
   $11 = $7;
   break L3;
  }
  }
 }
 if ((label|0) == 8) {
  return ($$1|0);
 }
 do {
  if ((label|0) == 3) {
   $8 = ((($$0)) + 8|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 & -2;
   $switch = ($10<<24>>24)==(20);
   if ($switch) {
    $$1 = 0;
    return ($$1|0);
   } else {
    $$pr = HEAP8[$6>>0]|0;
    $11 = $$pr;
    break;
   }
  }
 } while(0);
 $12 = ($11<<24>>24)==(28);
 if ($12) {
  $13 = ((($$0)) + 8|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14&255)>(22);
  if ($15) {
   $$1 = 0;
   return ($$1|0);
  }
 }
 $$1 = 1;
 return ($$1|0);
}
function _set_compound_spoof_op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 do {
  switch ($3<<24>>24) {
  case 28:  {
   $$0 = 11;
   break;
  }
  case 27:  {
   $$0 = 10;
   break;
  }
  case 26:  {
   $$0 = 9;
   break;
  }
  case 24:  {
   $$0 = 0;
   break;
  }
  case 25:  {
   $$0 = 2;
   break;
  }
  case 29:  {
   $$0 = 12;
   break;
  }
  case 30:  {
   $$0 = 13;
   break;
  }
  case 31:  {
   $$0 = 14;
   break;
  }
  case 32:  {
   $$0 = 15;
   break;
  }
  case 33:  {
   $$0 = 16;
   break;
  }
  default: {
   $4 = $3&255;
   $5 = ((($0)) + 72|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_opname($4)|0);
   HEAP32[$vararg_buffer>>2] = $7;
   _lily_raise_syn($6,17736,$vararg_buffer);
   // unreachable;
  }
  }
 } while(0);
 HEAP8[$2>>0] = $$0;
 STACKTOP = sp;return;
}
function _determine_left_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 5: case 7:  {
  $4 = ((($1)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $$3 = $7;
  return ($$3|0);
  break;
 }
 case 1:  {
  $8 = ((($1)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_determine_left_type($0,$9)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$3 = 0;
   return ($$3|0);
  }
  $14 = ((($12)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 8|0);
  $17 = HEAP16[$16>>1]|0;
  switch ($17<<16>>16) {
  case 10:  {
   $18 = ((($12)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $$3 = $21;
   return ($$3|0);
   break;
  }
  case 11:  {
   $22 = ((($11)) + 4|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(24);
   if (!($24)) {
    $$3 = 0;
    return ($$3|0);
   }
   $25 = ((($11)) + 24|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = ($26<<16>>16)<(0);
   if ($28) {
    $$3 = 0;
    return ($$3|0);
   }
   $29 = ((($12)) + 10|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   $32 = ($27|0)>($31|0);
   if ($32) {
    $$3 = 0;
    return ($$3|0);
   }
   $33 = ((($12)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($27<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $$3 = $36;
   return ($$3|0);
   break;
  }
  case 9:  {
   $37 = ((($12)) + 16|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$38>>2]|0;
   $$3 = $39;
   return ($$3|0);
   break;
  }
  case 5:  {
   $40 = ((($0)) + 92|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 48|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $$3 = $45;
   return ($$3|0);
   break;
  }
  default: {
   $$3 = $12;
   return ($$3|0);
  }
  }
  break;
 }
 case 8:  {
  $46 = ((($1)) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_determine_left_type($0,$47)|0);
  $49 = ($48|0)==(0|0);
  if ($49) {
   $$3 = 0;
   return ($$3|0);
  }
  $50 = ((($0)) + 76|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($1)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_lily_sp_get($51,$53)|0);
  $55 = ((($48)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_lily_find_property($56,$54)|0);
  $58 = ($57|0)==(0|0);
  if ($58) {
   $$3 = 0;
   return ($$3|0);
  }
  $59 = ((($57)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 6|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 & 2;
  $64 = ($63<<16>>16)==(0);
  if ($64) {
   $$3 = $60;
   return ($$3|0);
  }
  $65 = ((($0)) + 80|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_lily_ts_resolve_by_second($66,$48,$60)|0);
  $$3 = $67;
  return ($$3|0);
  break;
 }
 case 13:  {
  $68 = ((($1)) + 28|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $$3 = $71;
  return ($$3|0);
  break;
 }
 default: {
  $$3 = 0;
  return ($$3|0);
 }
 }
 return (0)|0;
}
function _checked_close_over_var($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(11);
 if ($6) {
  $7 = ((($3)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 13|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(11);
  if ($11) {
   $12 = ((($1)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 6|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 & 2;
   $17 = ($16<<16>>16)==(0);
   if (!($17)) {
    $18 = ((($0)) + 72|0);
    $19 = HEAP32[$18>>2]|0;
    _lily_raise_syn($19,17849,$vararg_buffer);
    // unreachable;
   }
  }
 }
 $20 = ((($1)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 60|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = ($21|0)==($24|0);
 if ($25) {
  $26 = ((($0)) + 72|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 21807;
  _lily_raise_syn($27,17910,$vararg_buffer1);
  // unreachable;
 } else {
  $28 = HEAP32[$20>>2]|0;
  $29 = $28&65535;
  _close_over_sym($0,$29,$1);
  $30 = ((($0)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 131071)|0;
  $35 = $34 >>> 1;
  $36 = $35&65535;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _run_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$lcssa = 0, $$0100$lcssa = 0, $$010010 = 0, $$0101 = 0, $$0102$lcssa = 0, $$01029 = 0, $$04 = 0, $$0952 = 0, $$096 = 0, $$097 = 0, $$098 = 0, $$1 = 0, $$11033 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $exitcond = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($1)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 22|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 _get_func_min_max($2,$3,$4);
 $10 = HEAP32[$3>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 $12 = HEAP32[$4>>2]|0;
 $13 = ($9>>>0)>($12>>>0);
 $or$cond1 = $11 | $13;
 if ($or$cond1) {
  _error_argument_count($0,$1,$9,$10,$12);
 }
 $14 = ((($2)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($2)) + 6|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 & 1;
 $19 = ($18<<16>>16)==(0);
 if ($19) {
  $$0101 = $9;
 } else {
  $20 = ((($2)) + 10|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($22) + -1)|0;
  $24 = ($23|0)>($9|0);
  $25 = (($22) + -2)|0;
  $$ = $24 ? $9 : $25;
  $$0101 = $$;
 }
 $26 = ($$0101|0)>(0);
 if ($26) {
  $$010010 = 0;$$01029 = $6;
  while(1) {
   $27 = (($$010010) + 1)|0;
   $28 = (($15) + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (_eval_call_arg($0,$$01029,$29)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = HEAP32[$$01029>>2]|0;
    $33 = ((($32)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    _error_bad_arg($0,$1,$2,$$010010,$34);
   }
   $35 = ((($$01029)) + 40|0);
   $36 = HEAP32[$35>>2]|0;
   $exitcond = ($27|0)==($$0101|0);
   if ($exitcond) {
    $$0100$lcssa = $$0101;$$0102$lcssa = $36;
    break;
   } else {
    $$010010 = $27;$$01029 = $36;
   }
  }
 } else {
  $$0100$lcssa = 0;$$0102$lcssa = $6;
 }
 $37 = HEAP16[$16>>1]|0;
 $38 = $37 & 1;
 $39 = ($38<<16>>16)==(0);
 if ($39) {
  $$1 = 0;
  $97 = HEAP32[$15>>2]|0;
  _setup_call_result($0,$1,$97);
  _write_call($0,$1,$$0101,$$1);
  STACKTOP = sp;return;
 }
 $40 = (($9) + 2)|0;
 $41 = ((($2)) + 10|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ($40>>>0)<($43>>>0);
 if ($44) {
  $$1 = 0;
  $97 = HEAP32[$15>>2]|0;
  _setup_call_result($0,$1,$97);
  _write_call($0,$1,$$0101,$$1);
  STACKTOP = sp;return;
 }
 $45 = (($$0100$lcssa) + 1)|0;
 $46 = (($15) + ($45<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 8|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = ($51<<16>>16)==(-4);
 $53 = ((($47)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 if ($52) {
  $56 = ((($55)) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $$096 = 1;$$097 = $55;$$098 = $58;
 } else {
  $$096 = 0;$$097 = $47;$$098 = $55;
 }
 $59 = ($$0102$lcssa|0)==(0|0);
 if ($59) {
  $$0$lcssa = $$0100$lcssa;
 } else {
  $$04 = $$0100$lcssa;$$11033 = $$0102$lcssa;
  while(1) {
   $60 = (_eval_call_arg($0,$$11033,$$098)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    $62 = HEAP32[$$11033>>2]|0;
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    _error_bad_arg($0,$1,$2,$$04,$64);
   }
   $65 = ((($$11033)) + 40|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$04) + 1)|0;
   $68 = ($66|0)==(0|0);
   if ($68) {
    $$0$lcssa = $67;
    break;
   } else {
    $$04 = $67;$$11033 = $66;
   }
  }
 }
 $69 = ((($$098)) + 6|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = $70 & 2;
 $72 = ($71<<16>>16)==(0);
 if (!($72)) {
  $73 = ((($0)) + 80|0);
  $74 = HEAP32[$73>>2]|0;
  (_lily_ts_resolve($74,$$098)|0);
 }
 $75 = ($$0$lcssa|0)!=($$0100$lcssa|0);
 $76 = ($$096|0)==(0);
 $or$cond = $76 | $75;
 if (!($or$cond)) {
  $$1 = 0;
  $97 = HEAP32[$15>>2]|0;
  _setup_call_result($0,$1,$97);
  _write_call($0,$1,$$0101,$$1);
  STACKTOP = sp;return;
 }
 $77 = (_get_storage($0,$$097)|0);
 $78 = ((($0)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($$0$lcssa) - ($$0100$lcssa))|0;
 $81 = $80&65535;
 _lily_u16_write_2($79,33,$81);
 $82 = ($$0102$lcssa|0)==(0|0);
 $83 = HEAP32[$78>>2]|0;
 if ($82) {
  $$lcssa = $83;
 } else {
  $$0952 = $$0102$lcssa;$87 = $83;
  while(1) {
   $84 = HEAP32[$$0952>>2]|0;
   $85 = ((($84)) + 8|0);
   $86 = HEAP16[$85>>1]|0;
   _lily_u16_write_1($87,$86);
   $88 = ((($$0952)) + 40|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89|0)==(0|0);
   $91 = HEAP32[$78>>2]|0;
   if ($90) {
    $$lcssa = $91;
    break;
   } else {
    $$0952 = $89;$87 = $91;
   }
  }
 }
 $92 = ((($77)) + 8|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = ((($1)) + 16|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95&65535;
 _lily_u16_write_2($$lcssa,$93,$96);
 $$1 = $77;
 $97 = HEAP32[$15>>2]|0;
 _setup_call_result($0,$1,$97);
 _write_call($0,$1,$$0101,$$1);
 STACKTOP = sp;return;
}
function _lily_emit_eval_optarg_keyed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 _lily_u16_write_4($9,25,0,$7,3);
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 65535)|0;
 $15 = $14&65535;
 _lily_u16_write_1($10,$15);
 _eval_tree($0,$1,0);
 $16 = ((($0)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$16>>2] = $18;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_lily_u16_pop($19)|0);
 $21 = HEAP32[$8>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $20&65535;
 $25 = (3 - ($24))|0;
 $26 = (($25) + ($23))|0;
 $27 = $26&65535;
 $28 = HEAP32[$21>>2]|0;
 $29 = (($28) + ($24<<1)|0);
 HEAP16[$29>>1] = $27;
 return;
}
function _lily_emit_write_keyless_optarg_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$03639 = 0, $$1 = 0, $$1$in40 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 10|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 16|0);
 $$0$in = $4;
 while(1) {
  $$0 = (($$0$in) + -1)|0;
  $6 = ($$0$in|0)>(1);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + ($$0<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(-4);
  if ($14) {
   $$0$in = $$0;
  } else {
   break;
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP16[$2>>1]|0;
 $19 = $18&65535;
 $20 = (($19) - ($$0))|0;
 $21 = ($20|0)>(1);
 $22 = ((($0)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 if ($21) {
  $24 = $$0&65535;
  $$03639 = $24;$$1$in40 = $20;$25 = $23;
  while(1) {
   $$1 = (($$1$in40) + -1)|0;
   _lily_u16_write_4($25,25,0,$$03639,6);
   $26 = HEAP32[$22>>2]|0;
   _lily_u16_write_2($26,23,1);
   $27 = HEAP32[$0>>2]|0;
   $28 = HEAP32[$22>>2]|0;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 65535)|0;
   $32 = $31&65535;
   _lily_u16_inject($27,$17,$32);
   $33 = (($$03639) + 1)<<16>>16;
   $34 = ($$1|0)>(1);
   $35 = HEAP32[$22>>2]|0;
   if ($34) {
    $$03639 = $33;$$1$in40 = $$1;$25 = $35;
   } else {
    $$lcssa = $35;
    break;
   }
  }
 } else {
  $$lcssa = $23;
 }
 _lily_u16_write_2($$lcssa,23,1);
 $36 = HEAP32[$0>>2]|0;
 $37 = HEAP32[$22>>2]|0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 65535)|0;
 $41 = $40&65535;
 _lily_u16_inject($36,$17,$41);
 $42 = HEAP32[$0>>2]|0;
 $43 = (_lily_u16_pop($42)|0);
 $44 = HEAP32[$22>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $43&65535;
 $48 = (1 - ($47))|0;
 $49 = (($48) + ($46))|0;
 $50 = $49&65535;
 $51 = HEAP32[$44>>2]|0;
 $52 = (($51) + ($47<<1)|0);
 HEAP16[$52>>1] = $50;
 return;
}
function _lily_emit_write_class_header($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_get_storage($0,$1)|0);
 $4 = ((($0)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 36|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($3)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 _lily_u16_write_4($8,46,$12,$14,$2);
 return;
}
function _lily_emit_write_shorthand_ctor($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$015 = 0, $$01518 = 0, $$01520 = 0, $$019 = 0, $$1$lcssa = 0, $$117 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $strcmpload = 0, $strcmpload16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 36|0);
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $$01518 = HEAP32[$4>>2]|0;
 $11 = ((($$01518)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ($12<<16>>16)==(4);
 if (!($13)) {
  return;
 }
 $14 = ((($0)) + 8|0);
 $15 = ((($0)) + 68|0);
 $$01520 = $$01518;$$019 = $2;
 while(1) {
  $16 = ((($$019)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $strcmpload16 = HEAP8[$17>>0]|0;
  $18 = ($strcmpload16<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$019;
  } else {
   $$117 = $$019;
   while(1) {
    $19 = HEAP32[$$117>>2]|0;
    $20 = ((($19)) + 16|0);
    $21 = HEAP32[$20>>2]|0;
    $strcmpload = HEAP8[$21>>0]|0;
    $22 = ($strcmpload<<24>>24)==(0);
    if ($22) {
     $$1$lcssa = $19;
     break;
    } else {
     $$117 = $19;
    }
   }
  }
  $23 = HEAP32[$14>>2]|0;
  $24 = ((($$01520)) + 8|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = ((($$1$lcssa)) + 8|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = HEAP32[$15>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = $29&65535;
  _lily_u16_write_5($23,48,$25,$10,$27,$30);
  $31 = ((($$01520)) + 6|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 & -2;
  HEAP16[$31>>1] = $33;
  $34 = HEAP32[$$1$lcssa>>2]|0;
  $$015 = HEAP32[$$01520>>2]|0;
  $35 = ((($$015)) + 4|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = ($36<<16>>16)==(4);
  if ($37) {
   $$01520 = $$015;$$019 = $34;
  } else {
   break;
  }
 }
 return;
}
function _lily_emit_finalize_for_in($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 128;
 $9 = ($8<<16>>16)!=(0);
 if ($9) {
  $10 = ((($0)) + 92|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_get_storage($0,$15)|0);
  $$0 = $16;
 } else {
  $$0 = $1;
 }
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($2)) + 8|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ((($3)) + 8|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ((($4)) + 8|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = ((($$0)) + 8|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $5&65535;
 _lily_u16_write_6($18,27,$20,$22,$24,$26,$27);
 if ($9) {
  $28 = HEAP32[$17>>2]|0;
  $29 = HEAP16[$25>>1]|0;
  $30 = ((($1)) + 8|0);
  $31 = HEAP16[$30>>1]|0;
  _lily_u16_write_4($28,40,$29,$31,$27);
 }
 $32 = HEAP32[$17>>2]|0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 16|0);
 HEAP32[$37>>2] = $34;
 $38 = HEAP16[$19>>1]|0;
 $39 = HEAP16[$21>>1]|0;
 $40 = HEAP16[$23>>1]|0;
 $41 = HEAP16[$25>>1]|0;
 _lily_u16_write_5($32,26,$38,$39,$40,$41);
 $42 = HEAP32[$17>>2]|0;
 _lily_u16_write_2($42,5,$27);
 $43 = HEAP32[$0>>2]|0;
 $44 = HEAP32[$17>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 65534)|0;
 $48 = $47&65535;
 _lily_u16_write_1($43,$48);
 if (!($9)) {
  return;
 }
 $49 = HEAP32[$17>>2]|0;
 $50 = HEAP16[$25>>1]|0;
 $51 = ((($1)) + 8|0);
 $52 = HEAP16[$51>>1]|0;
 _lily_u16_write_4($49,40,$50,$52,$27);
 return;
}
function _lily_emit_break($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_find_deepest_loop($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($0)) + 72|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise_syn($4,17972,$vararg_buffer);
  // unreachable;
 } else {
  _write_pop_try_blocks_up_to($0,$1);
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  _lily_u16_write_2($6,23,1);
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 65535)|0;
  $11 = $10&65535;
  _inject_patch_into_block($0,$1,$11);
  STACKTOP = sp;return;
 }
}
function _find_deepest_loop($0) {
 $0 = $0|0;
 var $$0 = 0, $$012 = 0, $$01213 = 0, $$01214 = 0, $$off = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $$01213 = HEAP32[$1>>2]|0;
 $2 = ($$01213|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$01214 = $$01213;
 }
 while(1) {
  $3 = ((($$01214)) + 13|0);
  $4 = HEAP8[$3>>0]|0;
  $$off = (($4) + -3)<<24>>24;
  $switch = ($$off&255)<(3);
  if ($switch) {
   $$0 = $$01214;
   label = 5;
   break;
  }
  $5 = ($4&255)>(10);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = ((($$01214)) + 44|0);
  $$012 = HEAP32[$6>>2]|0;
  $7 = ($$012|0)==(0|0);
  if ($7) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $$01214 = $$012;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _write_pop_try_blocks_up_to($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$015 = 0, $$01519 = 0, $$016 = 0, $$01618 = 0, $$01620 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $$01618 = HEAP32[$2>>2]|0;
 $3 = ($$01618|0)==($1|0);
 if ($3) {
  return;
 } else {
  $$01519 = 0;$$01620 = $$01618;
 }
 while(1) {
  $4 = ((($$01620)) + 13|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(6);
  $7 = $6&1;
  $$$015 = (($7) + ($$01519))|0;
  $8 = ((($$01620)) + 44|0);
  $$016 = HEAP32[$8>>2]|0;
  $9 = ($$016|0)==($1|0);
  if ($9) {
   break;
  } else {
   $$01519 = $$$015;$$01620 = $$016;
  }
 }
 $10 = ($$$015|0)>(0);
 if (!($10)) {
  return;
 }
 $11 = ((($0)) + 8|0);
 $$017 = 0;
 while(1) {
  $12 = HEAP32[$11>>2]|0;
  _lily_u16_write_1($12,50);
  $13 = (($$017) + 1)|0;
  $exitcond = ($13|0)==($$$015|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $13;
  }
 }
 return;
}
function _inject_patch_into_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  _lily_u16_write_1($6,$2);
  return;
 }
 $7 = ((($1)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 _lily_u16_inject($6,$11,$2);
 $$09 = HEAP32[$7>>2]|0;
 $12 = ($$09|0)==(0|0);
 if ($12) {
  return;
 } else {
  $$010 = $$09;
 }
 while(1) {
  $13 = ((($$010)) + 4|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = (($14) + 1)<<16>>16;
  HEAP16[$13>>1] = $15;
  $16 = ((($$010)) + 40|0);
  $$0 = HEAP32[$16>>2]|0;
  $17 = ($$0|0)==(0|0);
  if ($17) {
   break;
  } else {
   $$010 = $$0;
  }
 }
 return;
}
function _lily_emit_continue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_find_deepest_loop($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($0)) + 72|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_raise_syn($4,18004,$vararg_buffer);
  // unreachable;
 } else {
  _write_pop_try_blocks_up_to($0,$1);
  $5 = ((($1)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($6) - ($10))|0;
  $12 = $11&65535;
  _lily_u16_write_2($8,23,$12);
  STACKTOP = sp;return;
 }
}
function _lily_emit_try($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1&65535;
 _lily_u16_write_3($3,49,1,$4);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 65534)|0;
 $10 = $9&65535;
 _lily_u16_write_1($5,$10);
 return;
}
function _lily_emit_except($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&65535;
 if ($4) {
  $23 = ((($1)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP16[$25>>1]|0;
  _lily_u16_write_4($6,51,$7,$26,3);
  $27 = HEAP32[$0>>2]|0;
  $28 = HEAP32[$5>>2]|0;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 65535)|0;
  $32 = $31&65535;
  _lily_u16_write_1($27,$32);
  return;
 } else {
  $8 = ((($2)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP16[$12>>1]|0;
  _lily_u16_write_4($6,51,$7,$13,3);
  $14 = HEAP32[$0>>2]|0;
  $15 = HEAP32[$5>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 65535)|0;
  $19 = $18&65535;
  _lily_u16_write_1($14,$19);
  $20 = HEAP32[$5>>2]|0;
  $21 = ((($2)) + 8|0);
  $22 = HEAP16[$21>>1]|0;
  _lily_u16_write_2($20,52,$22);
  return;
 }
}
function _get_unique_storage($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 while(1) {
  $6 = (_get_storage($0,$1)|0);
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($5|0);
  if (!($10)) {
   break;
  }
 }
 return ($6|0);
}
function _lily_emit_enter_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_block_enter_common($0)|0);
 $3 = ((($2)) + 13|0);
 $4 = $1&255;
 HEAP8[$3>>0] = $4;
 $5 = ((($2)) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 | 2;
 HEAP8[$5>>0] = $7;
 $8 = ($1|0)==(10);
 if (!($8)) {
  $16 = ((($0)) + 56|0);
  HEAP32[$16>>2] = $2;
  return;
 }
 $9 = ((($0)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($2)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 56|0);
 HEAP32[$16>>2] = $2;
 return;
}
function _block_enter_common($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_lily_malloc(48)|0);
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 40|0);
  HEAP32[$8>>2] = $6;
  $9 = HEAP32[$1>>2]|0;
  $10 = ((($6)) + 44|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($6)) + 40|0);
  HEAP32[$11>>2] = 0;
  $$0 = $6;
 } else {
  $$0 = $4;
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($$0)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($$0)) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19&65535;
 $21 = ((($$0)) + 4|0);
 HEAP16[$21>>1] = $20;
 $22 = ((($$0)) + 24|0);
 HEAP32[$22>>2] = -1;
 $23 = ((($$0)) + 12|0);
 HEAP8[$23>>0] = 0;
 $24 = ((($$0)) + 10|0);
 HEAP16[$24>>1] = 0;
 $25 = ((($0)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($$0)) + 16|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($$0)) + 14|0);
 HEAP16[$30>>1] = 0;
 return ($$0|0);
}
function _lily_emit_enter_call_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_block_enter_common($0)|0);
 $4 = ((($3)) + 13|0);
 $5 = $1&255;
 HEAP8[$4>>0] = $5;
 $6 = ($1|0)==(12);
 if ($6) {
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($3)) + 28|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($0)) + 62|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + 1)|0;
  $18 = $17&65535;
  $19 = ((($0)) + 60|0);
  HEAP16[$19>>1] = $18;
 }
 $20 = ((($0)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 13|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(11);
 if ($24) {
  $25 = ((($2)) + 6|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 | 64;
  HEAP16[$25>>1] = $27;
 }
 $28 = ($1|0)==(14);
 if (!($28)) {
  $29 = ((($0)) + 62|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = (($30) + 1)<<16>>16;
  HEAP16[$29>>1] = $31;
 }
 $32 = ((($0)) + 52|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($3)) + 32|0);
 HEAP32[$34>>2] = $33;
 HEAP32[$32>>2] = $3;
 $35 = ((($3)) + 20|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($0)) + 40|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 4|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = ((($3)) + 6|0);
 HEAP16[$40>>1] = $39;
 HEAP32[$3>>2] = $2;
 $41 = ((($0)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($3)) + 16|0);
 HEAP32[$45>>2] = $44;
 HEAP32[$20>>2] = $3;
 return;
}
function _lily_emit_leave_forward_call($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $4;
 $5 = ((($0)) + 52|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 62|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = (($7) + -1)<<16>>16;
 HEAP16[$6>>1] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 14|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = (($11) + 1)<<16>>16;
 HEAP16[$10>>1] = $12;
 return;
}
function _lily_emit_resolve_forward_decl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & -1025;
 HEAP16[$2>>1] = $4;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 14|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (($8) + -1)<<16>>16;
 HEAP16[$7>>1] = $9;
 return;
}
function _lily_emit_leave_call_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$036 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(12);
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 do {
  if ($6) {
   $9 = ((($3)) + 36|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 8|0);
   $12 = HEAP16[$11>>1]|0;
   _lily_u16_write_3($8,31,$12,$1);
  } else {
   $13 = ((($3)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($8)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if (!($17)) {
    $18 = HEAP32[$3>>2]|0;
    $19 = ((($18)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[628]|0;
    $25 = ($23|0)==($24|0);
    if ($25) {
     _lily_u16_write_2($8,32,$1);
     break;
    }
    $26 = HEAP32[627]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($23|0)==($28|0);
    if ($29) {
     _lily_u16_write_3($8,31,0,$1);
     break;
    } else {
     $30 = ((($0)) + 72|0);
     $31 = HEAP32[$30>>2]|0;
     _lily_raise_syn($31,18039,$vararg_buffer);
     // unreachable;
    }
   }
  }
 } while(0);
 _write_final_code_for_block($0,$3);
 $32 = ((($3)) + 6|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = ((($0)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($33&65535)<($37&65535);
 if ($38) {
  $39 = $33&65535;
  $$036 = $39;$41 = $35;
  while(1) {
   $40 = HEAP32[$41>>2]|0;
   $42 = (($40) + ($$036<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 12|0);
   HEAP32[$44>>2] = 0;
   $45 = (($$036) + 1)|0;
   $46 = HEAP32[$34>>2]|0;
   $47 = ((($46)) + 4|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48&65535;
   $50 = ($45|0)<($49|0);
   if ($50) {
    $$036 = $45;$41 = $46;
   } else {
    $$lcssa = $47;
    break;
   }
  }
 } else {
  $$lcssa = $36;
 }
 $51 = HEAP16[$32>>1]|0;
 HEAP16[$$lcssa>>1] = $51;
 $52 = HEAP32[$2>>2]|0;
 $53 = ((($52)) + 13|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ($54<<24>>24)==(12);
 if ($55) {
  $56 = ((($0)) + 60|0);
  HEAP16[$56>>1] = 0;
 }
 $57 = ((($3)) + 32|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($0)) + 52|0);
 HEAP32[$59>>2] = $58;
 $60 = HEAP8[$4>>0]|0;
 $61 = ($60<<24>>24)==(14);
 if ($61) {
  $65 = ((($52)) + 44|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$2>>2] = $66;
  STACKTOP = sp;return;
 }
 $62 = ((($0)) + 62|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = (($63) + -1)<<16>>16;
 HEAP16[$62>>1] = $64;
 $65 = ((($52)) + 44|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$2>>2] = $66;
 STACKTOP = sp;return;
}
function _write_final_code_for_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($6) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 12|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & 1;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $18 = ((($0)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($0)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) - ($21))|0;
  $$0 = $21;$$046 = $26;$$pn = $23;
 } else {
  $27 = ((($1)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  _perform_closure_transform($0,$1,$13);
  $29 = ((($28)) + 13|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(14);
  if (!($31)) {
   $32 = ((($28)) + 12|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 | 1;
   HEAP8[$32>>0] = $34;
  }
  $35 = ((($0)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $$0 = 0;$$046 = $38;$$pn = $36;
 }
 $$047 = HEAP32[$$pn>>2]|0;
 $39 = $$046 << 1;
 $40 = (($39) + 2)|0;
 $41 = (_lily_malloc($40)|0);
 $42 = (($$047) + ($$0<<1)|0);
 _memcpy(($41|0),($42|0),($39|0))|0;
 $43 = $$046&65535;
 $44 = ((($13)) + 10|0);
 HEAP16[$44>>1] = $43;
 $45 = ((($13)) + 28|0);
 HEAP32[$45>>2] = $41;
 $46 = ((($13)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 12|0);
 HEAP32[$48>>2] = $41;
 $49 = ((($1)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50&65535;
 $52 = ((($13)) + 14|0);
 HEAP16[$52>>1] = $51;
 $53 = ((($1)) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($0)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 4|0);
 HEAP32[$57>>2] = $54;
 return;
}
function _perform_closure_transform($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$0234265 = 0, $$0235291 = 0, $$0240 = 0, $$0243266 = 0, $$0245286 = 0, $$0247285 = 0, $$0249 = 0, $$0297 = 0, $$1236268 = 0, $$1241 = 0, $$1246 = 0, $$1248 = 0, $$2237274 = 0, $$2242 = 0, $$3238278 = 0, $$4239280 = 0, $$lcssa = 0, $$lcssa264 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_lily_new_buffer_u16(8)|0);
  HEAP32[$4>>2] = $7;
 } else {
  $8 = ((($5)) + 4|0);
  HEAP32[$8>>2] = 0;
 }
 $9 = ((($0)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_iter_for_first_line($0,$12)|0);
 $14 = ((($1)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 13|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17 | 2;
 $19 = ($18<<24>>24)==(14);
 $20 = $19&1;
 do {
  if ($19) {
   $21 = HEAP32[$1>>2]|0;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_get_unique_storage($0,$23)|0);
   $25 = HEAP32[$4>>2]|0;
   $26 = ((($0)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 >>> 1;
   $31 = $30&65535;
   $32 = ((($24)) + 8|0);
   $33 = HEAP16[$32>>1]|0;
   _lily_u16_write_4($25,56,$31,$33,$13);
   $34 = ((($1)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    $37 = ((($0)) + 62|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = (_find_closed_sym_spot_raw($0,$38,0)|0);
    $40 = $39 & 65535;
    $41 = ($40|0)==(65535);
    if (!($41)) {
     $42 = $39&65535;
     $43 = HEAP32[$4>>2]|0;
     _lily_u16_write_4($43,55,$42,0,$13);
    }
   }
   _setup_for_transform($0,$2,$20);
   label = 14;
  } else {
   $44 = HEAP32[$9>>2]|0;
   $45 = ((($44)) + 36|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if ($47) {
    _setup_for_transform($0,$2,$20);
    break;
   }
   $48 = ((($15)) + 13|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49<<24>>24)==(12);
   if ($50) {
    $$0$lcssa = $15;
   } else {
    $$0297 = $15;
    while(1) {
     $51 = ((($$0297)) + 32|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($52)) + 13|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = ($54<<24>>24)==(12);
     if ($55) {
      $$0$lcssa = $52;
      break;
     } else {
      $$0297 = $52;
     }
    }
   }
   $56 = ((($$0$lcssa)) + 40|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($0)) + 60|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = (($60) + 1)|0;
   $62 = $61&65535;
   $63 = ((($57)) + 36|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 8|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = (_find_closed_sym_spot_raw($0,$62,$66)|0);
   $68 = $67&65535;
   $69 = HEAP32[$4>>2]|0;
   $70 = ((($46)) + 8|0);
   $71 = HEAP16[$70>>1]|0;
   _lily_u16_write_4($69,54,$68,$71,$13);
   _setup_for_transform($0,$2,$20);
   if ($19) {
    label = 14;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $72 = ((($0)) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  HEAP32[$74>>2] = 0;
 }
 $75 = ((($0)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$76>>2]|0;
 $78 = $12&65535;
 $79 = ((($76)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $80&65535;
 _lily_ci_init($3,$77,$78,$81);
 $82 = ((($0)) + 20|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = HEAP32[$3>>2]|0;
 $85 = HEAP32[$0>>2]|0;
 $86 = ((($85)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87&65535;
 $89 = (_lily_ci_next($3)|0);
 $90 = ($89|0)==(0);
 if (!($90)) {
  $91 = ((($3)) + 20|0);
  $92 = ((($3)) + 4|0);
  $93 = ((($3)) + 8|0);
  $94 = ((($3)) + 22|0);
  $95 = $87 & 65535;
  while(1) {
   $96 = HEAP16[$91>>1]|0;
   $97 = ($96<<16>>16)==(0);
   if (!($97)) {
    $100 = HEAP16[$92>>1]|0;
    $101 = $100&65535;
    $102 = HEAP16[$93>>1]|0;
    $103 = $102&65535;
    $104 = (($103) + ($101))|0;
    $105 = HEAP16[$94>>1]|0;
    $106 = $105&65535;
    $107 = (($104) - ($106))|0;
    $108 = $96&65535;
    $109 = (($107) - ($108))|0;
    $$0235291 = $109;
    while(1) {
     $110 = (($84) + ($$0235291<<1)|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = ($111<<16>>16)==(0);
     if (!($112)) {
      $113 = $111 << 16 >> 16;
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP16[$92>>1]|0;
      $116 = $115&65535;
      $117 = (($116) + ($113))|0;
      _maybe_add_jump($114,$95,$117);
     }
     $118 = (($$0235291) + 1)|0;
     $119 = ($118|0)<($107|0);
     if ($119) {
      $$0235291 = $118;
     } else {
      break;
     }
    }
   }
   $98 = (_lily_ci_next($3)|0);
   $99 = ($98|0)==(0);
   if ($99) {
    break;
   }
  }
 }
 $120 = HEAP32[$0>>2]|0;
 _lily_u16_write_2($120,-1,0);
 $121 = HEAP32[$0>>2]|0;
 $122 = ((($121)) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = HEAP32[$121>>2]|0;
 $125 = $87 & 65535;
 $126 = (($124) + ($125<<1)|0);
 $127 = HEAP16[$126>>1]|0;
 $128 = HEAP32[$75>>2]|0;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($128)) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $131&65535;
 _lily_ci_init($3,$129,$78,$132);
 $133 = (_lily_ci_next($3)|0);
 $134 = ($133|0)==(0);
 if (!($134)) {
  $135 = ((($3)) + 4|0);
  $136 = ((($3)) + 12|0);
  $137 = ((($3)) + 14|0);
  $138 = ((($3)) + 16|0);
  $139 = ((($3)) + 18|0);
  $140 = ((($3)) + 8|0);
  $141 = ((($3)) + 20|0);
  $142 = ((($3)) + 22|0);
  $$0245286 = $88;$$0247285 = $127;
  while(1) {
   $143 = HEAP16[$135>>1]|0;
   $144 = $143&65535;
   $145 = (($144) + 1)|0;
   $146 = HEAP16[$136>>1]|0;
   $147 = ($146<<16>>16)==(0);
   if ($147) {
    $$0240 = $145;
   } else {
    $148 = (($84) + ($144<<1)|0);
    $149 = HEAP16[$148>>1]|0;
    $cond = ($149<<16>>16)==(30);
    if ($cond) {
     $150 = (($84) + ($145<<1)|0);
     $151 = HEAP16[$150>>1]|0;
     $152 = $151&65535;
     $153 = (($83) + ($152<<1)|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = ($154<<16>>16)==(-1);
     if (!($155)) {
      $156 = HEAP32[$4>>2]|0;
      _lily_u16_write_4($156,54,$154,$151,$13);
     }
    }
    $157 = HEAP16[$136>>1]|0;
    $158 = $157&65535;
    $159 = (($158) + ($145))|0;
    $$0240 = $159;
   }
   $160 = HEAP16[$137>>1]|0;
   $161 = $160&65535;
   $162 = (($161) + ($$0240))|0;
   $163 = HEAP16[$138>>1]|0;
   $164 = ($163<<16>>16)==(0);
   if ($164) {
    $$1241 = $162;
   } else {
    $165 = HEAP16[$138>>1]|0;
    $166 = $165&65535;
    $167 = ($165<<16>>16)==(0);
    if ($167) {
     $$lcssa264 = $166;
    } else {
     $$1236268 = 0;
     while(1) {
      $168 = (($$1236268) + ($162))|0;
      $169 = (($84) + ($168<<1)|0);
      $170 = HEAP16[$169>>1]|0;
      $171 = $170&65535;
      $172 = (($83) + ($171<<1)|0);
      $173 = HEAP16[$172>>1]|0;
      $174 = ($173<<16>>16)==(-1);
      if (!($174)) {
       $175 = HEAP32[$4>>2]|0;
       _lily_u16_write_4($175,54,$173,$170,$13);
      }
      $176 = (($$1236268) + 1)|0;
      $177 = HEAP16[$138>>1]|0;
      $178 = $177&65535;
      $179 = ($176|0)<($178|0);
      if ($179) {
       $$1236268 = $176;
      } else {
       $$lcssa264 = $178;
       break;
      }
     }
    }
    $180 = (($$lcssa264) + ($162))|0;
    $$1241 = $180;
   }
   $181 = HEAP16[$139>>1]|0;
   $182 = ($181<<16>>16)==(0);
   $183 = $181&65535;
   $$0249 = $182 ? 0 : $$1241;
   $$2242 = (($183) + ($$1241))|0;
   $184 = HEAP16[$135>>1]|0;
   $185 = $184&65535;
   $186 = ($184<<16>>16)==($$0247285<<16>>16);
   if ($186) {
    $187 = HEAP32[$4>>2]|0;
    $188 = ((($187)) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $189&65535;
    $191 = HEAP32[$0>>2]|0;
    $192 = HEAP32[$191>>2]|0;
    $193 = $$0245286&65535;
    $194 = (($193) + 1)|0;
    $195 = (($192) + ($194<<1)|0);
    HEAP16[$195>>1] = $190;
    $196 = (($193) + 2)|0;
    $197 = $196&65535;
    $198 = $196 & 65535;
    $199 = (($192) + ($198<<1)|0);
    $200 = HEAP16[$199>>1]|0;
    $$1246 = $197;$$1248 = $200;
   } else {
    $$1246 = $$0245286;$$1248 = $$0247285;
   }
   $201 = HEAP16[$135>>1]|0;
   $202 = $201&65535;
   $203 = HEAP16[$140>>1]|0;
   $204 = $203&65535;
   $205 = (($204) + ($202))|0;
   $206 = HEAP16[$141>>1]|0;
   $207 = $206&65535;
   $208 = (($205) - ($207))|0;
   $209 = HEAP16[$142>>1]|0;
   $210 = $209&65535;
   $211 = (($208) - ($210))|0;
   $212 = ($185|0)<($211|0);
   if ($212) {
    $213 = (($204) + ($202))|0;
    $214 = (($207) + ($210))|0;
    $215 = (($213) - ($214))|0;
    $$2237274 = $185;
    while(1) {
     $216 = HEAP32[$4>>2]|0;
     $217 = (($84) + ($$2237274<<1)|0);
     $218 = HEAP16[$217>>1]|0;
     _lily_u16_write_1($216,$218);
     $219 = (($$2237274) + 1)|0;
     $exitcond = ($219|0)==($215|0);
     if ($exitcond) {
      break;
     } else {
      $$2237274 = $219;
     }
    }
   }
   $220 = HEAP16[$141>>1]|0;
   $221 = ($220<<16>>16)==(0);
   if (!($221)) {
    $222 = HEAP16[$141>>1]|0;
    $223 = ($222<<16>>16)==(0);
    if (!($223)) {
     $224 = $222&65535;
     $$3238278 = 0;$243 = $224;
     while(1) {
      $225 = (($$3238278) + ($211))|0;
      $226 = (($84) + ($225<<1)|0);
      $227 = HEAP16[$226>>1]|0;
      $228 = ($227<<16>>16)==(0);
      $229 = HEAP32[$4>>2]|0;
      if ($228) {
       _lily_u16_write_1($229,0);
      } else {
       $230 = $227&65535;
       $231 = HEAP16[$135>>1]|0;
       $232 = $231&65535;
       $233 = (($232) + ($230))|0;
       $234 = HEAP32[$0>>2]|0;
       $235 = ((($229)) + 4|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = $236&65535;
       $238 = HEAP16[$140>>1]|0;
       $239 = $238&65535;
       $240 = HEAP16[$142>>1]|0;
       $241 = $240&65535;
       $242 = (($$3238278) - ($243))|0;
       $244 = (($242) + ($239))|0;
       $245 = (($244) - ($241))|0;
       $246 = $245&65535;
       _lily_u16_write_2($234,$237,$246);
       $247 = HEAP32[$4>>2]|0;
       $248 = $233&65535;
       _lily_u16_write_1($247,$248);
      }
      $249 = (($$3238278) + 1)|0;
      $250 = HEAP16[$141>>1]|0;
      $251 = $250&65535;
      $252 = ($249|0)<($251|0);
      if ($252) {
       $$3238278 = $249;$243 = $251;
      } else {
       break;
      }
     }
    }
   }
   $253 = HEAP16[$142>>1]|0;
   $254 = ($253<<16>>16)==(0);
   if (!($254)) {
    $255 = (($84) + ($$2242<<1)|0);
    $256 = HEAP32[$4>>2]|0;
    $257 = HEAP16[$255>>1]|0;
    _lily_u16_write_1($256,$257);
   }
   $258 = HEAP16[$139>>1]|0;
   $259 = ($258<<16>>16)==(0);
   if (!($259)) {
    $262 = $258&65535;
    $263 = (($262) + ($$0249))|0;
    $$4239280 = $$0249;
    while(1) {
     $264 = (($84) + ($$4239280<<1)|0);
     $265 = HEAP16[$264>>1]|0;
     $266 = $265&65535;
     $267 = (($83) + ($266<<1)|0);
     $268 = HEAP16[$267>>1]|0;
     $269 = ($268<<16>>16)==(-1);
     if (!($269)) {
      $270 = HEAP32[$4>>2]|0;
      _lily_u16_write_4($270,55,$268,$265,$13);
     }
     $271 = (($$4239280) + 1)|0;
     $272 = ($271|0)<($263|0);
     if ($272) {
      $$4239280 = $271;
     } else {
      break;
     }
    }
   }
   $260 = (_lily_ci_next($3)|0);
   $261 = ($260|0)==(0);
   if ($261) {
    break;
   } else {
    $$0245286 = $$1246;$$0247285 = $$1248;
   }
  }
 }
 $273 = $123 & 65535;
 $274 = HEAP32[$0>>2]|0;
 $275 = ((($274)) + 4|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = ($273>>>0)<($276>>>0);
 if (!($277)) {
  $$lcssa = $275;
  HEAP32[$$lcssa>>2] = $125;
  STACKTOP = sp;return;
 }
 $278 = ($125>>>0)<($273>>>0);
 $$0243266 = $273;$280 = $274;
 while(1) {
  $279 = HEAP32[$280>>2]|0;
  $281 = (($279) + ($$0243266<<1)|0);
  $282 = HEAP16[$281>>1]|0;
  $283 = $282&65535;
  $284 = HEAP32[$4>>2]|0;
  $285 = HEAP32[$284>>2]|0;
  $286 = (($285) + ($283<<1)|0);
  $287 = HEAP16[$286>>1]|0;
  $288 = $287&65535;
  L91: do {
   if ($278) {
    $$0234265 = $125;
    while(1) {
     $289 = (($279) + ($$0234265<<1)|0);
     $290 = HEAP16[$289>>1]|0;
     $291 = ($287<<16>>16)==($290<<16>>16);
     if ($291) {
      break;
     }
     $310 = (($$0234265) + 2)|0;
     $311 = ($310|0)<($273|0);
     if ($311) {
      $$0234265 = $310;
     } else {
      break L91;
     }
    }
    $292 = (_count_transforms($0,$288)|0);
    $293 = $292 << 2;
    $294 = HEAP32[$0>>2]|0;
    $295 = HEAP32[$294>>2]|0;
    $296 = (($$0234265) + 1)|0;
    $297 = (($295) + ($296<<1)|0);
    $298 = HEAP16[$297>>1]|0;
    $299 = $298&65535;
    $300 = (($$0243266) + 1)|0;
    $301 = (($295) + ($300<<1)|0);
    $302 = HEAP16[$301>>1]|0;
    $303 = $302&65535;
    $sum = (($293) + ($283))|0;
    $304 = (($299) - ($sum))|0;
    $305 = (($304) + ($303))|0;
    $306 = $305&65535;
    $307 = HEAP32[$4>>2]|0;
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + ($283<<1)|0);
    HEAP16[$309>>1] = $306;
   }
  } while(0);
  $312 = (($$0243266) + 2)|0;
  $313 = HEAP32[$0>>2]|0;
  $314 = ((($313)) + 4|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = ($312>>>0)<($315>>>0);
  if ($316) {
   $$0243266 = $312;$280 = $313;
  } else {
   $$lcssa = $314;
   break;
  }
 }
 HEAP32[$$lcssa>>2] = $125;
 STACKTOP = sp;return;
}
function _iter_for_first_line($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1&65535;
 $7 = ((($4)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 _lily_ci_init($2,$5,$6,$9);
 $10 = ((($2)) + 22|0);
 while(1) {
  $11 = (_lily_ci_next($2)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   label = 5;
   break;
  }
  $13 = HEAP16[$10>>1]|0;
  $14 = ($13<<16>>16)==(0);
  if (!($14)) {
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($2)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ((($2)) + 8|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = $13&65535;
 $22 = (($17) - ($21))|0;
 $23 = (($22) + ($20))|0;
 $24 = HEAP32[$2>>2]|0;
 $25 = (($24) + ($23<<1)|0);
 $26 = HEAP16[$25>>1]|0;
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _setup_for_transform($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06673 = 0, $$06872 = 0, $$071 = 0, $$1 = 0, $$16770 = 0, $$169 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $exitcond = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 24|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)<(0);
 $15 = ($10>>>0)<($6>>>0);
 $16 = ($13|0)==(0);
 $17 = $16 & $15;
 $18 = $14 | $17;
 $19 = $6 << 1;
 if ($18) {
  $20 = ((($0)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_lily_realloc($21,$19)|0);
  HEAP32[$20>>2] = $22;
  $23 = HEAP32[$3>>2]|0;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $7;
  $27 = $26;
  HEAP32[$27>>2] = $25;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = 0;
 }
 $30 = ((($0)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 _memset(($31|0),-1,($19|0))|0;
 $32 = HEAP32[$3>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&65535;
 $37 = ((($0)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  return;
 }
 $42 = ((($33)) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 10|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = (($46) + 65535)|0;
 $48 = ((($0)) + 62|0);
 $49 = $47 & 65535;
 $50 = ((($0)) + 12|0);
 $$06673 = 0;$$06872 = 0;$52 = $38;
 while(1) {
  $51 = HEAP32[$52>>2]|0;
  $53 = $$06673 | 1;
  $54 = (($51) + ($53<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = HEAP16[$48>>1]|0;
  $57 = ($55<<16>>16)==($56<<16>>16);
  if ($57) {
   $58 = (($51) + ($$06673<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = ($60>>>0)<($49>>>0);
   $62 = (($$06673|0) / 2)&-1;
   $63 = $62&65535;
   if ($61) {
    $64 = HEAP32[$50>>2]|0;
    _lily_u16_write_4($64,55,$63,$59,$36);
   }
   $65 = HEAP32[$30>>2]|0;
   $66 = (($65) + ($60<<1)|0);
   HEAP16[$66>>1] = $63;
   $67 = (($$06872) + 1)|0;
   $68 = HEAP32[$37>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + ($53<<1)|0);
   HEAP16[$70>>1] = -1;
   $$169 = $67;
  } else {
   $$169 = $$06872;
  }
  $71 = (($$06673) + 2)|0;
  $72 = HEAP32[$37>>2]|0;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($71>>>0)<($74>>>0);
  if ($75) {
   $$06673 = $71;$$06872 = $$169;$52 = $72;
  } else {
   break;
  }
 }
 $76 = ($2|0)==(0);
 $77 = ($$169|0)!=(0);
 $or$cond = $76 & $77;
 if (!($or$cond)) {
  return;
 }
 $78 = (($$169) + 1)|0;
 $79 = $78 << 1;
 $80 = (_lily_malloc($79)|0);
 $81 = $78&65535;
 HEAP16[$80>>1] = $81;
 $82 = ($6|0)>(0);
 if ($82) {
  $83 = HEAP32[$30>>2]|0;
  $$071 = 1;$$16770 = 0;
  while(1) {
   $84 = (($83) + ($$16770<<1)|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = ($85<<16>>16)==(-1);
   if ($86) {
    $$1 = $$071;
   } else {
    $87 = (($$071) + 1)|0;
    $88 = (($80) + ($$071<<1)|0);
    $89 = $$16770&65535;
    HEAP16[$88>>1] = $89;
    $$1 = $87;
   }
   $90 = (($$16770) + 1)|0;
   $exitcond = ($90|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$071 = $$1;$$16770 = $90;
   }
  }
 }
 $91 = ((($1)) + 16|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 8|0);
 HEAP32[$93>>2] = $80;
 return;
}
function _maybe_add_jump($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>($1|0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $$02023 = $1;
   while(1) {
    $7 = (($6) + ($$02023<<1)|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = $8&65535;
    $10 = ($9|0)>($2|0);
    if ($10) {
     break;
    }
    $not$ = ($9|0)==($2|0);
    if ($not$) {
     label = 8;
     break;
    }
    $12 = (($$02023) + 2)|0;
    $13 = ($12|0)<($4|0);
    if ($13) {
     $$02023 = $12;
    } else {
     break L1;
    }
   }
   if ((label|0) == 8) {
    return;
   }
   _lily_u16_inject($0,$$02023,0);
   $11 = $2&65535;
   _lily_u16_inject($0,$$02023,$11);
   return;
  }
 } while(0);
 $14 = $2&65535;
 _lily_u16_write_2($0,$14,0);
 return;
}
function _count_transforms($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$029 = 0, $$032 = 0, $$1$ = 0, $$131 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1&65535;
 $7 = ((($4)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&65535;
 _lily_ci_init($2,$5,$6,$9);
 (_lily_ci_next($2)|0);
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($2)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = (($10) + ($15<<1)|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = (($15) + 1)|0;
 $19 = ($17<<16>>16)==(30);
 if ($19) {
  $20 = (($10) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($12) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $not$30 = ($24<<16>>16)!=(-1);
  $$ = $not$30&1;
  $$029 = $$;
 } else {
  $$029 = 0;
 }
 $25 = ((($2)) + 16|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($26<<16>>16)==(0);
 if ($27) {
  $$3 = $$029;
  STACKTOP = sp;return ($$3|0);
 }
 $28 = ((($2)) + 14|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = ((($2)) + 12|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($33) + ($18))|0;
 $35 = (($34) + ($30))|0;
 $36 = HEAP16[$25>>1]|0;
 $37 = $36&65535;
 $$032 = 0;$$131 = $$029;
 while(1) {
  $38 = (($35) + ($$032))|0;
  $39 = (($10) + ($38<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = (($12) + ($41<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $not$ = ($43<<16>>16)!=(-1);
  $44 = $not$&1;
  $$1$ = (($44) + ($$131))|0;
  $45 = (($$032) + 1)|0;
  $46 = ($45|0)<($37|0);
  if ($46) {
   $$032 = $45;$$131 = $$1$;
  } else {
   $$3 = $$1$;
   break;
  }
 }
 STACKTOP = sp;return ($$3|0);
}
function _lily_emit_leave_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = ((($0)) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  _lily_raise_syn($7,18084,$vararg_buffer);
  // unreachable;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($8)) + 13|0);
 $10 = HEAP8[$9>>0]|0;
 switch ($10<<24>>24) {
 case 3: case 5:  {
  $11 = ((($8)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) - ($16))|0;
  $18 = $17&65535;
  _lily_u16_write_2($14,23,$18);
  break;
 }
 case 9:  {
  $19 = ((($8)) + 8|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = ((($0)) + 32|0);
  HEAP16[$21>>1] = $20;
  label = 7;
  break;
 }
 case 6: case 7: case 8:  {
  $22 = ((($0)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (_lily_u16_pop($25)|0);
  $27 = $26&65535;
  $28 = (($24) + ($27<<1)|0);
  HEAP16[$28>>1] = 0;
  $cond = ($10<<24>>24)==(8);
  if ($cond) {
   label = 7;
  }
  break;
 }
 case 2:  {
  label = 7;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 7) {
  $29 = ((($8)) + 12|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 & 2;
  $32 = ($31<<24>>24)==(0);
  if (!($32)) {
   $33 = ((($8)) + 24|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($0)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($34|0)==($38|0);
   if ($39) {
    $40 = HEAP32[$1>>2]|0;
    $41 = ((($40)) + 44|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 24|0);
    HEAP32[$43>>2] = $38;
   }
  }
 }
 $44 = ((($8)) + 4|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 _write_patches_since($0,$46);
 $47 = HEAP32[$1>>2]|0;
 $48 = ((($47)) + 44|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$1>>2] = $49;
 STACKTOP = sp;return;
}
function _lily_emit_change_block_to($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 13|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($3)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($7|0)==($11|0);
 if (!($12)) {
  $13 = ((($3)) + 12|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 & -3;
  HEAP8[$13>>0] = $15;
 }
 $$off = (($1) + -7)|0;
 $16 = ($$off>>>0)<(2);
 L4: do {
  if ($16) {
   switch ($5<<24>>24) {
   case 8:  {
    $17 = ((($0)) + 72|0);
    $18 = HEAP32[$17>>2]|0;
    _lily_raise_syn($18,18108,$vararg_buffer);
    // unreachable;
    break;
   }
   case 6:  {
    $19 = HEAP32[$8>>2]|0;
    _lily_u16_write_1($19,50);
    break L4;
    break;
   }
   default: {
    break L4;
   }
   }
  }
 } while(0);
 $20 = HEAP32[$6>>2]|0;
 $21 = HEAP32[$8>>2]|0;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 if ($24) {
  $$0 = -1;
 } else {
  _lily_u16_write_2($21,23,1);
  $25 = HEAP32[$8>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  $$0 = $28;
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = (_lily_u16_pop($29)|0);
 $31 = $30&65535;
 $32 = ($30<<16>>16)==(0);
 if (!($32)) {
  $33 = HEAP32[$8>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ((($33)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) - ($31))|0;
  $41 = (($40) + ($39))|0;
  $42 = $41&65535;
  HEAP16[$35>>1] = $42;
 }
 $43 = ($$0|0)==(-1);
 if ($43) {
  $46 = HEAP32[$2>>2]|0;
  $47 = ((($46)) + 13|0);
  $48 = $1&255;
  HEAP8[$47>>0] = $48;
  STACKTOP = sp;return;
 }
 $44 = HEAP32[$0>>2]|0;
 $45 = $$0&65535;
 _lily_u16_write_1($44,$45);
 $46 = HEAP32[$2>>2]|0;
 $47 = ((($46)) + 13|0);
 $48 = $1&255;
 HEAP8[$47>>0] = $48;
 STACKTOP = sp;return;
}
function _lily_emit_decompose($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 6|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 & 128;
 $11 = ($10<<16>>16)==(0);
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ((($0)) + 68|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18&65535;
 if ($11) {
  _lily_u16_write_4($13,0,$15,$3,$19);
  return;
 } else {
  $20 = $2&65535;
  _lily_u16_write_5($13,47,$20,$15,$3,$19);
  return;
 }
}
function _lily_emit_is_duplicate_case($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$019 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($0)) + 34|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($3&65535)<($5&65535);
 if (!($6)) {
  _grow_match_cases($0);
 }
 $7 = ((($0)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ((($8)) + 8|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = HEAP16[$2>>1]|0;
 $15 = ($13&65535)<($14&65535);
 if (!($15)) {
  $$019 = 0;
  return ($$019|0);
 }
 $16 = $13&65535;
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $$020 = $16;
 while(1) {
  $23 = (($18) + ($$020<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==($11|0);
  $21 = (($$020) + 1)|0;
  if ($25) {
   $$019 = 1;
   label = 7;
   break;
  }
  $19 = HEAP16[$2>>1]|0;
  $20 = $19&65535;
  $22 = ($21|0)<($20|0);
  if ($22) {
   $$020 = $21;
  } else {
   $$019 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$019|0);
 }
 return (0)|0;
}
function _grow_match_cases($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 34|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = $3 << 1;
 $5 = $4&65535;
 HEAP16[$1>>1] = $5;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3 << 3;
 $9 = $8 & 262136;
 $10 = (_lily_realloc($7,$9)|0);
 HEAP32[$6>>2] = $10;
 return;
}
function _lily_emit_write_match_case($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 8|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 32|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (($7) + ($10<<2)|0);
 HEAP32[$11>>2] = $5;
 $12 = (($9) + 1)<<16>>16;
 HEAP16[$8>>1] = $12;
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 _lily_u16_write_4($14,25,$4,$16,3);
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$13>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 65535)|0;
 $22 = $21&65535;
 _lily_u16_write_1($17,$22);
 return;
}
function _lily_emit_change_match_branch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ((($0)) + 32|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($4<<16>>16)==($6<<16>>16);
 if ($7) {
  return;
 }
 $8 = ((($2)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($9|0)==($13|0);
 if (!($14)) {
  $15 = ((($2)) + 12|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & -3;
  HEAP8[$15>>0] = $17;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (_lily_u16_pop($18)|0);
 $20 = $19&65535;
 $21 = HEAP32[$10>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($20<<1)|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 _lily_u16_write_2($21,23,1);
 $26 = HEAP32[$0>>2]|0;
 $27 = HEAP32[$10>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 65535)|0;
 $31 = $30&65535;
 _lily_u16_write_1($26,$31);
 $32 = HEAP32[$10>>2]|0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($25) - ($20))|0;
 $36 = (($35) + ($34))|0;
 $37 = $36&65535;
 $38 = HEAP32[$32>>2]|0;
 $39 = (($38) + ($20<<1)|0);
 HEAP16[$39>>1] = $37;
 return;
}
function _lily_emit_eval_match_expr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 _eval_enforce_value($0,$2,0,18140);
 $5 = ((($0)) + 32|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($4)) + 8|0);
 HEAP16[$7>>1] = $6;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)==(8);
 if ($15) {
  $16 = HEAP32[629]|0;
  $17 = (_get_storage($0,$16)|0);
  $18 = ((($0)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$2>>2]|0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = ((($17)) + 8|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = ((($2)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26&65535;
  _lily_u16_write_5($19,47,0,$22,$24,$27);
  HEAP32[$2>>2] = $17;
  $34 = HEAP32[$0>>2]|0;
  _lily_u16_write_1($34,0);
  STACKTOP = sp;return;
 }
 $28 = ((($12)) + 6|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29 & 4224;
 $31 = ($30<<16>>16)==(4096);
 if ($31) {
  $32 = ((($0)) + 72|0);
  $33 = HEAP32[$32>>2]|0;
  _lily_raise_syn($33,18171,$vararg_buffer);
  // unreachable;
 } else {
  $34 = HEAP32[$0>>2]|0;
  _lily_u16_write_1($34,0);
  STACKTOP = sp;return;
 }
}
function _eval_enforce_value($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _eval_tree($0,$1,$2);
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 72|0);
  $10 = HEAP32[$9>>2]|0;
  _lily_raise_syn($10,$3,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _lily_emit_new_proto($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $strlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if ($10) {
  _grow_protos($5);
 }
 $11 = (_lily_malloc(20)|0);
 $12 = ($2|0)==(0|0);
 do {
  if ($12) {
   $22 = (_strlen($3)|0);
   $23 = (($22) + 1)|0;
   $24 = (_lily_malloc($23)|0);
   (_strcpy($24,$3)|0);
   $$0 = $24;
  } else {
   $13 = HEAP8[$3>>0]|0;
   $14 = ($13<<24>>24)==(60);
   $15 = (_strlen($2)|0);
   if ($14) {
    $20 = (($15) + 1)|0;
    $21 = (_lily_malloc($20)|0);
    (_strcpy($21,$2)|0);
    $$0 = $21;
    break;
   } else {
    $16 = (_strlen($3)|0);
    $17 = (($15) + 2)|0;
    $18 = (($17) + ($16))|0;
    $19 = (_lily_malloc($18)|0);
    (_strcpy($19,$2)|0);
    $strlen = (_strlen($19)|0);
    $endptr = (($19) + ($strlen)|0);
    HEAP8[$endptr>>0]=46&255;HEAP8[$endptr+1>>0]=46>>8;
    (_strcat($19,$3)|0);
    $$0 = $19;
    break;
   }
  }
 } while(0);
 HEAP32[$11>>2] = $1;
 $25 = ((($11)) + 4|0);
 HEAP32[$25>>2] = $$0;
 $26 = ((($11)) + 8|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($11)) + 12|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($11)) + 16|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$5>>2]|0;
 $30 = HEAP32[$6>>2]|0;
 $31 = (($29) + ($30<<2)|0);
 HEAP32[$31>>2] = $11;
 $32 = (($30) + 1)|0;
 HEAP32[$6>>2] = $32;
 return ($11|0);
}
function _grow_protos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 $4 = HEAP32[$0>>2]|0;
 $5 = $2 << 3;
 $6 = (_lily_realloc($4,$5)|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$1>>2] = $3;
 return;
}
function _lily_emit_eval_expr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 _eval_tree($0,$2,0);
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _lily_emit_eval_expr_to_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$1>>2]|0;
 _eval_tree($0,$3,0);
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(1);
 if ($14) {
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ((($2)) + 8|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = ((($3)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25&65535;
  _lily_u16_write_4($18,1,$21,$23,$26);
  STACKTOP = sp;return;
 } else {
  $15 = ((($0)) + 72|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _lily_raise_syn($16,18227,$vararg_buffer);
  // unreachable;
 }
}
function _lily_emit_eval_condition($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 13|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($2)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $$off = (($8) + -22)<<24>>24;
 $switch = ($$off&255)<(3);
 if ($switch) {
  $9 = ((($2)) + 24|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==(0);
  if (!($11)) {
   $28 = ($6<<24>>24)==(4);
   if ($28) {
    $30 = ((($0)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($4)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) - ($33))|0;
    $37 = $36&65535;
    _lily_u16_write_2($31,23,$37);
    return;
   } else {
    $29 = HEAP32[$0>>2]|0;
    _lily_u16_write_1($29,0);
    return;
   }
  }
 }
 _eval_enforce_value($0,$2,0,18271);
 $12 = HEAP32[$2>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 _ensure_valid_condition_type($0,$14);
 $15 = ($6<<24>>24)==(4);
 if ($15) {
  $16 = ((($0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$3>>2]|0;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$2>>2]|0;
  $24 = ((($23)) + 8|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = (($22) - ($19))|0;
  $27 = $26&65535;
  _lily_u16_write_4($17,24,1,$25,$27);
  return;
 } else {
  _emit_jump_if($0,$2,0);
  return;
 }
}
function _ensure_valid_condition_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP16[$4>>1]|0;
 switch ($5<<16>>16) {
 case 1: case 2: case 3: case 6: case 9:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $6 = ((($0)) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  _lily_raise_syn($7,18308,$vararg_buffer);
  // unreachable;
 }
 }
}
function _lily_emit_eval_lambda_body($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = ((($2)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;
 }
 $7 = HEAP32[$1>>2]|0;
 _eval_tree($0,$7,$$0);
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($9)) + 8|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($8)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 _lily_u16_write_3($12,31,$14,$17);
 $18 = HEAP32[$11>>2]|0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 24|0);
 HEAP32[$23>>2] = $20;
 return;
}
function _lily_emit_eval_return($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP32[628]|0;
 $4 = ($3|0)==($2|0);
 if ($4) {
  $36 = ((($0)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  _write_pop_try_blocks_up_to($0,$37);
  $38 = ((($0)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ((($0)) + 68|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42&65535;
  _lily_u16_write_2($39,32,$43);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 _eval_enforce_value($0,$5,$2,18342);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($2|0);
 if (!($9)) {
  $10 = (_type_matchup($0,$2,$5)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = ((($5)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($0)) + 72|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 12|0);
   HEAP32[$16>>2] = $13;
   $17 = HEAP32[$5>>2]|0;
   $18 = ((($17)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer>>2] = $2;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $19;
   _lily_raise_syn($15,18376,$vararg_buffer);
   // unreachable;
  }
 }
 $20 = ((($0)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 _write_pop_try_blocks_up_to($0,$21);
 $22 = ((($0)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ((($5)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 _lily_u16_write_3($23,31,$26,$29);
 $30 = HEAP32[$22>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 56|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 24|0);
 HEAP32[$35>>2] = $32;
 STACKTOP = sp;return;
}
function _lily_emit_raise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 _eval_enforce_value($0,$2,0,18421);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_lily_class_greater_eq_id(19,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($0)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($7)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  _lily_raise_syn($11,18454,$vararg_buffer);
  // unreachable;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = ((($2)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20&65535;
  _lily_u16_write_3($15,53,$18,$21);
  $22 = HEAP32[$14>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($0)) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  HEAP32[$27>>2] = $24;
  STACKTOP = sp;return;
 }
}
function _lily_reset_main($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _lily_prepare_main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 _lily_u16_write_1($7,59);
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10&65535;
 $12 = ((($1)) + 10|0);
 HEAP16[$12>>1] = $11;
 $13 = HEAP32[$6>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($1)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $14;
 $19 = $5&65535;
 $20 = ((($1)) + 14|0);
 HEAP16[$20>>1] = $19;
 return;
}
function _lily_new_msgbuf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(12)|0);
 $2 = (_lily_malloc($0)|0);
 HEAP32[$1>>2] = $2;
 HEAP8[$2>>0] = 0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = $0;
 return ($1|0);
}
function _lily_free_msgbuf($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_mb_raw($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _lily_mb_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 1)|0;
 $6 = (($5) + ($4))|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  _resize_msgbuf($0,$6);
 }
 $10 = HEAP32[$0>>2]|0;
 (_strcat($10,$1)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = (($11) + ($2))|0;
 HEAP32[$3>>2] = $12;
 return;
}
function _resize_msgbuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($1>>>0);
 if ($4) {
  $6 = $3;
  while(1) {
   $5 = $6 << 1;
   $7 = ($5>>>0)<($1>>>0);
   if ($7) {
    $6 = $5;
   } else {
    break;
   }
  }
  HEAP32[$2>>2] = $5;
  $$lcssa = $5;
 } else {
  $$lcssa = $3;
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (_lily_realloc($8,$$lcssa)|0);
 HEAP32[$0>>2] = $9;
 return;
}
function _lily_mb_escape_add_str($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lily_mb_add_char($0,34);
 $2 = (_strlen($1)|0);
 _add_escaped_raw($0,0,$1,$2);
 _lily_mb_add_char($0,34);
 return;
}
function _lily_mb_add_char($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP8[$2>>0] = $1;
 $3 = ((($2)) + 1|0);
 HEAP8[$3>>0] = 0;
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _add_escaped_raw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03639 = 0, $$03738 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0;
 var $or$cond41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ($1|0)==(0);
  $$03639 = 0;$$03738 = 0;
  while(1) {
   $6 = (($2) + ($$03738)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (_isprint($8)|0);
   $10 = ($9|0)!=(0);
   $11 = ($7<<24>>24)<(0);
   $or$cond = $5 & $11;
   $or$cond41 = $10 | $or$cond;
   if ($or$cond41) {
    $$1 = $$03639;
   } else {
    $12 = (_get_escape($7)|0);
    $13 = ($$03738|0)==($$03639|0);
    if (!($13)) {
     _lily_mb_add_slice($0,$2,$$03639,$$03738);
    }
    _lily_mb_add_char($0,92);
    $14 = ($12<<24>>24)==(0);
    if ($14) {
     _add_escaped_char($0,$7);
    } else {
     _lily_mb_add_char($0,$12);
    }
    $15 = (($$03738) + 1)|0;
    $$1 = $15;
   }
   $16 = (($$03738) + 1)|0;
   $exitcond = ($16|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$03639 = $$1;$$03738 = $16;
   }
  }
  $17 = ($$1|0)==($3|0);
  if (!($17)) {
   _lily_mb_add_slice($0,$2,$$1,$3);
  }
 }
 $18 = ($1|0)==(0);
 if ($18) {
  return;
 }
 _lily_mb_add_char($0,0);
 return;
}
function _get_escape($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0<<24>>24) {
 case 10:  {
  $$0 = 110;
  break;
 }
 case 13:  {
  $$0 = 114;
  break;
 }
 case 9:  {
  $$0 = 116;
  break;
 }
 case 39:  {
  $$0 = $0;
  break;
 }
 case 34:  {
  $$0 = $0;
  break;
 }
 case 92:  {
  $$0 = $0;
  break;
 }
 case 8:  {
  $$0 = 98;
  break;
 }
 case 7:  {
  $$0 = 97;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _lily_mb_add_slice($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3) - ($2))|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 1)|0;
 $8 = (($7) + ($6))|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  _resize_msgbuf($0,$8);
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 $14 = (($12) + ($13)|0);
 $15 = (($1) + ($2)|0);
 _memcpy(($14|0),($15|0),($4|0))|0;
 $16 = HEAP32[$5>>2]|0;
 $17 = (($16) + ($4))|0;
 HEAP32[$5>>2] = $17;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + ($17)|0);
 HEAP8[$19>>0] = 0;
 return;
}
function _add_escaped_char($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = $1&255;
 HEAP32[$vararg_buffer>>2] = $3;
 (_sprintf($2,18489,$vararg_buffer)|0);
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _lily_mb_flush($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 HEAP8[$2>>0] = 0;
 return ($0|0);
}
function _lily_mb_add_fmt_va($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$086$lcssa = 0, $$08693 = 0, $$094 = 0, $$1 = 0, $$288$ph = 0, $$3$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $arglist_current = 0;
 var $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded16 = 0, $expanded18 = 0, $expanded19 = 0, $expanded20 = 0, $expanded22 = 0, $expanded23 = 0, $expanded25 = 0, $expanded26 = 0;
 var $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded39 = 0, $expanded40 = 0, $expanded41 = 0, $expanded43 = 0, $expanded44 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded50 = 0, $expanded51 = 0, $expanded53 = 0, $expanded54 = 0;
 var $expanded55 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = (_strlen($1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 } else {
  $$08693 = 0;$$094 = 0;
 }
 L3: while(1) {
  $6 = (($1) + ($$094)|0);
  $7 = HEAP8[$6>>0]|0;
  switch ($7<<24>>24) {
  case 37:  {
   $8 = (($$094) + 1)|0;
   $9 = ($8|0)==($4|0);
   if ($9) {
    $$0$lcssa = $$094;$$086$lcssa = $$08693;
    break L3;
   }
   $10 = ($$094|0)==($$08693|0);
   if (!($10)) {
    _lily_mb_add_slice($0,$1,$$08693,$$094);
   }
   $11 = (($1) + ($8)|0);
   $12 = HEAP8[$11>>0]|0;
   switch ($12<<24>>24) {
   case 115:  {
    $arglist_current = HEAP32[$2>>2]|0;
    $13 = $arglist_current;
    $14 = ((0) + 4|0);
    $expanded16 = $14;
    $expanded = (($expanded16) - 1)|0;
    $15 = (($13) + ($expanded))|0;
    $16 = ((0) + 4|0);
    $expanded20 = $16;
    $expanded19 = (($expanded20) - 1)|0;
    $expanded18 = $expanded19 ^ -1;
    $17 = $15 & $expanded18;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $arglist_next = ((($18)) + 4|0);
    HEAP32[$2>>2] = $arglist_next;
    _lily_mb_add($0,$19);
    $$1 = $8;
    break;
   }
   case 100:  {
    $arglist_current2 = HEAP32[$2>>2]|0;
    $20 = $arglist_current2;
    $21 = ((0) + 4|0);
    $expanded23 = $21;
    $expanded22 = (($expanded23) - 1)|0;
    $22 = (($20) + ($expanded22))|0;
    $23 = ((0) + 4|0);
    $expanded27 = $23;
    $expanded26 = (($expanded27) - 1)|0;
    $expanded25 = $expanded26 ^ -1;
    $24 = $22 & $expanded25;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $arglist_next3 = ((($25)) + 4|0);
    HEAP32[$2>>2] = $arglist_next3;
    _add_int($0,$26);
    $$1 = $8;
    break;
   }
   case 99:  {
    $arglist_current5 = HEAP32[$2>>2]|0;
    $27 = $arglist_current5;
    $28 = ((0) + 4|0);
    $expanded30 = $28;
    $expanded29 = (($expanded30) - 1)|0;
    $29 = (($27) + ($expanded29))|0;
    $30 = ((0) + 4|0);
    $expanded34 = $30;
    $expanded33 = (($expanded34) - 1)|0;
    $expanded32 = $expanded33 ^ -1;
    $31 = $29 & $expanded32;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $arglist_next6 = ((($32)) + 4|0);
    HEAP32[$2>>2] = $arglist_next6;
    $34 = $33&255;
    _lily_mb_add_char($0,$34);
    $$1 = $8;
    break;
   }
   case 112:  {
    $arglist_current8 = HEAP32[$2>>2]|0;
    $35 = $arglist_current8;
    $36 = ((0) + 4|0);
    $expanded37 = $36;
    $expanded36 = (($expanded37) - 1)|0;
    $37 = (($35) + ($expanded36))|0;
    $38 = ((0) + 4|0);
    $expanded41 = $38;
    $expanded40 = (($expanded41) - 1)|0;
    $expanded39 = $expanded40 ^ -1;
    $39 = $37 & $expanded39;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $arglist_next9 = ((($40)) + 4|0);
    HEAP32[$2>>2] = $arglist_next9;
    HEAP32[$vararg_buffer>>2] = $41;
    (_snprintf($3,128,18494,$vararg_buffer)|0);
    _lily_mb_add($0,$3);
    $$1 = $8;
    break;
   }
   case 108:  {
    $42 = (($$094) + 2)|0;
    $43 = (($1) + ($42)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = ($44<<24>>24)==(100);
    if ($45) {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $46 = $arglist_current11;
     $47 = ((0) + 8|0);
     $expanded44 = $47;
     $expanded43 = (($expanded44) - 1)|0;
     $48 = (($46) + ($expanded43))|0;
     $49 = ((0) + 8|0);
     $expanded48 = $49;
     $expanded47 = (($expanded48) - 1)|0;
     $expanded46 = $expanded47 ^ -1;
     $50 = $48 & $expanded46;
     $51 = $50;
     $52 = $51;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $55 = (($52) + 4)|0;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($51)) + 8|0);
     HEAP32[$2>>2] = $arglist_next12;
     _add_int64($0,$54,$57);
     $$1 = $42;
    } else {
     $$1 = $8;
    }
    break;
   }
   case 37:  {
    _lily_mb_add_char($0,37);
    $$1 = $8;
    break;
   }
   default: {
    $$1 = $8;
   }
   }
   $58 = (($$1) + 1)|0;
   $$288$ph = $58;$$3$ph = $$1;
   break;
  }
  case 94:  {
   $59 = ($$094|0)==($$08693|0);
   if (!($59)) {
    _lily_mb_add_slice($0,$1,$$08693,$$094);
   }
   $60 = (($$094) + 1)|0;
   $61 = (($1) + ($60)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = ($62<<24>>24)==(84);
   if ($63) {
    $arglist_current14 = HEAP32[$2>>2]|0;
    $64 = $arglist_current14;
    $65 = ((0) + 4|0);
    $expanded51 = $65;
    $expanded50 = (($expanded51) - 1)|0;
    $66 = (($64) + ($expanded50))|0;
    $67 = ((0) + 4|0);
    $expanded55 = $67;
    $expanded54 = (($expanded55) - 1)|0;
    $expanded53 = $expanded54 ^ -1;
    $68 = $66 & $expanded53;
    $69 = $68;
    $70 = HEAP32[$69>>2]|0;
    $arglist_next15 = ((($69)) + 4|0);
    HEAP32[$2>>2] = $arglist_next15;
    _add_type($0,$70);
   }
   $71 = (($$094) + 2)|0;
   $$288$ph = $71;$$3$ph = $60;
   break;
  }
  default: {
   $$288$ph = $$08693;$$3$ph = $$094;
  }
  }
  $72 = (($$3$ph) + 1)|0;
  $73 = ($72>>>0)<($4>>>0);
  if ($73) {
   $$08693 = $$288$ph;$$094 = $72;
  } else {
   $$0$lcssa = $72;$$086$lcssa = $$288$ph;
   break;
  }
 }
 $74 = ($$0$lcssa|0)==($$086$lcssa|0);
 if ($74) {
  STACKTOP = sp;return;
 }
 _lily_mb_add_slice($0,$1,$$086$lcssa,$$0$lcssa);
 STACKTOP = sp;return;
}
function _add_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($2,18525,$vararg_buffer)|0);
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _add_int64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = $vararg_buffer;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 (_sprintf($3,18520,$vararg_buffer)|0);
 _lily_mb_add($0,$3);
 STACKTOP = sp;return;
}
function _add_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$05053 = 0, $$052 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _lily_mb_add($0,$5);
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(7);
 if (!($9)) {
  $55 = ((($6)) + 42|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = ($56<<16>>16)==(0);
  if ($57) {
   return;
  }
  $58 = ($8<<16>>16)==(-4);
  if (!($58)) {
   _lily_mb_add($0,18516);
  }
  $59 = ((($1)) + 10|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = ($60<<16>>16)==(0);
  if (!($61)) {
   $62 = ((($1)) + 16|0);
   $$05053 = 0;
   while(1) {
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($$05053<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    _add_type($0,$65);
    $66 = HEAP16[$59>>1]|0;
    $67 = $66&65535;
    $68 = (($67) + -1)|0;
    $69 = ($$05053|0)==($68|0);
    if (!($69)) {
     _lily_mb_add($0,18500);
    }
    $70 = (($$05053) + 1)|0;
    $71 = HEAP16[$59>>1]|0;
    $72 = $71&65535;
    $73 = ($70|0)<($72|0);
    if ($73) {
     $$05053 = $70;
    } else {
     break;
    }
   }
  }
  if ($58) {
   return;
  }
  _lily_mb_add($0,18518);
  return;
 }
 _lily_mb_add($0,18497);
 $10 = ((($1)) + 10|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11&65535)>(1);
 do {
  if ($12) {
   $13 = HEAP16[$10>>1]|0;
   $14 = $13&65535;
   $15 = (($14) + -1)|0;
   $16 = ($15|0)>(1);
   if ($16) {
    $17 = ((($1)) + 16|0);
    $$052 = 1;
    while(1) {
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + ($$052<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     _add_type($0,$20);
     _lily_mb_add($0,18500);
     $21 = (($$052) + 1)|0;
     $22 = HEAP16[$10>>1]|0;
     $23 = $22&65535;
     $24 = (($23) + -1)|0;
     $25 = ($21|0)<($24|0);
     if ($25) {
      $$052 = $21;
     } else {
      $$0$lcssa = $21;
      break;
     }
    }
   } else {
    $$0$lcssa = 1;
   }
   $26 = ((($1)) + 6|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 & 1;
   $29 = ($28<<16>>16)==(0);
   $30 = ((($1)) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($$0$lcssa<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   if ($29) {
    _add_type($0,$33);
    break;
   }
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($35)) + 8|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = ($37<<16>>16)==(-4);
   if ($38) {
    _lily_mb_add($0,18503);
    $39 = ((($33)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$43>>2]|0;
    _add_type($0,$44);
   } else {
    $45 = ((($33)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$46>>2]|0;
    _add_type($0,$47);
   }
   _lily_mb_add($0,18505);
  }
 } while(0);
 $48 = ((($1)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[628]|0;
 $52 = ($50|0)==($51|0);
 if (!($52)) {
  _lily_mb_add($0,18511);
  $53 = HEAP32[$48>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  _add_type($0,$54);
  _lily_mb_add($0,18509);
  return;
 }
 _lily_mb_add($0,18509);
 return;
}
function _lily_mb_add_fmt($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($0,$1,$2);
 STACKTOP = sp;return;
}
function _lily_mb_pos($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _lily_mb_sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 (_lily_mb_flush($0)|0);
 HEAP32[$2>>2] = $varargs;
 _lily_mb_add_fmt_va($0,$1,$2);
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _lily_mb_add_value($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(3);
 if ($4) {
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  _lily_mb_add($0,$8);
  return;
 } else {
  _add_value_to_msgbuf($1,$0,0,$2);
  return;
 }
}
function _add_value_to_msgbuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0121135 = 0, $$0123131 = 0, $$0124130 = 0, $$0126 = 0, $$0126127 = 0, $$0126129 = 0, $$1 = 0, $$1125$lcssa = 0, $$1125128 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $4 = sp;
 $5 = HEAP32[$3>>2]|0;
 $6 = $5 & 65536;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $$1 = $2;
  } else {
   $8 = ($2|0)==(0|0);
   if ($8) {
    $$1 = $4;
   } else {
    $9 = ((($3)) + 8|0);
    $$0121135 = $2;
    while(1) {
     $10 = ((($$0121135)) + 8|0);
     $11 = (_memcmp($10,$9,8)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      break;
     }
     $13 = HEAP32[$$0121135>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$1 = $4;
      break L1;
     } else {
      $$0121135 = $13;
     }
    }
    _lily_mb_add($1,18528);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $15 = HEAP16[$3>>1]|0;
 $16 = $15&65535;
 do {
  switch ($15<<16>>16) {
  case 6:  {
   $17 = ((($3)) + 8|0);
   $18 = $17;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   _add_boolean($1,$20);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $24 = ((($3)) + 8|0);
   $25 = $24;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 4)|0;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   _add_int64($1,$27,$30);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $31 = ((($3)) + 8|0);
   $32 = $31;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($32) + 4)|0;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = $34&255;
   _add_byte($1,$38);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $39 = ((($3)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   _add_double($1,$40);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $41 = ((($3)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   _lily_mb_escape_add_str($1,$44);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $45 = ((($3)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   _add_bytestring($1,$46);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $47 = ((($3)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   $$ = $51 ? 18534 : 21807;
   $52 = ((($48)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[$vararg_buffer>>2] = $$;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $55;
   _lily_mb_add_fmt($1,18544,$vararg_buffer);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   _add_list_like($0,$1,$$1,$3,18516,18518);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   _add_list_like($0,$1,$$1,$3,18560,18563);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $56 = ((($3)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   _lily_mb_add_char($1,91);
   $58 = ((($57)) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)>(0);
   if ($60) {
    $61 = ((($57)) + 16|0);
    $62 = ((($57)) + 12|0);
    $$0123131 = 0;$$0124130 = 0;
    while(1) {
     $63 = HEAP32[$61>>2]|0;
     $64 = (($63) + ($$0123131<<2)|0);
     $$0126127 = HEAP32[$64>>2]|0;
     $65 = ($$0126127|0)==(0|0);
     if ($65) {
      $$1125$lcssa = $$0124130;
     } else {
      $$0126129 = $$0126127;$$1125128 = $$0124130;
      while(1) {
       $66 = ((($$0126129)) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       _add_value_to_msgbuf($0,$1,$$1,$67);
       _lily_mb_add($1,18511);
       $68 = ((($$0126129)) + 20|0);
       $69 = HEAP32[$68>>2]|0;
       _add_value_to_msgbuf($0,$1,$$1,$69);
       $70 = HEAP32[$62>>2]|0;
       $71 = (($70) + -1)|0;
       $72 = ($$1125128|0)==($71|0);
       if (!($72)) {
        _lily_mb_add($1,18500);
       }
       $73 = (($$1125128) + 1)|0;
       $74 = ((($$0126129)) + 24|0);
       $$0126 = HEAP32[$74>>2]|0;
       $75 = ($$0126|0)==(0|0);
       if ($75) {
        $$1125$lcssa = $73;
        break;
       } else {
        $$0126129 = $$0126;$$1125128 = $73;
       }
      }
     }
     $76 = (($$0123131) + 1)|0;
     $77 = HEAP32[$58>>2]|0;
     $78 = ($76|0)<($77|0);
     if ($78) {
      $$0123131 = $76;$$0124130 = $$1125$lcssa;
     } else {
      break;
     }
    }
   }
   _lily_mb_add_char($1,93);
   STACKTOP = sp;return;
   break;
  }
  case 26:  {
   _lily_mb_add($1,18566);
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $79 = ((($3)) + 8|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)!=(0|0);
   $84 = $83 ? 18571 : 18576;
   HEAP32[$vararg_buffer2>>2] = $84;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $80;
   _lily_mb_add_fmt($1,18583,$vararg_buffer2);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $85 = HEAP32[$3>>2]|0;
   $86 = $85 & 2097152;
   $87 = ($86|0)==(0);
   $88 = ((($0)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ((($3)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   if ($87) {
    $105 = ((($91)) + 4|0);
    $106 = HEAP16[$105>>1]|0;
    $107 = $106&65535;
    $108 = (($89) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ((($109)) + 16|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$90>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $111;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $112;
    _lily_mb_add_fmt($1,18601,$vararg_buffer6);
    STACKTOP = sp;return;
   }
   $92 = (($89) + ($16<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 6|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97 & 1024;
   $99 = ($98<<16>>16)==(0);
   if (!($99)) {
    $100 = ((($95)) + 16|0);
    $101 = HEAP32[$100>>2]|0;
    _lily_mb_add($1,$101);
    _lily_mb_add_char($1,46);
   }
   $102 = ((($93)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   _lily_mb_add($1,$103);
   $104 = ($91|0)==(0|0);
   if ($104) {
    STACKTOP = sp;return;
   }
   _add_list_like($0,$1,$$1,$3,18599,18509);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _add_boolean($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  _lily_mb_add($0,18634);
  return;
 } else {
  _lily_mb_add($0,18640);
  return;
 }
}
function _add_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = (_get_escape($1)|0);
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = $3 << 24 >> 24;
  HEAP32[$vararg_buffer>>2] = $5;
  (_sprintf($2,18615,$vararg_buffer)|0);
  _lily_mb_add($0,$2);
  STACKTOP = sp;return;
 }
 $6 = $1 << 24 >> 24;
 $7 = (_isprint($6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $1&255;
  HEAP32[$vararg_buffer4>>2] = $9;
  (_sprintf($2,18626,$vararg_buffer4)|0);
  _lily_mb_add($0,$2);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $6;
  (_sprintf($2,18621,$vararg_buffer1)|0);
  _lily_mb_add($0,$2);
  STACKTOP = sp;return;
 }
}
function _add_double($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAPF64[$vararg_buffer>>3] = $1;
 (_sprintf($2,18612,$vararg_buffer)|0);
 _lily_mb_add($0,$2);
 STACKTOP = sp;return;
}
function _add_bytestring($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _add_escaped_raw($0,1,$3,$5);
 return;
}
function _add_list_like($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$lcssa28 = 0, $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 _lily_mb_add($1,$4);
 $12 = ($11|0)==(0);
 if ($12) {
  _lily_mb_add($1,$5);
  return;
 }
 $13 = (($11) + -1)|0;
 $14 = ($11|0)>(1);
 if ($14) {
  $$027 = 0;
  while(1) {
   $15 = (($9) + ($$027<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   _add_value_to_msgbuf($0,$1,$2,$16);
   _lily_mb_add($1,18500);
   $17 = (($$027) + 1)|0;
   $exitcond = ($17|0)==($13|0);
   if ($exitcond) {
    $$0$lcssa28 = $13;
    break;
   } else {
    $$027 = $17;
   }
  }
 } else {
  $18 = ($11|0)==(0);
  if ($18) {
   _lily_mb_add($1,$5);
   return;
  } else {
   $$0$lcssa28 = 0;
  }
 }
 $19 = (($9) + ($$0$lcssa28<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 _add_value_to_msgbuf($0,$1,$2,$20);
 _lily_mb_add($1,$5);
 return;
}
function _lily_mb_html_escape($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$041 = 0, $$042 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_lily_mb_flush($0)|0);
 $2 = $1;
 $3 = $1;
 $4 = $1;
 $$0 = $1;$$041 = 0;
 L1: while(1) {
  $5 = HEAP8[$$0>>0]|0;
  switch ($5<<24>>24) {
  case 0:  {
   break L1;
   break;
  }
  case 38:  {
   $6 = $$0;
   $7 = (($6) - ($2))|0;
   _lily_mb_add_slice($0,$1,$$041,$7);
   _lily_mb_add($0,18645);
   $8 = (($7) + 1)|0;
   $$1 = $8;
   break;
  }
  case 60:  {
   $9 = $$0;
   $10 = (($9) - ($3))|0;
   _lily_mb_add_slice($0,$1,$$041,$10);
   _lily_mb_add($0,18651);
   $11 = (($10) + 1)|0;
   $$1 = $11;
   break;
  }
  case 62:  {
   $12 = $$0;
   $13 = (($12) - ($4))|0;
   _lily_mb_add_slice($0,$1,$$041,$13);
   _lily_mb_add($0,18656);
   $14 = (($13) + 1)|0;
   $$1 = $14;
   break;
  }
  default: {
   $$1 = $$041;
  }
  }
  $15 = ((($$0)) + 1|0);
  $$0 = $15;$$041 = $$1;
 }
 $16 = ($$041|0)==(0);
 if ($16) {
  $$042 = $1;
  return ($$042|0);
 }
 $17 = $$0;
 $18 = $1;
 $19 = (($17) - ($18))|0;
 _lily_mb_add_slice($0,$1,$$041,$19);
 $20 = HEAP32[$0>>2]|0;
 $$042 = $20;
 return ($$042|0);
}
function _lily_random_loader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 2:  {
  $$0 = 109;
  break;
 }
 case 3:  {
  $$0 = 110;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _lily_random_Random_between($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_lily_arg_generic($0,0)|0);
 $2 = (_gen_int($1)|0);
 $3 = tempRet0;
 $4 = (_lily_arg_integer($0,1)|0);
 $5 = tempRet0;
 $6 = (_lily_arg_integer($0,2)|0);
 $7 = tempRet0;
 $8 = ($7|0)>($5|0);
 $9 = ($6>>>0)>($4>>>0);
 $10 = ($7|0)==($5|0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if ($12) {
  $13 = (_i64Subtract(1,0,($4|0),($5|0))|0);
  $14 = tempRet0;
  $15 = (_i64Add(($13|0),($14|0),($6|0),($7|0))|0);
  $16 = tempRet0;
  $17 = (___uremdi3(($2|0),($3|0),($15|0),($16|0))|0);
  $18 = tempRet0;
  $19 = (_i64Add(($17|0),($18|0),($4|0),($5|0))|0);
  $20 = tempRet0;
  _lily_return_integer($0,$19,$20);
  STACKTOP = sp;return;
 } else {
  _lily_ValueError($0,18753,$vararg_buffer);
  // unreachable;
 }
}
function _lily_random_Random_new($0) {
 $0 = $0|0;
 var $$02324 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $uglygep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_cid_at($0,0)|0);
 $2 = (_lily_push_foreign($0,$1,111,2520)|0);
 $3 = (_lily_arg_count($0)|0);
 $4 = ($3|0)==(2);
 if ($4) {
  $5 = (_lily_arg_integer($0,1)|0);
  $6 = tempRet0;
  $7 = ($6|0)<(0);
  $8 = ($5>>>0)<(1);
  $9 = ($6|0)==(0);
  $10 = $9 & $8;
  $11 = $7 | $10;
  if ($11) {
   label = 3;
  } else {
   $18 = $5;$21 = $6;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $12 = (_time((0|0))|0);
  $13 = ($12|0)<(0);
  $14 = $13 << 31 >> 31;
  $18 = $12;$21 = $14;
 }
 $15 = ((($2)) + 16|0);
 $16 = $15;
 $17 = $16;
 HEAP32[$17>>2] = $18;
 $19 = (($16) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $21;
 $uglygep = ((($2)) + 16|0);
 $22 = $uglygep;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $$02324 = 1;$28 = $24;$29 = $27;
 while(1) {
  $30 = (_bitshift64Lshr(($28|0),($29|0),62)|0);
  $31 = tempRet0;
  $32 = $30 ^ $28;
  $33 = $31 ^ $29;
  $34 = (___muldi3(($32|0),($33|0),1284865837,1481765933)|0);
  $35 = tempRet0;
  $36 = ($$02324|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = (_i64Add(($34|0),($35|0),($$02324|0),($37|0))|0);
  $39 = tempRet0;
  $40 = (((($2)) + 16|0) + ($$02324<<3)|0);
  $41 = $40;
  $42 = $41;
  HEAP32[$42>>2] = $38;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $39;
  $45 = (($$02324) + 1)|0;
  $exitcond = ($45|0)==(312);
  if ($exitcond) {
   break;
  } else {
   $$02324 = $45;$28 = $38;$29 = $39;
  }
 }
 $46 = ((($2)) + 2512|0);
 HEAP32[$46>>2] = 312;
 _lily_return_top($0);
 return;
}
function _destroy_Random($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _gen_int($0) {
 $0 = $0|0;
 var $$046 = 0, $$145 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2512|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(311);
 if ($3) {
  $$046 = 0;
  while(1) {
   $4 = (((($0)) + 16|0) + ($$046<<3)|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -2147483648;
   $12 = (($$046) + 1)|0;
   $13 = (((($0)) + 16|0) + ($12<<3)|0);
   $14 = $13;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = $16 & 2147483646;
   $21 = $20 | $11;
   $22 = (($$046) + 156)|0;
   $23 = (((($0)) + 16|0) + ($22<<3)|0);
   $24 = $23;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (_bitshift64Lshr(($21|0),($10|0),1)|0);
   $31 = tempRet0;
   $32 = $16 & 1;
   $33 = (768 + ($32<<3)|0);
   $34 = $33;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $36 ^ $26;
   $41 = $39 ^ $29;
   $42 = $40 ^ $30;
   $43 = $41 ^ $31;
   $44 = $4;
   $45 = $44;
   HEAP32[$45>>2] = $42;
   $46 = (($44) + 4)|0;
   $47 = $46;
   HEAP32[$47>>2] = $43;
   $exitcond47 = ($12|0)==(156);
   if ($exitcond47) {
    $$145 = 156;
    break;
   } else {
    $$046 = $12;
   }
  }
  while(1) {
   $48 = (((($0)) + 16|0) + ($$145<<3)|0);
   $49 = $48;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) + 4)|0;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = $51 & -2147483648;
   $56 = (($$145) + 1)|0;
   $57 = (((($0)) + 16|0) + ($56<<3)|0);
   $58 = $57;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = $60 & 2147483646;
   $65 = $64 | $55;
   $66 = (($$145) + -156)|0;
   $67 = (((($0)) + 16|0) + ($66<<3)|0);
   $68 = $67;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (_bitshift64Lshr(($65|0),($54|0),1)|0);
   $75 = tempRet0;
   $76 = $60 & 1;
   $77 = (768 + ($76<<3)|0);
   $78 = $77;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = (($78) + 4)|0;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = $80 ^ $70;
   $85 = $83 ^ $73;
   $86 = $84 ^ $74;
   $87 = $85 ^ $75;
   $88 = $48;
   $89 = $88;
   HEAP32[$89>>2] = $86;
   $90 = (($88) + 4)|0;
   $91 = $90;
   HEAP32[$91>>2] = $87;
   $exitcond = ($56|0)==(311);
   if ($exitcond) {
    break;
   } else {
    $$145 = $56;
   }
  }
  $92 = ((($0)) + 2504|0);
  $93 = $92;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $95 & -2147483648;
  $100 = ((($0)) + 16|0);
  $101 = $100;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($101) + 4)|0;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = $103 & 2147483646;
  $108 = $107 | $99;
  $109 = ((($0)) + 1256|0);
  $110 = $109;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 4)|0;
  $114 = $113;
  $115 = HEAP32[$114>>2]|0;
  $116 = (_bitshift64Lshr(($108|0),($98|0),1)|0);
  $117 = tempRet0;
  $118 = $103 & 1;
  $119 = (768 + ($118<<3)|0);
  $120 = $119;
  $121 = $120;
  $122 = HEAP32[$121>>2]|0;
  $123 = (($120) + 4)|0;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = $122 ^ $112;
  $127 = $125 ^ $115;
  $128 = $126 ^ $116;
  $129 = $127 ^ $117;
  $130 = $92;
  $131 = $130;
  HEAP32[$131>>2] = $128;
  $132 = (($130) + 4)|0;
  $133 = $132;
  HEAP32[$133>>2] = $129;
  HEAP32[$1>>2] = 0;
 }
 $134 = HEAP32[$1>>2]|0;
 $135 = (($134) + 1)|0;
 HEAP32[$1>>2] = $135;
 $136 = (((($0)) + 16|0) + ($134<<3)|0);
 $137 = $136;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = (($137) + 4)|0;
 $141 = $140;
 $142 = HEAP32[$141>>2]|0;
 $143 = (_bitshift64Lshr(($139|0),($142|0),29)|0);
 $144 = tempRet0;
 $145 = $143 & 1431655765;
 $146 = $144 & 5;
 $147 = $145 ^ $139;
 $148 = $146 ^ $142;
 $149 = (_bitshift64Shl(($147|0),($148|0),17)|0);
 $150 = tempRet0;
 $151 = $149 & -307888128;
 $152 = $150 & 1909882879;
 $153 = $151 ^ $147;
 $154 = $152 ^ $148;
 (_bitshift64Shl(($153|0),($154|0),37)|0);
 $155 = tempRet0;
 $156 = $155 & -528672;
 $157 = $156 ^ $154;
 $158 = (_bitshift64Lshr(($153|0),($157|0),43)|0);
 $159 = tempRet0;
 $160 = $158 ^ $153;
 $161 = $159 ^ $157;
 tempRet0 = ($161);
 return ($160|0);
}
function _lily_new_symtab($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(80)|0);
 $2 = ((($1)) + 28|0);
 HEAP16[$2>>1] = 1;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = (_lily_new_value_stack()|0);
 HEAP32[$1>>2] = $6;
 $7 = ((($1)) + 24|0);
 HEAP32[$7>>2] = $0;
 $8 = ((($1)) + 30|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($1)) + 32|0);
 HEAP16[$9>>1] = -8;
 return ($1|0);
}
function _lily_set_builtin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _hide_classes($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$013$lcssa = 0, $$01314 = 0, $$01314$phi = 0, $$015 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($2|0);
 if ($5) {
  $$013$lcssa = $4;
 } else {
  $$01314 = $4;$$015 = $1;
  while(1) {
   $6 = HEAP32[$$015>>2]|0;
   HEAP32[$$015>>2] = $$01314;
   $7 = ($6|0)==($2|0);
   if ($7) {
    $$013$lcssa = $$015;
    break;
   } else {
    $$01314$phi = $$015;$$015 = $6;$$01314 = $$01314$phi;
   }
  }
 }
 HEAP32[$3>>2] = $$013$lcssa;
 return;
}
function _free_vars_since($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return;
 } else {
  $$07 = $0;
 }
 while(1) {
  $3 = HEAP32[$$07>>2]|0;
  $4 = ((($$07)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _lily_free($5);
  _lily_free($$07);
  $6 = ($3|0)==($1|0);
  if ($6) {
   break;
  } else {
   $$07 = $3;
  }
 }
 return;
}
function _free_boxed_syms_since($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return;
 } else {
  $$06 = $0;
 }
 while(1) {
  $3 = HEAP32[$$06>>2]|0;
  _lily_free($$06);
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  } else {
   $$06 = $3;
  }
 }
 return;
}
function _lily_free_module_symbols($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _free_classes_until($3,0);
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 _free_vars_since($5,0);
 $6 = ((($1)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  return;
 }
 _free_boxed_syms_since($7,0);
 return;
}
function _free_classes_until($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$022 = 0, $$in2021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return;
 } else {
  $$022 = $0;
 }
 while(1) {
  $3 = ((($$022)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  _lily_free($4);
  $5 = ((($$022)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   _free_properties($$022);
  }
  $8 = ((($$022)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $$in2021 = $9;
   while(1) {
    $11 = HEAP32[$$in2021>>2]|0;
    $12 = ((($$in2021)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    _lily_free($13);
    _lily_free($$in2021);
    $14 = ($11|0)==(0|0);
    if ($14) {
     break;
    } else {
     $$in2021 = $11;
    }
   }
  }
  $15 = HEAP32[$$022>>2]|0;
  _lily_free($$022);
  $16 = ($15|0)==($1|0);
  if ($16) {
   break;
  } else {
   $$022 = $15;
  }
 }
 return;
}
function _free_properties($0) {
 $0 = $0|0;
 var $$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 } else {
  $$in = $2;
 }
 while(1) {
  $4 = HEAP32[$$in>>2]|0;
  $5 = ((($$in)) + 4|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(3);
  if ($7) {
   $8 = ((($$in)) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   _lily_free($9);
  }
  $10 = ((($$in)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  _lily_free($11);
  _lily_free($$in);
  $12 = ($4|0)==(0|0);
  if ($12) {
   break;
  } else {
   $$in = $4;
  }
 }
 return;
}
function _lily_rewind_symtab($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($0)) + 32|0);
 HEAP16[$7>>1] = -8;
 $8 = ((($1)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($4|0);
 if (!($10)) {
  _free_boxed_syms_since($9,$4);
  HEAP32[$8>>2] = $4;
 }
 $11 = ((($1)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($3|0);
 if (!($13)) {
  _free_vars_since($12,$3);
  HEAP32[$11>>2] = $3;
 }
 $14 = ((($1)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==($2|0);
 if ($16) {
  return;
 }
 $17 = ($5|0)==(0);
 if ($17) {
  _hide_classes($0,$15,$2);
 } else {
  _free_classes_until($15,$2);
 }
 HEAP32[$14>>2] = $2;
 return;
}
function _lily_free_symtab($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _free_literals($1);
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 _free_classes_until($3,0);
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 _free_classes_until($5,0);
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 _free_vars_since($7,0);
 _lily_free($0);
 return;
}
function _free_literals($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _lily_free_value_stack($0);
  return;
 }
 while(1) {
  $4 = (_lily_vs_pop($0)|0);
  $5 = HEAP16[$4>>1]|0;
  switch ($5<<16>>16) {
  case 26: case 2: case 1:  {
   break;
  }
  default: {
   $6 = HEAP32[$4>>2]|0;
   $7 = $6 | 524288;
   HEAP32[$4>>2] = $7;
   _lily_deref($4);
  }
  }
  _lily_free($4);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  }
 }
 _lily_free_value_stack($0);
 return;
}
function _lily_get_integer_literal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_first_lit_of($3,1)|0);
 $$old1 = ($4|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$026 = $4;
   while(1) {
    $5 = ((($$026)) + 8|0);
    $6 = $5;
    $7 = $6;
    $8 = HEAP32[$7>>2]|0;
    $9 = (($6) + 4)|0;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = ($8|0)==($1|0);
    $13 = ($11|0)==($2|0);
    $14 = $12 & $13;
    if ($14) {
     $$0 = $$026;
     label = 7;
     break;
    }
    $15 = ((($$026)) + 4|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($16<<16>>16)==(0);
    if ($17) {
     label = 5;
     break;
    }
    $18 = $16&65535;
    $19 = HEAP32[$0>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     break L1;
    } else {
     $$026 = $22;
    }
   }
   if ((label|0) == 5) {
    $24 = HEAP32[$0>>2]|0;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26&65535;
    $28 = ((($$026)) + 4|0);
    HEAP16[$28>>1] = $27;
    break;
   }
   else if ((label|0) == 7) {
    return ($$0|0);
   }
  }
 } while(0);
 $29 = (_new_value_of_integer($1,$2)|0);
 $30 = HEAP32[$0>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = ((($29)) + 6|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($29)) + 4|0);
 HEAP16[$35>>1] = 0;
 $36 = HEAP32[$0>>2]|0;
 _lily_vs_push($36,$29);
 $$0 = $29;
 return ($$0|0);
}
function _first_lit_of($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01617 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$2 = 0;
  return ($$2|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $$01617 = 0;
 while(1) {
  $8 = (($5) + ($$01617<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($11|0)==($1|0);
  $6 = (($$01617) + 1)|0;
  if ($12) {
   $$2 = $9;
   label = 5;
   break;
  }
  $7 = ($6|0)<($3|0);
  if ($7) {
   $$01617 = $6;
  } else {
   $$2 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$2|0);
 }
 return (0)|0;
}
function _new_value_of_integer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(16)|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($2)) + 8|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 return ($2|0);
}
function _lily_get_double_literal($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$026 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_first_lit_of($2,2)|0);
 $$old1 = ($3|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$026 = $3;
   while(1) {
    $4 = ((($$026)) + 8|0);
    $5 = +HEAPF64[$4>>3];
    $6 = $5 == $1;
    if ($6) {
     $$0 = $$026;
     label = 7;
     break;
    }
    $7 = ((($$026)) + 4|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = ($8<<16>>16)==(0);
    if ($9) {
     label = 5;
     break;
    }
    $10 = $8&65535;
    $11 = HEAP32[$0>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     break L1;
    } else {
     $$026 = $14;
    }
   }
   if ((label|0) == 5) {
    $16 = HEAP32[$0>>2]|0;
    $17 = ((($16)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18&65535;
    $20 = ((($$026)) + 4|0);
    HEAP16[$20>>1] = $19;
    break;
   }
   else if ((label|0) == 7) {
    return ($$0|0);
   }
  }
 } while(0);
 $21 = (_new_value_of_double($1)|0);
 $22 = HEAP32[$0>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24&65535;
 $26 = ((($21)) + 6|0);
 HEAP16[$26>>1] = $25;
 $27 = ((($21)) + 4|0);
 HEAP16[$27>>1] = 0;
 $28 = HEAP32[$0>>2]|0;
 _lily_vs_push($28,$21);
 $$0 = $21;
 return ($$0|0);
}
function _new_value_of_double($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 HEAP32[$1>>2] = 2;
 $2 = ((($1)) + 8|0);
 HEAPF64[$2>>3] = $0;
 return ($1|0);
}
function _lily_get_bytestring_literal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$034 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_first_lit_of($3,5)|0);
 $$old1 = ($4|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$034 = $4;
   while(1) {
    $5 = ((($$034)) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ((($6)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($2|0);
    if ($9) {
     $10 = ((($6)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (_memcmp($11,$1,$2)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $$0 = $$034;
      label = 8;
      break;
     }
    }
    $14 = ((($$034)) + 4|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = ($15<<16>>16)==(0);
    if ($16) {
     label = 6;
     break;
    }
    $17 = $15&65535;
    $18 = HEAP32[$0>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + ($17<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break L1;
    } else {
     $$034 = $21;
    }
   }
   if ((label|0) == 6) {
    $23 = HEAP32[$0>>2]|0;
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25&65535;
    $27 = ((($$034)) + 4|0);
    HEAP16[$27>>1] = $26;
    break;
   }
   else if ((label|0) == 8) {
    return ($$0|0);
   }
  }
 } while(0);
 $28 = (_lily_new_bytestring_raw($1,$2)|0);
 $29 = (_new_value_of_bytestring($28)|0);
 HEAP32[$29>>2] = 5;
 $30 = HEAP32[$0>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = ((($29)) + 6|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($29)) + 4|0);
 HEAP16[$35>>1] = 0;
 $36 = HEAP32[$0>>2]|0;
 _lily_vs_push($36,$29);
 $$0 = $29;
 return ($$0|0);
}
function _new_value_of_bytestring($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 HEAP32[$1>>2] = 524293;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = $0;
 return ($1|0);
}
function _lily_get_string_literal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_first_lit_of($2,3)|0);
 $4 = (_strlen($1)|0);
 $$old1 = ($3|0)==(0|0);
 L1: do {
  if (!($$old1)) {
   $$035 = $3;
   while(1) {
    $5 = ((($$035)) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ((($6)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($4|0);
    if ($9) {
     $10 = ((($6)) + 8|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (_strcmp($11,$1)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $$0 = $$035;
      label = 8;
      break;
     }
    }
    $14 = ((($$035)) + 4|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = ($15<<16>>16)==(0);
    if ($16) {
     label = 6;
     break;
    }
    $17 = $15&65535;
    $18 = HEAP32[$0>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + ($17<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break L1;
    } else {
     $$035 = $21;
    }
   }
   if ((label|0) == 6) {
    $23 = HEAP32[$0>>2]|0;
    $24 = ((($23)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25&65535;
    $27 = ((($$035)) + 4|0);
    HEAP16[$27>>1] = $26;
    break;
   }
   else if ((label|0) == 8) {
    return ($$0|0);
   }
  }
 } while(0);
 $28 = (_lily_new_string_raw($1)|0);
 $29 = (_new_value_of_string($28)|0);
 HEAP32[$29>>2] = 3;
 $30 = HEAP32[$0>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = ((($29)) + 6|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($29)) + 4|0);
 HEAP16[$35>>1] = 0;
 $36 = HEAP32[$0>>2]|0;
 _lily_vs_push($36,$29);
 $$0 = $29;
 return ($$0|0);
}
function _new_value_of_string($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(16)|0);
 HEAP32[$1>>2] = 524291;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = $0;
 return ($1|0);
}
function _lily_get_unit_literal($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_first_lit_of($1,26)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (_new_value_of_unit()|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7&65535;
 $9 = ((($4)) + 6|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($4)) + 4|0);
 HEAP16[$10>>1] = 0;
 $11 = HEAP32[$0>>2]|0;
 _lily_vs_push($11,$4);
 $$0 = $4;
 return ($$0|0);
}
function _new_value_of_unit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(16)|0);
 HEAP32[$0>>2] = 26;
 $1 = ((($0)) + 8|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return ($0|0);
}
function _lily_find_var($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_shorthash_for_name_743($2)|0);
 $4 = tempRet0;
 $5 = ($1|0)==(0|0);
 if (!($5)) {
  $18 = (_find_var($1,$2,$3,$4)|0);
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $$0 = $18;
   return ($$0|0);
  }
  $20 = ((($1)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 0;
   return ($$0|0);
  }
  $23 = (_find_boxed_var($1,$2,$3,$4)|0);
  $$0 = $23;
  return ($$0|0);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_find_var($7,$2,$3,$4)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_find_var($11,$2,$3,$4)|0);
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $$0 = $12;
  return ($$0|0);
 }
 $14 = ((($11)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (_find_boxed_var($11,$2,$3,$4)|0);
 $$0 = $17;
 return ($$0|0);
}
function _shorthash_for_name_743($0) {
 $0 = $0|0;
 var $$01621 = 0, $$01720 = 0, $$01819 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $20 = 0;$21 = 0;
  tempRet0 = ($20);
  return ($21|0);
 } else {
  $$01621 = 0;$$01720 = 0;$$01819 = $0;$10 = 0;$12 = 0;$4 = $1;
 }
 while(1) {
  $3 = $4 << 24 >> 24;
  $5 = ($3|0)<(0);
  $6 = $5 << 31 >> 31;
  $7 = (_bitshift64Shl(($3|0),($6|0),($$01621|0))|0);
  $8 = tempRet0;
  $9 = $7 | $10;
  $11 = $8 | $12;
  $13 = ((($$01819)) + 1|0);
  $14 = (($$01720) + 1)|0;
  $15 = (($$01621) + 8)|0;
  $16 = HEAP8[$13>>0]|0;
  $17 = ($16<<24>>24)!=(0);
  $18 = ($14|0)!=(8);
  $19 = $18 & $17;
  if ($19) {
   $$01621 = $15;$$01720 = $14;$$01819 = $13;$10 = $9;$12 = $11;$4 = $16;
  } else {
   $20 = $11;$21 = $9;
   break;
  }
 }
 tempRet0 = ($20);
 return ($21|0);
}
function _find_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $$08 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 32|0);
 $$08 = HEAP32[$4>>2]|0;
 $5 = ($$08|0)==(0|0);
 if ($5) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$09 = $$08;
 }
 while(1) {
  $6 = ((($$09)) + 24|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)==($2|0);
  $14 = ($12|0)==($3|0);
  $15 = $13 & $14;
  if ($15) {
   $16 = ((($$09)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strcmp($17,$1)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$0$lcssa = $$09;
    label = 5;
    break;
   }
  }
  $$0 = HEAP32[$$09>>2]|0;
  $20 = ($$0|0)==(0|0);
  if ($20) {
   $$0$lcssa = 0;
   label = 5;
   break;
  } else {
   $$09 = $$0;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _find_boxed_var($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_find_boxed_sym($0,$1,$2,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(1);
 $phitmp = $8 ? $4 : 0;
 $$0 = $phitmp;
 return ($$0|0);
}
function _find_boxed_sym($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$135 = 0, $$0 = 0, $$032 = 0, $$041 = 0, $$043 = 0, $$135$lcssa = 0, $$13542 = 0, $$2 = 0, $$5 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $$old1 = ($5|0)==(0|0);
 if ($$old1) {
  $$5 = 0;
  return ($$5|0);
 } else {
  $$032 = $5;
 }
 while(1) {
  $6 = ((($$032)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = $8;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)==($2|0);
  $16 = ($14|0)==($3|0);
  $17 = $15 & $16;
  if ($17) {
   $18 = ((($7)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_strcmp($19,$1)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    label = 4;
    break;
   }
  }
  $22 = ((($7)) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = ($23<<16>>16)==(7);
  if ($24) {
   $25 = ((($7)) + 6|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 & 1152;
   $28 = ($27<<16>>16)==(128);
   if ($28) {
    $29 = ((($7)) + 36|0);
    $$041 = HEAP32[$29>>2]|0;
    $30 = ($$041|0)==(0|0);
    if ($30) {
     $$135$lcssa = 0;
    } else {
     $$043 = $$041;$$13542 = 0;
     while(1) {
      $31 = ((($$043)) + 24|0);
      $32 = $31;
      $33 = $32;
      $34 = HEAP32[$33>>2]|0;
      $35 = (($32) + 4)|0;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = ($34|0)==($2|0);
      $39 = ($37|0)==($3|0);
      $40 = $38 & $39;
      if ($40) {
       $41 = ((($$043)) + 16|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (_strcmp($42,$1)|0);
       $44 = ($43|0)==(0);
       $$$135 = $44 ? $$043 : $$13542;
       $$2 = $$$135;
      } else {
       $$2 = $$13542;
      }
      $$0 = HEAP32[$$043>>2]|0;
      $45 = ($$0|0)==(0|0);
      if ($45) {
       $$135$lcssa = $$2;
       break;
      } else {
       $$043 = $$0;$$13542 = $$2;
      }
     }
    }
    $46 = ($$135$lcssa|0)==(0|0);
    if (!($46)) {
     $$5 = $$135$lcssa;
     label = 13;
     break;
    }
   }
  }
  $47 = HEAP32[$$032>>2]|0;
  $48 = ($47|0)==(0|0);
  if ($48) {
   $$5 = 0;
   label = 13;
   break;
  } else {
   $$032 = $47;
  }
 }
 if ((label|0) == 4) {
  $$5 = $7;
  return ($$5|0);
 }
 else if ((label|0) == 13) {
  return ($$5|0);
 }
 return (0)|0;
}
function _lily_new_raw_class($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_lily_malloc(56)|0);
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (_lily_malloc($3)|0);
 (_strcpy($4,$0)|0);
 $5 = ((($1)) + 4|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($1)) + 6|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($1)) + 12|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($1)) + 10|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($1)) + 32|0);
 HEAP32[$9>>2] = 0;
 $10 = (_shorthash_for_name_743($0)|0);
 $11 = tempRet0;
 $12 = ((($1)) + 24|0);
 $13 = $12;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = ((($1)) + 16|0);
 HEAP32[$17>>2] = $4;
 $18 = ((($1)) + 36|0);
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;HEAP32[$18+16>>2]=0|0;
 return ($1|0);
}
function _lily_new_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_new_raw_class($1)|0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 48|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 28|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($2)) + 8|0);
 HEAP16[$8>>1] = $7;
 $9 = HEAP16[$6>>1]|0;
 $10 = (($9) + 1)<<16>>16;
 HEAP16[$6>>1] = $10;
 $11 = HEAP32[$3>>2]|0;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$2>>2] = $13;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = $2;
 return ($2|0);
}
function _lily_new_enum_class($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_new_class($0,$1)|0);
 $3 = ((($0)) + 28|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = (($4) + -1)<<16>>16;
 HEAP16[$3>>1] = $5;
 $6 = ((($2)) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 | 128;
 HEAP16[$6>>1] = $8;
 $9 = ((($0)) + 32|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($2)) + 8|0);
 HEAP16[$11>>1] = $10;
 $12 = HEAP16[$9>>1]|0;
 $13 = (($12) + -1)<<16>>16;
 HEAP16[$9>>1] = $13;
 return ($2|0);
}
function _lily_find_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_shorthash_for_name_743($2)|0);
 $4 = tempRet0;
 $5 = ($1|0)==(0|0);
 if (!($5)) {
  $24 = (_find_class($1,$2,$3,$4)|0);
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $$0 = $24;
   return ($$0|0);
  }
  $26 = ((($1)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $$0 = 0;
   return ($$0|0);
  }
  $29 = (_find_boxed_class($1,$2,$3,$4)|0);
  $$0 = $29;
  return ($$0|0);
 }
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $21 = ((($0)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_lily_gp_find($22,$2)|0);
  $$0 = $23;
  return ($$0|0);
 }
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_find_class($10,$2,$3,$4)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $$0 = $11;
  return ($$0|0);
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_find_class($14,$2,$3,$4)|0);
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $$0 = $15;
  return ($$0|0);
 }
 $17 = ((($14)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = (_find_boxed_class($14,$2,$3,$4)|0);
 $$0 = $20;
 return ($$0|0);
}
function _find_class($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$022 = 0, $$02227 = 0, $$02228 = 0, $$023 = 0, $$02329 = 0, $$02330 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 28|0);
 $$02329 = HEAP32[$4>>2]|0;
 $5 = ($$02329|0)==(0|0);
 if ($5) {
  $$3 = 0;
  return ($$3|0);
 } else {
  $$02330 = $$02329;
 }
 L3: while(1) {
  $6 = ((($$02330)) + 24|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)==($2|0);
  $14 = ($12|0)==($3|0);
  $15 = $13 & $14;
  if ($15) {
   $16 = ((($$02330)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strcmp($17,$1)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$3 = $$02330;
    label = 11;
    break;
   }
  }
  $20 = ((($$02330)) + 6|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 & 1152;
  $23 = ($22<<16>>16)==(128);
  if ($23) {
   $24 = ((($$02330)) + 36|0);
   $$02227 = HEAP32[$24>>2]|0;
   $25 = ($$02227|0)==(0|0);
   if (!($25)) {
    $$02228 = $$02227;
    while(1) {
     $26 = ((($$02228)) + 24|0);
     $27 = $26;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = (($27) + 4)|0;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = ($29|0)==($2|0);
     $34 = ($32|0)==($3|0);
     $35 = $33 & $34;
     if ($35) {
      $36 = ((($$02228)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (_strcmp($37,$1)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       label = 9;
       break L3;
      }
     }
     $$022 = HEAP32[$$02228>>2]|0;
     $40 = ($$022|0)==(0|0);
     if ($40) {
      break;
     } else {
      $$02228 = $$022;
     }
    }
   }
  }
  $$023 = HEAP32[$$02330>>2]|0;
  $41 = ($$023|0)==(0|0);
  if ($41) {
   $$3 = 0;
   label = 11;
   break;
  } else {
   $$02330 = $$023;
  }
 }
 if ((label|0) == 9) {
  $$3 = $$02228;
  return ($$3|0);
 }
 else if ((label|0) == 11) {
  return ($$3|0);
 }
 return (0)|0;
}
function _find_boxed_class($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_find_boxed_sym($0,$1,$2,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ($7<<16>>16)==(1);
 $phitmp = $8 ? 0 : $4;
 $$0 = $phitmp;
 return ($$0|0);
}
function _lily_find_member($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$$027 = 0, $$026 = 0, $$027 = 0, $$030 = 0, $$031 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$026 = $0;$$027 = 0;
 while(1) {
  $3 = ((($$026)) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  L3: do {
   if ($5) {
    $$2 = $$027;
   } else {
    $6 = (_shorthash_for_name_743($1)|0);
    $7 = tempRet0;
    $$030 = HEAP32[$3>>2]|0;
    $8 = ($$030|0)==(0|0);
    if ($8) {
     $$2 = $$027;
    } else {
     $$031 = $$030;
     while(1) {
      $9 = ((($$031)) + 24|0);
      $10 = $9;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (($10) + 4)|0;
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = ($12|0)==($6|0);
      $17 = ($15|0)==($7|0);
      $18 = $16 & $17;
      if ($18) {
       $19 = ((($$031)) + 16|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (_strcmp($20,$1)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        break;
       }
      }
      $$0 = HEAP32[$$031>>2]|0;
      $28 = ($$0|0)==(0|0);
      if ($28) {
       $$2 = $$027;
       break L3;
      } else {
       $$031 = $$0;
      }
     }
     $23 = ((($$031)) + 6|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 & 4;
     $26 = ($25<<16>>16)==(0);
     $27 = ($$026|0)==($0|0);
     $or$cond = $27 | $26;
     $$0$$027 = $or$cond ? $$031 : $$027;
     $$2 = $$0$$027;
    }
   }
  } while(0);
  $29 = ($$2|0)!=(0|0);
  $30 = ($$026|0)==($2|0);
  $or$cond28 = $30 | $29;
  if ($or$cond28) {
   label = 10;
   break;
  }
  $31 = ((($$026)) + 32|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   label = 10;
   break;
  } else {
   $$026 = $32;$$027 = $$2;
  }
 }
 if ((label|0) == 10) {
  return ($$2|0);
 }
 return (0)|0;
}
function _lily_find_class_of_member($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$022 = 0, $$023 = 0, $$220 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$018 = $0;
 L1: while(1) {
  $2 = ((($$018)) + 36|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  L3: do {
   if (!($4)) {
    $5 = (_shorthash_for_name_743($1)|0);
    $6 = tempRet0;
    $$022 = HEAP32[$2>>2]|0;
    $7 = ($$022|0)==(0|0);
    if (!($7)) {
     $$023 = $$022;
     while(1) {
      $8 = ((($$023)) + 24|0);
      $9 = $8;
      $10 = $9;
      $11 = HEAP32[$10>>2]|0;
      $12 = (($9) + 4)|0;
      $13 = $12;
      $14 = HEAP32[$13>>2]|0;
      $15 = ($11|0)==($5|0);
      $16 = ($14|0)==($6|0);
      $17 = $15 & $16;
      if ($17) {
       $18 = ((($$023)) + 16|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = (_strcmp($19,$1)|0);
       $21 = ($20|0)==(0);
       if ($21) {
        break;
       }
      }
      $$0 = HEAP32[$$023>>2]|0;
      $22 = ($$0|0)==(0|0);
      if ($22) {
       break L3;
      } else {
       $$023 = $$0;
      }
     }
     $23 = ($$018|0)==(0|0);
     if (!($23)) {
      $$220 = $$018;
      label = 9;
      break L1;
     }
    }
   }
  } while(0);
  $24 = ((($$018)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$220 = 0;
   label = 9;
   break;
  } else {
   $$018 = $25;
  }
 }
 if ((label|0) == 9) {
  return ($$220|0);
 }
 return (0)|0;
}
function _lily_find_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_find_member($0,$1,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(1);
 $phitmp = $6 ? $2 : 0;
 $$0 = $phitmp;
 return ($$0|0);
}
function _lily_find_property($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_find_member($0,$1,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(4);
 $phitmp = $6 ? $2 : 0;
 $$0 = $phitmp;
 return ($$0|0);
}
function _lily_add_class_property($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_lily_malloc(40)|0);
 $6 = (_strlen($3)|0);
 $7 = (($6) + 1)|0;
 $8 = (_lily_malloc($7)|0);
 (_strcpy($8,$3)|0);
 $9 = ((($5)) + 4|0);
 HEAP16[$9>>1] = 4;
 $10 = $4&65535;
 $11 = ((($5)) + 6|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($5)) + 16|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($5)) + 12|0);
 HEAP32[$13>>2] = $2;
 $14 = (_shorthash_for_name_743($8)|0);
 $15 = tempRet0;
 $16 = ((($5)) + 24|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 $21 = ((($1)) + 44|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ((($5)) + 8|0);
 HEAP16[$23>>1] = $22;
 $24 = ((($5)) + 32|0);
 HEAP32[$24>>2] = $1;
 $25 = HEAP16[$21>>1]|0;
 $26 = (($25) + 1)<<16>>16;
 HEAP16[$21>>1] = $26;
 $27 = ((($1)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$5>>2] = $28;
 HEAP32[$27>>2] = $5;
 return ($5|0);
}
function _lily_new_variant_class($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_lily_malloc(40)|0);
 $4 = ((($3)) + 4|0);
 HEAP16[$4>>1] = 3;
 $5 = ((($3)) + 6|0);
 HEAP16[$5>>1] = 2048;
 $6 = ((($3)) + 32|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = (_shorthash_for_name_743($2)|0);
 $9 = tempRet0;
 $10 = ((($3)) + 24|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = ((($3)) + 36|0);
 HEAP32[$15>>2] = 0;
 $16 = (_strlen($2)|0);
 $17 = (($16) + 1)|0;
 $18 = (_lily_malloc($17)|0);
 $19 = ((($3)) + 16|0);
 HEAP32[$19>>2] = $18;
 (_strcpy($18,$2)|0);
 $20 = ((($1)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$3>>2] = $21;
 HEAP32[$20>>2] = $3;
 $22 = ((($0)) + 32|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = ((($3)) + 8|0);
 HEAP16[$24>>1] = $23;
 $25 = HEAP16[$22>>1]|0;
 $26 = (($25) + -1)<<16>>16;
 HEAP16[$22>>1] = $26;
 return ($3|0);
}
function _lily_find_variant($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$012 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_shorthash_for_name_743($1)|0);
 $3 = tempRet0;
 $4 = ((($0)) + 36|0);
 $$012 = HEAP32[$4>>2]|0;
 $5 = ($$012|0)==(0|0);
 if ($5) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$013 = $$012;
 }
 while(1) {
  $6 = ((($$013)) + 24|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)==($2|0);
  $14 = ($12|0)==($3|0);
  $15 = $13 & $14;
  if ($15) {
   $16 = ((($$013)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_strcmp($17,$1)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = ((($$013)) + 4|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = ($21<<16>>16)==(1);
    if (!($22)) {
     $$0$lcssa = $$013;
     label = 6;
     break;
    }
   }
  }
  $$0 = HEAP32[$$013>>2]|0;
  $23 = ($$0|0)==(0|0);
  if ($23) {
   $$0$lcssa = 0;
   label = 6;
   break;
  } else {
   $$013 = $$0;
  }
 }
 if ((label|0) == 6) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_fix_enum_variant_ids($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$020 = 0, $$02021 = 0, $$02023 = 0, $$022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ((($1)) + 8|0);
 HEAP16[$4>>1] = $3;
 $5 = ((($1)) + 44|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $3&65535;
 $9 = (($7) + ($8))|0;
 $10 = (($9) + 1)|0;
 $11 = $10&65535;
 HEAP16[$2>>1] = $11;
 $12 = HEAP16[$5>>1]|0;
 $13 = $12&65535;
 $14 = (($13) + 1)|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = (($14) + ($17))|0;
 $19 = $18&65535;
 HEAP16[$15>>1] = $19;
 $20 = ((($1)) + 36|0);
 $$02021 = HEAP32[$20>>2]|0;
 $21 = ($$02021|0)==(0|0);
 if ($21) {
  return;
 }
 $22 = $9&65535;
 $$02023 = $$02021;$$022 = $22;
 while(1) {
  $23 = ((($$02023)) + 8|0);
  HEAP16[$23>>1] = $$022;
  $24 = (($$022) + -1)<<16>>16;
  $$020 = HEAP32[$$02023>>2]|0;
  $25 = ($$020|0)==(0|0);
  if ($25) {
   break;
  } else {
   $$02023 = $$020;$$022 = $24;
  }
 }
 return;
}
function _lily_register_classes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$027 = 0, $$02729 = 0, $$02730 = 0, $$028 = 0, $$02831 = 0, $$02832 = 0, $$034 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 _lily_vm_ensure_class_table($1,$5);
 $6 = ((($0)) + 4|0);
 $$034 = HEAP32[$6>>2]|0;
 $7 = ($$034|0)==(0|0);
 if ($7) {
  $22 = ((($0)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  _lily_vm_add_class_unchecked($1,$23);
  return;
 } else {
  $$035 = $$034;
 }
 while(1) {
  $8 = ((($$035)) + 28|0);
  $$02831 = HEAP32[$8>>2]|0;
  $9 = ($$02831|0)==(0|0);
  if (!($9)) {
   $$02832 = $$02831;
   while(1) {
    _lily_vm_add_class_unchecked($1,$$02832);
    $10 = ((($$02832)) + 6|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & 128;
    $13 = ($12<<16>>16)==(0);
    if (!($13)) {
     $14 = ((($$02832)) + 36|0);
     $$02729 = HEAP32[$14>>2]|0;
     $15 = ($$02729|0)==(0|0);
     if (!($15)) {
      $$02730 = $$02729;
      while(1) {
       $16 = ((($$02730)) + 4|0);
       $17 = HEAP16[$16>>1]|0;
       $18 = ($17<<16>>16)==(3);
       if ($18) {
        _lily_vm_add_class_unchecked($1,$$02730);
       }
       $$027 = HEAP32[$$02730>>2]|0;
       $19 = ($$027|0)==(0|0);
       if ($19) {
        break;
       } else {
        $$02730 = $$027;
       }
      }
     }
    }
    $$028 = HEAP32[$$02832>>2]|0;
    $20 = ($$028|0)==(0|0);
    if ($20) {
     break;
    } else {
     $$02832 = $$028;
    }
   }
  }
  $$0 = HEAP32[$$035>>2]|0;
  $21 = ($$0|0)==(0|0);
  if ($21) {
   break;
  } else {
   $$035 = $$0;
  }
 }
 $22 = ((($0)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 _lily_vm_add_class_unchecked($1,$23);
 return;
}
function _lily_find_module($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_find_module($5,$2)|0);
  $$0 = $6;
  return ($$0|0);
 } else {
  $7 = (_find_module($1,$2)|0);
  $$0 = $7;
  return ($$0|0);
 }
 return (0)|0;
}
function _find_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $$2 = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $$old1 = ($3|0)==(0|0);
 if ($$old1) {
  $$2 = 0;
  return ($$2|0);
 } else {
  $$021 = $3;
 }
 while(1) {
  $4 = ((($$021)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $cond = ($5|0)==(0|0);
  if ($cond) {
   $8 = HEAP32[$$021>>2]|0;
   $9 = ((($8)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_strcmp($10,$1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    break;
   }
  } else {
   $6 = (_strcmp($5,$1)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
  }
  $14 = ((($$021)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$2 = 0;
   label = 7;
   break;
  } else {
   $$021 = $15;
  }
 }
 if ((label|0) == 7) {
  return ($$2|0);
 }
 $13 = HEAP32[$$021>>2]|0;
 $$2 = $13;
 return ($$2|0);
}
function _lily_find_registered_module($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$08 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$08 = HEAP32[$2>>2]|0;
 $3 = ($$08|0)==(0|0);
 if ($3) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$09 = $$08;
 }
 while(1) {
  $4 = ((($$09)) + 6|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 & 1;
  $7 = ($6<<16>>16)==(0);
  if (!($7)) {
   $8 = ((($$09)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,$1)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$0$lcssa = $$09;
    label = 5;
    break;
   }
  }
  $$0 = HEAP32[$$09>>2]|0;
  $12 = ($$0|0)==(0|0);
  if ($12) {
   $$0$lcssa = 0;
   label = 5;
   break;
  } else {
   $$09 = $$0;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _lily_add_symbol_ref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_malloc(24)|0);
 $3 = ((($2)) + 16|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 HEAP32[$4>>2] = $2;
 return;
}
function _lily_new_hash_raw($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_new_size($0)|0);
 $2 = (_lily_malloc(20)|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = $1;
 $6 = $1 << 2;
 $7 = (_lily_malloc($6)|0);
 $8 = ((($2)) + 16|0);
 HEAP32[$8>>2] = $7;
 _memset(($7|0),0,($6|0))|0;
 return ($2|0);
}
function _new_size($0) {
 $0 = $0|0;
 var $$010 = 0, $$0912$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)<(8);
 do {
  if ($1) {
   $$0912$lcssa = 0;
  } else {
   $4 = ($0|0)<(16);
   if ($4) {
    $$0912$lcssa = 1;
   } else {
    $5 = ($0|0)<(32);
    if ($5) {
     $$0912$lcssa = 2;
    } else {
     $6 = ($0|0)<(64);
     if ($6) {
      $$0912$lcssa = 3;
     } else {
      $7 = ($0|0)<(128);
      if ($7) {
       $$0912$lcssa = 4;
      } else {
       $8 = ($0|0)<(256);
       if ($8) {
        $$0912$lcssa = 5;
       } else {
        $9 = ($0|0)<(512);
        if ($9) {
         $$0912$lcssa = 6;
        } else {
         $10 = ($0|0)<(1024);
         if ($10) {
          $$0912$lcssa = 7;
         } else {
          $11 = ($0|0)<(2048);
          if ($11) {
           $$0912$lcssa = 8;
          } else {
           $12 = ($0|0)<(4096);
           if ($12) {
            $$0912$lcssa = 9;
           } else {
            $13 = ($0|0)<(8192);
            if ($13) {
             $$0912$lcssa = 10;
            } else {
             $14 = ($0|0)<(16384);
             if ($14) {
              $$0912$lcssa = 11;
             } else {
              $15 = ($0|0)<(32768);
              if ($15) {
               $$0912$lcssa = 12;
              } else {
               $16 = ($0|0)<(65536);
               if ($16) {
                $$0912$lcssa = 13;
               } else {
                $17 = ($0|0)<(131072);
                if ($17) {
                 $$0912$lcssa = 14;
                } else {
                 $18 = ($0|0)<(262144);
                 if ($18) {
                  $$0912$lcssa = 15;
                 } else {
                  $19 = ($0|0)<(524288);
                  if ($19) {
                   $$0912$lcssa = 16;
                  } else {
                   $20 = ($0|0)<(1048576);
                   if ($20) {
                    $$0912$lcssa = 17;
                   } else {
                    $21 = ($0|0)<(2097152);
                    if ($21) {
                     $$0912$lcssa = 18;
                    } else {
                     $22 = ($0|0)<(4194304);
                     if ($22) {
                      $$0912$lcssa = 19;
                      break;
                     }
                     $23 = ($0|0)<(8388608);
                     if ($23) {
                      $$0912$lcssa = 20;
                      break;
                     }
                     $24 = ($0|0)<(16777216);
                     if ($24) {
                      $$0912$lcssa = 21;
                      break;
                     }
                     $25 = ($0|0)<(33554432);
                     if ($25) {
                      $$0912$lcssa = 22;
                      break;
                     }
                     $26 = ($0|0)<(67108864);
                     if ($26) {
                      $$0912$lcssa = 23;
                      break;
                     }
                     $27 = ($0|0)<(134217728);
                     if ($27) {
                      $$0912$lcssa = 24;
                      break;
                     }
                     $28 = ($0|0)<(268435456);
                     if ($28) {
                      $$0912$lcssa = 25;
                      break;
                     }
                     $29 = ($0|0)<(536870912);
                     if ($29) {
                      $$0912$lcssa = 26;
                      break;
                     }
                     $30 = ($0|0)<(1073741824);
                     if ($30) {
                      $$0912$lcssa = 27;
                      break;
                     } else {
                      $$010 = -1;
                     }
                     return ($$010|0);
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $2 = (2680 + ($$0912$lcssa<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $$010 = $3;
 return ($$010|0);
}
function _lily_hash_take($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$046 = 0, $$048 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy3 = sp + 16|0;
 $$byval_copy2 = sp + 8|0;
 $3 = sp;
 $4 = ((($2)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = HEAP16[$2>>1]|0;
 $16 = ($15<<16>>16)==(3);
 if ($16) {
  $23 = HEAP32[$4>>2]|0;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($23)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_lily_config_get($0)|0);
  $29 = ((($28)) + 24|0);
  $30 = (_siphash24($25,$27,$29)|0);
  $31 = tempRet0;
  $$046 = 12;$36 = $30;$37 = $31;
 } else {
  $17 = $4;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $$046 = 11;$36 = $19;$37 = $22;
 }
 $32 = ((($1)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<(0);
 $35 = $34 << 31 >> 31;
 $38 = (___uremdi3(($36|0),($37|0),($33|0),($35|0))|0);
 $39 = tempRet0;
 $40 = ((($1)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = ((($43)) + 8|0);
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$45>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$45+4>>2]|0;
 $46 = (FUNCTION_TABLE_iii[$$046 & 15]($$byval_copy2,$$byval_copy3)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  $48 = ((($43)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$40>>2]|0;
  $51 = (($50) + ($38<<2)|0);
  HEAP32[$51>>2] = $49;
  $52 = ((($1)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -1)|0;
  HEAP32[$52>>2] = $54;
  $55 = ((($43)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  _lily_stack_push_and_destroy($0,$56);
  $57 = ((($43)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  _lily_stack_push_and_destroy($0,$58);
  _lily_free($43);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$048 = $43;
 }
 while(1) {
  $59 = ((($$048)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0|0);
  if ($61) {
   $$0 = 0;
   label = 10;
   break;
  }
  $62 = ((($60)) + 8|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$62>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$62+4>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$3+4>>2]|0;
  $63 = (FUNCTION_TABLE_iii[$$046 & 15]($$byval_copy2,$$byval_copy3)|0);
  $64 = ($63|0)==(0);
  $65 = HEAP32[$59>>2]|0;
  if ($64) {
   break;
  } else {
   $$048 = $65;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $66 = ((($65)) + 24|0);
 $67 = HEAP32[$66>>2]|0;
 HEAP32[$59>>2] = $67;
 $68 = ((($1)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + -1)|0;
 HEAP32[$68>>2] = $70;
 $71 = ((($65)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 _lily_stack_push_and_destroy($0,$72);
 $73 = ((($65)) + 20|0);
 $74 = HEAP32[$73>>2]|0;
 _lily_stack_push_and_destroy($0,$74);
 _lily_free($65);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _cmp_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($4|0)!=($10|0);
 $15 = ($7|0)!=($13|0);
 $16 = $14 | $15;
 $17 = $16&1;
 return ($17|0);
}
function _cmp_str($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $16 = 0;
  $15 = $16&1;
  return ($15|0);
 }
 $9 = ((($2)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($3)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_strcmp($10,$12)|0);
 $14 = ($13|0)!=(0);
 $16 = $14;
 $15 = $16&1;
 return ($15|0);
}
function _lily_hash_set($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$059$be = 0, $$060 = 0, $$163 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy3 = sp + 16|0;
 $$byval_copy2 = sp + 8|0;
 $4 = sp;
 $5 = ((($2)) + 8|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = HEAP16[$2>>1]|0;
 $17 = ($16<<16>>16)==(3);
 if ($17) {
  $24 = HEAP32[$5>>2]|0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($24)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_lily_config_get($0)|0);
  $30 = ((($29)) + 24|0);
  $31 = (_siphash24($26,$28,$30)|0);
  $32 = tempRet0;
  $$060 = 12;$37 = $31;$38 = $32;
 } else {
  $18 = $5;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $$060 = 11;$37 = $20;$38 = $23;
 }
 $33 = ((($1)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)<(0);
 $36 = $35 << 31 >> 31;
 $39 = (___uremdi3(($37|0),($38|0),($34|0),($36|0))|0);
 $40 = tempRet0;
 $41 = ((($1)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($39<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 L5: do {
  if (!($45)) {
   $46 = $44;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 4)|0;
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = ($48|0)==($37|0);
   $53 = ($51|0)==($38|0);
   $54 = $52 & $53;
   if ($54) {
    $55 = ((($44)) + 8|0);
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$55>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$55+4>>2]|0;
    $56 = (FUNCTION_TABLE_iii[$$060 & 15]($$byval_copy2,$$byval_copy3)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $$163 = $44;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $58 = ((($44)) + 24|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(0|0);
    if ($60) {
     break;
    } else {
     $61 = $59;$75 = $58;
    }
    while(1) {
     $62 = $61;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = (($62) + 4)|0;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $68 = ($64|0)==($37|0);
     $69 = ($67|0)==($38|0);
     $70 = $68 & $69;
     if ($70) {
      $71 = ((($61)) + 8|0);
      ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$4+4>>2]|0;
      ;HEAP32[$$byval_copy3>>2]=HEAP32[$71>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$71+4>>2]|0;
      $72 = (FUNCTION_TABLE_iii[$$060 & 15]($$byval_copy2,$$byval_copy3)|0);
      $73 = ($72|0)==(0);
      $74 = HEAP32[$75>>2]|0;
      if ($73) {
       break;
      } else {
       $$059$be = $74;
      }
     } else {
      $$059$be = $61;
     }
     $76 = ((($$059$be)) + 24|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      break L5;
     } else {
      $61 = $77;$75 = $76;
     }
    }
    $79 = ($74|0)==(0|0);
    if ($79) {
     break;
    } else {
     $$163 = $74;
    }
   }
   $118 = ((($$163)) + 20|0);
   $119 = HEAP32[$118>>2]|0;
   _lily_value_assign($119,$3);
   $120 = ((($$163)) + 16|0);
   $121 = HEAP32[$120>>2]|0;
   _lily_value_assign($121,$2);
   $122 = ((($$163)) + 8|0);
   $123 = $4;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = (($123) + 4)|0;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $129 = $122;
   $130 = $129;
   HEAP32[$130>>2] = $125;
   $131 = (($129) + 4)|0;
   $132 = $131;
   HEAP32[$132>>2] = $128;
   STACKTOP = sp;return;
  }
 } while(0);
 $80 = ((($1)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = HEAP32[$33>>2]|0;
 $83 = (($81|0) / ($82|0))&-1;
 $84 = ($83|0)>(5);
 if ($84) {
  _rehash($1);
  $85 = HEAP32[$33>>2]|0;
  $86 = ($85|0)<(0);
  $87 = $86 << 31 >> 31;
  $88 = (___uremdi3(($37|0),($38|0),($85|0),($87|0))|0);
  $89 = tempRet0;
  $$0 = $88;
 } else {
  $$0 = $39;
 }
 $90 = (_lily_malloc(32)|0);
 $91 = (_lily_value_copy($2)|0);
 $92 = ((($90)) + 16|0);
 HEAP32[$92>>2] = $91;
 $93 = ((($90)) + 8|0);
 $94 = $4;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = $93;
 $101 = $100;
 HEAP32[$101>>2] = $96;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = $99;
 $104 = $90;
 $105 = $104;
 HEAP32[$105>>2] = $37;
 $106 = (($104) + 4)|0;
 $107 = $106;
 HEAP32[$107>>2] = $38;
 $108 = (_lily_value_copy($3)|0);
 $109 = ((($90)) + 20|0);
 HEAP32[$109>>2] = $108;
 $110 = HEAP32[$41>>2]|0;
 $111 = (($110) + ($$0<<2)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($90)) + 24|0);
 HEAP32[$113>>2] = $112;
 $114 = HEAP32[$41>>2]|0;
 $115 = (($114) + ($$0<<2)|0);
 HEAP32[$115>>2] = $90;
 $116 = HEAP32[$80>>2]|0;
 $117 = (($116) + 1)|0;
 HEAP32[$80>>2] = $117;
 STACKTOP = sp;return;
}
function _rehash($0) {
 $0 = $0|0;
 var $$03740 = 0, $$039 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = (_new_size($3)|0);
 $5 = $4 << 2;
 $6 = (_lily_malloc($5)|0);
 _memset(($6|0),0,($5|0))|0;
 $7 = ($2|0)>(0);
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 if (!($7)) {
  $$lcssa = $9;
  _lily_free($$lcssa);
  HEAP32[$1>>2] = $4;
  HEAP32[$8>>2] = $6;
  return;
 }
 $10 = ($4|0)<(0);
 $11 = $10 << 31 >> 31;
 $$03740 = 0;$13 = $9;
 while(1) {
  $12 = (($13) + ($$03740<<2)|0);
  $14 = HEAP32[$12>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $$039 = $14;
   while(1) {
    $16 = ((($$039)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $$039;
    $19 = $18;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($18) + 4)|0;
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $24 = (___uremdi3(($20|0),($23|0),($4|0),($11|0))|0);
    $25 = tempRet0;
    $26 = (($6) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    HEAP32[$16>>2] = $27;
    HEAP32[$26>>2] = $$039;
    $28 = ($17|0)==(0|0);
    if ($28) {
     break;
    } else {
     $$039 = $17;
    }
   }
  }
  $29 = (($$03740) + 1)|0;
  $30 = HEAP32[$8>>2]|0;
  $exitcond = ($29|0)==($2|0);
  if ($exitcond) {
   $$lcssa = $30;
   break;
  } else {
   $$03740 = $29;$13 = $30;
  }
 }
 _lily_free($$lcssa);
 HEAP32[$1>>2] = $4;
 HEAP32[$8>>2] = $6;
 return;
}
function _lily_hash_set_from_stack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_lily_stack_take($0)|0);
 $3 = (_lily_stack_take($0)|0);
 _lily_hash_set($0,$1,$3,$2);
 _lily_deref($2);
 HEAP32[$2>>2] = 0;
 _lily_deref($3);
 HEAP32[$3>>2] = 0;
 return;
}
function _lily_hash_get($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$035 = 0, $$037$be = 0, $$139 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy3 = sp + 16|0;
 $$byval_copy2 = sp + 8|0;
 $3 = sp;
 $4 = ((($2)) + 8|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = HEAP16[$2>>1]|0;
 $16 = ($15<<16>>16)==(3);
 if ($16) {
  $23 = HEAP32[$4>>2]|0;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($23)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_lily_config_get($0)|0);
  $29 = ((($28)) + 24|0);
  $30 = (_siphash24($25,$27,$29)|0);
  $31 = tempRet0;
  $$035 = 12;$36 = $30;$37 = $31;
 } else {
  $17 = $4;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $$035 = 11;$36 = $19;$37 = $22;
 }
 $32 = ((($1)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<(0);
 $35 = $34 << 31 >> 31;
 $38 = (___uremdi3(($36|0),($37|0),($33|0),($35|0))|0);
 $39 = tempRet0;
 $40 = ((($1)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = $43;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = ($47|0)==($36|0);
 $52 = ($50|0)==($37|0);
 $53 = $51 & $52;
 if ($53) {
  $54 = ((($43)) + 8|0);
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$54>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$54+4>>2]|0;
  $55 = (FUNCTION_TABLE_iii[$$035 & 15]($$byval_copy2,$$byval_copy3)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $$139 = $43;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $57 = ((($43)) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $60 = $58;$74 = $57;
  }
  while(1) {
   $61 = $60;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($63|0)==($36|0);
   $68 = ($66|0)==($37|0);
   $69 = $67 & $68;
   if ($69) {
    $70 = ((($60)) + 8|0);
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$3+4>>2]|0;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$70>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$70+4>>2]|0;
    $71 = (FUNCTION_TABLE_iii[$$035 & 15]($$byval_copy2,$$byval_copy3)|0);
    $72 = ($71|0)==(0);
    $73 = HEAP32[$74>>2]|0;
    if ($72) {
     break;
    } else {
     $$037$be = $73;
    }
   } else {
    $$037$be = $60;
   }
   $75 = ((($$037$be)) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==(0|0);
   if ($77) {
    $$0 = 0;
    label = 13;
    break;
   } else {
    $60 = $76;$74 = $75;
   }
  }
  if ((label|0) == 13) {
   STACKTOP = sp;return ($$0|0);
  }
  $78 = ($73|0)==(0|0);
  if ($78) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$139 = $73;
  }
 }
 $79 = ((($$139)) + 20|0);
 $80 = HEAP32[$79>>2]|0;
 $$0 = $80;
 STACKTOP = sp;return ($$0|0);
}
function _lily_new_string_pile() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lily_malloc(12)|0);
 $1 = (_lily_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 63;
 return ($0|0);
}
function _lily_free_string_pile($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free($1);
 _lily_free($0);
 return;
}
function _lily_sp_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 $6 = (_strlen($1)|0);
 $7 = (($5) + ($6))|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<($7>>>0);
 if ($10) {
  $11 = HEAP32[$8>>2]|0;
  $12 = ($11>>>0)<($7>>>0);
  if ($12) {
   $14 = $11;
   while(1) {
    $13 = $14 << 1;
    $15 = ($13>>>0)<($7>>>0);
    if ($15) {
     $14 = $13;
    } else {
     break;
    }
   }
   HEAP32[$8>>2] = $13;
   $$lcssa = $13;
  } else {
   $$lcssa = $11;
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = (_lily_realloc($16,$$lcssa)|0);
  HEAP32[$0>>2] = $17;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP16[$2>>1]|0;
 $20 = $19&65535;
 $21 = (($18) + ($20)|0);
 (_strcpy($21,$1)|0);
 $22 = $7&65535;
 HEAP16[$2>>1] = $22;
 return;
}
function _lily_sp_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1)|0);
 return ($3|0);
}
function _lily_library_load($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_dlopen(($0|0),1)|0);
 return ($1|0);
}
function _lily_library_get($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_dlsym(($0|0),($1|0))|0);
 return ($2|0);
}
function _lily_library_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_dlclose(($0|0))|0);
 return;
}
function _siphash24($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$0257$lcssa = 0, $$0257275 = 0, $$0276 = 0, $$sroa$0$sroa$0$0 = 0, $$sroa$0$sroa$0$0$extract$trunc = 0, $$sroa$0$sroa$0$0$insert$ext = 0, $$sroa$0$sroa$0$0$insert$insert = 0, $$sroa$0$sroa$6$0 = 0, $$sroa$0$sroa$6$0$extract$shift = 0, $$sroa$0$sroa$6$0$extract$trunc = 0, $$sroa$0$sroa$6$0$insert$ext = 0, $$sroa$0$sroa$6$0$insert$insert = 0, $$sroa$0$sroa$6$0$insert$shift = 0, $$sroa$0$sroa$6$1 = 0, $$sroa$0$sroa$7$0 = 0, $$sroa$0$sroa$7$0$extract$shift = 0, $$sroa$0$sroa$7$0$extract$trunc = 0, $$sroa$0$sroa$7$0$insert$ext = 0, $$sroa$0$sroa$7$0$insert$insert = 0;
 var $$sroa$0$sroa$7$0$insert$shift = 0, $$sroa$0$sroa$7$1 = 0, $$sroa$0$sroa$7$2 = 0, $$sroa$0$sroa$8$0$extract$shift = 0, $$sroa$0$sroa$8$sroa$0$0 = 0, $$sroa$10$0 = 0, $$sroa$10$1 = 0, $$sroa$10$2 = 0, $$sroa$10$3 = 0, $$sroa$8$0 = 0, $$sroa$8$1 = 0, $$sroa$9$0 = 0, $$sroa$9$1 = 0, $$sroa$9$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 8|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_bitshift64Shl(($1|0),0,56)|0);
 $17 = tempRet0;
 $18 = $5 ^ 1886610805;
 $19 = $8 ^ 1936682341;
 $20 = $12 ^ 1852075885;
 $21 = $15 ^ 1685025377;
 $22 = $5 ^ 1852142177;
 $23 = $8 ^ 1819895653;
 $24 = $12 ^ 2037671283;
 $25 = $15 ^ 1952801890;
 $26 = ($1>>>0)>(7);
 if ($26) {
  $27 = (($1) + -8)|0;
  $28 = $27 & -8;
  $29 = (($28) + 8)|0;
  $scevgep = (($0) + ($29)|0);
  $$0257275 = $0;$$0276 = $1;$39 = $24;$41 = $25;$42 = $20;$43 = $21;$44 = $18;$45 = $19;$48 = $22;$49 = $23;
  while(1) {
   $30 = $$0257275;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($$0257275)) + 8|0);
   $37 = (($$0276) + -8)|0;
   $38 = $32 ^ $39;
   $40 = $35 ^ $41;
   $46 = (_i64Add(($42|0),($43|0),($44|0),($45|0))|0);
   $47 = tempRet0;
   $50 = (_i64Add(($38|0),($40|0),($48|0),($49|0))|0);
   $51 = tempRet0;
   $52 = (_bitshift64Shl(($42|0),($43|0),13)|0);
   $53 = tempRet0;
   $54 = (_bitshift64Lshr(($42|0),($43|0),51)|0);
   $55 = tempRet0;
   $56 = $52 | $54;
   $57 = $53 | $55;
   $58 = $56 ^ $46;
   $59 = $57 ^ $47;
   $60 = (_bitshift64Shl(($38|0),($40|0),16)|0);
   $61 = tempRet0;
   $62 = (_bitshift64Lshr(($38|0),($40|0),48)|0);
   $63 = tempRet0;
   $64 = $60 | $62;
   $65 = $61 | $63;
   $66 = $64 ^ $50;
   $67 = $65 ^ $51;
   $68 = (_i64Add(($50|0),($51|0),($58|0),($59|0))|0);
   $69 = tempRet0;
   $70 = (_i64Add(($66|0),($67|0),($47|0),($46|0))|0);
   $71 = tempRet0;
   $72 = (_bitshift64Shl(($58|0),($59|0),17)|0);
   $73 = tempRet0;
   $74 = (_bitshift64Lshr(($58|0),($59|0),47)|0);
   $75 = tempRet0;
   $76 = $72 | $74;
   $77 = $73 | $75;
   $78 = $68 ^ $76;
   $79 = $69 ^ $77;
   $80 = (_bitshift64Shl(($66|0),($67|0),21)|0);
   $81 = tempRet0;
   $82 = (_bitshift64Lshr(($66|0),($67|0),43)|0);
   $83 = tempRet0;
   $84 = $80 | $82;
   $85 = $81 | $83;
   $86 = $84 ^ $70;
   $87 = $85 ^ $71;
   $88 = (_i64Add(($70|0),($71|0),($78|0),($79|0))|0);
   $89 = tempRet0;
   $90 = (_i64Add(($86|0),($87|0),($69|0),($68|0))|0);
   $91 = tempRet0;
   $92 = (_bitshift64Shl(($78|0),($79|0),13)|0);
   $93 = tempRet0;
   $94 = (_bitshift64Lshr(($78|0),($79|0),51)|0);
   $95 = tempRet0;
   $96 = $92 | $94;
   $97 = $93 | $95;
   $98 = $96 ^ $88;
   $99 = $97 ^ $89;
   $100 = (_bitshift64Shl(($86|0),($87|0),16)|0);
   $101 = tempRet0;
   $102 = (_bitshift64Lshr(($86|0),($87|0),48)|0);
   $103 = tempRet0;
   $104 = $100 | $102;
   $105 = $101 | $103;
   $106 = $104 ^ $90;
   $107 = $105 ^ $91;
   $108 = (_i64Add(($90|0),($91|0),($98|0),($99|0))|0);
   $109 = tempRet0;
   $110 = (_i64Add(($106|0),($107|0),($89|0),($88|0))|0);
   $111 = tempRet0;
   $112 = (_bitshift64Shl(($98|0),($99|0),17)|0);
   $113 = tempRet0;
   $114 = (_bitshift64Lshr(($98|0),($99|0),47)|0);
   $115 = tempRet0;
   $116 = $112 | $114;
   $117 = $113 | $115;
   $118 = $116 ^ $108;
   $119 = $117 ^ $109;
   $120 = (_bitshift64Shl(($106|0),($107|0),21)|0);
   $121 = tempRet0;
   $122 = (_bitshift64Lshr(($106|0),($107|0),43)|0);
   $123 = tempRet0;
   $124 = $120 | $122;
   $125 = $121 | $123;
   $126 = $124 ^ $110;
   $127 = $125 ^ $111;
   $128 = $110 ^ $32;
   $129 = $111 ^ $35;
   $130 = ($37>>>0)>(7);
   if ($130) {
    $$0257275 = $36;$$0276 = $37;$39 = $126;$41 = $127;$42 = $118;$43 = $119;$44 = $128;$45 = $129;$48 = $109;$49 = $108;
   } else {
    break;
   }
  }
  $131 = (($27) - ($28))|0;
  $$0$lcssa = $131;$$0257$lcssa = $scevgep;$133 = $scevgep;$159 = $126;$161 = $127;$162 = $118;$163 = $119;$164 = $128;$165 = $129;$168 = $109;$169 = $108;
 } else {
  $$0$lcssa = $1;$$0257$lcssa = $0;$133 = $0;$159 = $24;$161 = $25;$162 = $20;$163 = $21;$164 = $18;$165 = $19;$168 = $22;$169 = $23;
 }
 switch ($$0$lcssa|0) {
 case 7:  {
  $132 = ((($133)) + 6|0);
  $134 = HEAP8[$132>>0]|0;
  $$sroa$10$0 = $134;
  label = 7;
  break;
 }
 case 6:  {
  $$sroa$10$0 = 0;
  label = 7;
  break;
 }
 case 5:  {
  $$sroa$10$1 = 0;$$sroa$9$0 = 0;
  label = 8;
  break;
 }
 case 4:  {
  $$sroa$10$2 = 0;$$sroa$8$0 = 0;$$sroa$9$1 = 0;
  label = 9;
  break;
 }
 case 3:  {
  $140 = ((($133)) + 2|0);
  $141 = HEAP8[$140>>0]|0;
  $$sroa$0$sroa$7$0 = $141;
  label = 11;
  break;
 }
 case 2:  {
  $$sroa$0$sroa$7$0 = 0;
  label = 11;
  break;
 }
 case 1:  {
  $$sroa$0$sroa$6$0 = 0;$$sroa$0$sroa$7$1 = 0;
  label = 12;
  break;
 }
 default: {
  $$sroa$0$sroa$0$0 = 0;$$sroa$0$sroa$6$1 = 0;$$sroa$0$sroa$7$2 = 0;$$sroa$0$sroa$8$sroa$0$0 = 0;$$sroa$10$3 = 0;$$sroa$8$1 = 0;$$sroa$9$2 = 0;
 }
 }
 if ((label|0) == 7) {
  $135 = ((($133)) + 5|0);
  $136 = HEAP8[$135>>0]|0;
  $$sroa$10$1 = $$sroa$10$0;$$sroa$9$0 = $136;
  label = 8;
 }
 else if ((label|0) == 11) {
  $142 = ((($133)) + 1|0);
  $143 = HEAP8[$142>>0]|0;
  $$sroa$0$sroa$6$0 = $143;$$sroa$0$sroa$7$1 = $$sroa$0$sroa$7$0;
  label = 12;
 }
 if ((label|0) == 8) {
  $137 = ((($133)) + 4|0);
  $138 = HEAP8[$137>>0]|0;
  $$sroa$10$2 = $$sroa$10$1;$$sroa$8$0 = $138;$$sroa$9$1 = $$sroa$9$0;
  label = 9;
 }
 else if ((label|0) == 12) {
  $144 = HEAP8[$133>>0]|0;
  $$sroa$0$sroa$0$0 = $144;$$sroa$0$sroa$6$1 = $$sroa$0$sroa$6$0;$$sroa$0$sroa$7$2 = $$sroa$0$sroa$7$1;$$sroa$0$sroa$8$sroa$0$0 = 0;$$sroa$10$3 = 0;$$sroa$8$1 = 0;$$sroa$9$2 = 0;
 }
 if ((label|0) == 9) {
  $139 = HEAP32[$$0257$lcssa>>2]|0;
  $$sroa$0$sroa$0$0$extract$trunc = $139&255;
  $$sroa$0$sroa$6$0$extract$shift = $139 >>> 8;
  $$sroa$0$sroa$6$0$extract$trunc = $$sroa$0$sroa$6$0$extract$shift&255;
  $$sroa$0$sroa$7$0$extract$shift = $139 >>> 16;
  $$sroa$0$sroa$7$0$extract$trunc = $$sroa$0$sroa$7$0$extract$shift&255;
  $$sroa$0$sroa$8$0$extract$shift = $139 & -16777216;
  $$sroa$0$sroa$0$0 = $$sroa$0$sroa$0$0$extract$trunc;$$sroa$0$sroa$6$1 = $$sroa$0$sroa$6$0$extract$trunc;$$sroa$0$sroa$7$2 = $$sroa$0$sroa$7$0$extract$trunc;$$sroa$0$sroa$8$sroa$0$0 = $$sroa$0$sroa$8$0$extract$shift;$$sroa$10$3 = $$sroa$10$2;$$sroa$8$1 = $$sroa$8$0;$$sroa$9$2 = $$sroa$9$1;
 }
 $$sroa$0$sroa$7$0$insert$ext = $$sroa$0$sroa$7$2&255;
 $$sroa$0$sroa$7$0$insert$shift = $$sroa$0$sroa$7$0$insert$ext << 16;
 $$sroa$0$sroa$7$0$insert$insert = $$sroa$0$sroa$8$sroa$0$0 | $$sroa$0$sroa$7$0$insert$shift;
 $$sroa$0$sroa$6$0$insert$ext = $$sroa$0$sroa$6$1&255;
 $$sroa$0$sroa$6$0$insert$shift = $$sroa$0$sroa$6$0$insert$ext << 8;
 $$sroa$0$sroa$6$0$insert$insert = $$sroa$0$sroa$7$0$insert$insert | $$sroa$0$sroa$6$0$insert$shift;
 $$sroa$0$sroa$0$0$insert$ext = $$sroa$0$sroa$0$0&255;
 $$sroa$0$sroa$0$0$insert$insert = $$sroa$0$sroa$6$0$insert$insert | $$sroa$0$sroa$0$0$insert$ext;
 $145 = $$sroa$10$3&255;
 $146 = (_bitshift64Shl(($145|0),0,48)|0);
 $147 = tempRet0;
 $148 = $$sroa$9$2&255;
 $149 = (_bitshift64Shl(($148|0),0,40)|0);
 $150 = tempRet0;
 $151 = $$sroa$8$1&255;
 $152 = $146 | $16;
 $153 = $147 | $17;
 $154 = $152 | $149;
 $155 = $153 | $150;
 $156 = $154 | $$sroa$0$sroa$0$0$insert$insert;
 $157 = $155 | $151;
 $158 = $156 ^ $159;
 $160 = $157 ^ $161;
 $166 = (_i64Add(($162|0),($163|0),($164|0),($165|0))|0);
 $167 = tempRet0;
 $170 = (_i64Add(($158|0),($160|0),($168|0),($169|0))|0);
 $171 = tempRet0;
 $172 = (_bitshift64Shl(($162|0),($163|0),13)|0);
 $173 = tempRet0;
 $174 = (_bitshift64Lshr(($162|0),($163|0),51)|0);
 $175 = tempRet0;
 $176 = $172 | $174;
 $177 = $173 | $175;
 $178 = $176 ^ $166;
 $179 = $177 ^ $167;
 $180 = (_bitshift64Shl(($158|0),($160|0),16)|0);
 $181 = tempRet0;
 $182 = (_bitshift64Lshr(($158|0),($160|0),48)|0);
 $183 = tempRet0;
 $184 = $180 | $182;
 $185 = $181 | $183;
 $186 = $184 ^ $170;
 $187 = $185 ^ $171;
 $188 = (_i64Add(($170|0),($171|0),($178|0),($179|0))|0);
 $189 = tempRet0;
 $190 = (_i64Add(($186|0),($187|0),($167|0),($166|0))|0);
 $191 = tempRet0;
 $192 = (_bitshift64Shl(($178|0),($179|0),17)|0);
 $193 = tempRet0;
 $194 = (_bitshift64Lshr(($178|0),($179|0),47)|0);
 $195 = tempRet0;
 $196 = $192 | $194;
 $197 = $193 | $195;
 $198 = $188 ^ $196;
 $199 = $189 ^ $197;
 $200 = (_bitshift64Shl(($186|0),($187|0),21)|0);
 $201 = tempRet0;
 $202 = (_bitshift64Lshr(($186|0),($187|0),43)|0);
 $203 = tempRet0;
 $204 = $200 | $202;
 $205 = $201 | $203;
 $206 = $204 ^ $190;
 $207 = $205 ^ $191;
 $208 = (_i64Add(($190|0),($191|0),($198|0),($199|0))|0);
 $209 = tempRet0;
 $210 = (_i64Add(($206|0),($207|0),($189|0),($188|0))|0);
 $211 = tempRet0;
 $212 = (_bitshift64Shl(($198|0),($199|0),13)|0);
 $213 = tempRet0;
 $214 = (_bitshift64Lshr(($198|0),($199|0),51)|0);
 $215 = tempRet0;
 $216 = $212 | $214;
 $217 = $213 | $215;
 $218 = $216 ^ $208;
 $219 = $217 ^ $209;
 $220 = (_bitshift64Shl(($206|0),($207|0),16)|0);
 $221 = tempRet0;
 $222 = (_bitshift64Lshr(($206|0),($207|0),48)|0);
 $223 = tempRet0;
 $224 = $220 | $222;
 $225 = $221 | $223;
 $226 = $224 ^ $210;
 $227 = $225 ^ $211;
 $228 = (_i64Add(($210|0),($211|0),($218|0),($219|0))|0);
 $229 = tempRet0;
 $230 = (_i64Add(($226|0),($227|0),($209|0),($208|0))|0);
 $231 = tempRet0;
 $232 = (_bitshift64Shl(($218|0),($219|0),17)|0);
 $233 = tempRet0;
 $234 = (_bitshift64Lshr(($218|0),($219|0),47)|0);
 $235 = tempRet0;
 $236 = $232 | $234;
 $237 = $233 | $235;
 $238 = $236 ^ $228;
 $239 = $237 ^ $229;
 $240 = (_bitshift64Shl(($226|0),($227|0),21)|0);
 $241 = tempRet0;
 $242 = (_bitshift64Lshr(($226|0),($227|0),43)|0);
 $243 = tempRet0;
 $244 = $240 | $242;
 $245 = $241 | $243;
 $246 = $244 ^ $230;
 $247 = $245 ^ $231;
 $248 = $230 ^ $156;
 $249 = $231 ^ $157;
 $250 = $229 ^ 255;
 $251 = (_i64Add(($248|0),($249|0),($238|0),($239|0))|0);
 $252 = tempRet0;
 $253 = (_i64Add(($246|0),($247|0),($250|0),($228|0))|0);
 $254 = tempRet0;
 $255 = (_bitshift64Shl(($238|0),($239|0),13)|0);
 $256 = tempRet0;
 $257 = (_bitshift64Lshr(($238|0),($239|0),51)|0);
 $258 = tempRet0;
 $259 = $255 | $257;
 $260 = $256 | $258;
 $261 = $251 ^ $259;
 $262 = $252 ^ $260;
 $263 = (_bitshift64Shl(($246|0),($247|0),16)|0);
 $264 = tempRet0;
 $265 = (_bitshift64Lshr(($246|0),($247|0),48)|0);
 $266 = tempRet0;
 $267 = $263 | $265;
 $268 = $264 | $266;
 $269 = $267 ^ $253;
 $270 = $268 ^ $254;
 $271 = (_i64Add(($253|0),($254|0),($261|0),($262|0))|0);
 $272 = tempRet0;
 $273 = (_i64Add(($269|0),($270|0),($252|0),($251|0))|0);
 $274 = tempRet0;
 $275 = (_bitshift64Shl(($261|0),($262|0),17)|0);
 $276 = tempRet0;
 $277 = (_bitshift64Lshr(($261|0),($262|0),47)|0);
 $278 = tempRet0;
 $279 = $275 | $277;
 $280 = $276 | $278;
 $281 = $279 ^ $271;
 $282 = $280 ^ $272;
 $283 = (_bitshift64Shl(($269|0),($270|0),21)|0);
 $284 = tempRet0;
 $285 = (_bitshift64Lshr(($269|0),($270|0),43)|0);
 $286 = tempRet0;
 $287 = $283 | $285;
 $288 = $284 | $286;
 $289 = $287 ^ $273;
 $290 = $288 ^ $274;
 $291 = (_i64Add(($273|0),($274|0),($281|0),($282|0))|0);
 $292 = tempRet0;
 $293 = (_i64Add(($289|0),($290|0),($272|0),($271|0))|0);
 $294 = tempRet0;
 $295 = (_bitshift64Shl(($281|0),($282|0),13)|0);
 $296 = tempRet0;
 $297 = (_bitshift64Lshr(($281|0),($282|0),51)|0);
 $298 = tempRet0;
 $299 = $295 | $297;
 $300 = $296 | $298;
 $301 = $299 ^ $291;
 $302 = $300 ^ $292;
 $303 = (_bitshift64Shl(($289|0),($290|0),16)|0);
 $304 = tempRet0;
 $305 = (_bitshift64Lshr(($289|0),($290|0),48)|0);
 $306 = tempRet0;
 $307 = $303 | $305;
 $308 = $304 | $306;
 $309 = $307 ^ $293;
 $310 = $308 ^ $294;
 $311 = (_i64Add(($293|0),($294|0),($301|0),($302|0))|0);
 $312 = tempRet0;
 $313 = (_i64Add(($309|0),($310|0),($292|0),($291|0))|0);
 $314 = tempRet0;
 $315 = (_bitshift64Shl(($301|0),($302|0),17)|0);
 $316 = tempRet0;
 $317 = (_bitshift64Lshr(($301|0),($302|0),47)|0);
 $318 = tempRet0;
 $319 = $315 | $317;
 $320 = $316 | $318;
 $321 = $319 ^ $311;
 $322 = $320 ^ $312;
 $323 = (_bitshift64Shl(($309|0),($310|0),21)|0);
 $324 = tempRet0;
 $325 = (_bitshift64Lshr(($309|0),($310|0),43)|0);
 $326 = tempRet0;
 $327 = $323 | $325;
 $328 = $324 | $326;
 $329 = $327 ^ $313;
 $330 = $328 ^ $314;
 $331 = (_i64Add(($313|0),($314|0),($321|0),($322|0))|0);
 $332 = tempRet0;
 $333 = (_i64Add(($329|0),($330|0),($312|0),($311|0))|0);
 $334 = tempRet0;
 $335 = (_bitshift64Shl(($321|0),($322|0),13)|0);
 $336 = tempRet0;
 $337 = (_bitshift64Lshr(($321|0),($322|0),51)|0);
 $338 = tempRet0;
 $339 = $335 | $337;
 $340 = $336 | $338;
 $341 = $339 ^ $331;
 $342 = $340 ^ $332;
 $343 = (_bitshift64Shl(($329|0),($330|0),16)|0);
 $344 = tempRet0;
 $345 = (_bitshift64Lshr(($329|0),($330|0),48)|0);
 $346 = tempRet0;
 $347 = $343 | $345;
 $348 = $344 | $346;
 $349 = $347 ^ $333;
 $350 = $348 ^ $334;
 $351 = (_i64Add(($333|0),($334|0),($341|0),($342|0))|0);
 $352 = tempRet0;
 $353 = (_i64Add(($349|0),($350|0),($332|0),($331|0))|0);
 $354 = tempRet0;
 $355 = (_bitshift64Shl(($341|0),($342|0),17)|0);
 $356 = tempRet0;
 $357 = (_bitshift64Lshr(($341|0),($342|0),47)|0);
 $358 = tempRet0;
 $359 = $355 | $357;
 $360 = $356 | $358;
 $361 = $359 ^ $351;
 $362 = $360 ^ $352;
 $363 = (_bitshift64Shl(($349|0),($350|0),21)|0);
 $364 = tempRet0;
 $365 = (_bitshift64Lshr(($349|0),($350|0),43)|0);
 $366 = tempRet0;
 $367 = $363 | $365;
 $368 = $364 | $366;
 $369 = $367 ^ $353;
 $370 = $368 ^ $354;
 $371 = (_i64Add(($353|0),($354|0),($361|0),($362|0))|0);
 $372 = tempRet0;
 $373 = (_i64Add(($369|0),($370|0),($352|0),($351|0))|0);
 $374 = tempRet0;
 $375 = (_bitshift64Shl(($361|0),($362|0),13)|0);
 $376 = tempRet0;
 $377 = (_bitshift64Lshr(($361|0),($362|0),51)|0);
 $378 = tempRet0;
 $379 = $375 | $377;
 $380 = $376 | $378;
 $381 = $379 ^ $371;
 $382 = $380 ^ $372;
 $383 = (_bitshift64Shl(($369|0),($370|0),16)|0);
 $384 = tempRet0;
 $385 = (_bitshift64Lshr(($369|0),($370|0),48)|0);
 $386 = tempRet0;
 $387 = $383 | $385;
 $388 = $384 | $386;
 $389 = $387 ^ $373;
 $390 = $388 ^ $374;
 $391 = (_i64Add(($373|0),($374|0),($381|0),($382|0))|0);
 $392 = tempRet0;
 $393 = (_bitshift64Shl(($381|0),($382|0),17)|0);
 $394 = tempRet0;
 $395 = (_bitshift64Lshr(($381|0),($382|0),47)|0);
 $396 = tempRet0;
 $397 = $393 | $395;
 $398 = $394 | $396;
 $399 = $397 ^ $391;
 $400 = $398 ^ $392;
 $401 = (_bitshift64Shl(($389|0),($390|0),21)|0);
 $402 = tempRet0;
 $403 = (_bitshift64Lshr(($389|0),($390|0),43)|0);
 $404 = tempRet0;
 $405 = $401 | $403;
 $406 = $402 | $404;
 $407 = $399 ^ $392;
 $408 = $400 ^ $391;
 $409 = $407 ^ $405;
 $410 = $408 ^ $406;
 tempRet0 = ($410);
 return ($409|0);
}
function _import_noop($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _get_parser() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(48)|0);
 $1 = ((($0)) + 4|0);
 _lily_config_init($1);
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = 2;
 $3 = (_lily_new_state($1)|0);
 HEAP32[$0>>2] = $3;
 return ($0|0);
}
function _run_parser($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_lily_parse_string($2,18778,$1)|0);
 return ($3|0);
}
function _destroy_parser($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _lily_free_state($1);
 _free($0);
 return;
}
function _get_parser_error($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lily_error_message($1)|0);
 return ($2|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[5308]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (21272 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[5308] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(21240)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (21272 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[5308] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(21252)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (21272 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[5308] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(21240)>>2] = $76;
     HEAP32[(21252)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(21236)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (21536 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (21536 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(21236)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(21252)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (21272 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[5308] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(21240)>>2] = $$0173$lcssa$i;
       HEAP32[(21252)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(21236)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (21536 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (21536 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(21240)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (21536 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(21236)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (21272 + ($383<<2)|0);
          $385 = HEAP32[5308]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[5308] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (21536 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(21236)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(21240)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(21252)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(21252)>>2] = $462;
   HEAP32[(21240)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(21240)>>2] = 0;
   HEAP32[(21252)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(21244)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(21244)>>2] = $477;
  $478 = HEAP32[(21256)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(21256)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[5426]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(21712)>>2] = 4096;
  HEAP32[(21708)>>2] = 4096;
  HEAP32[(21716)>>2] = -1;
  HEAP32[(21720)>>2] = -1;
  HEAP32[(21724)>>2] = 0;
  HEAP32[(21676)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[5426] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(21712)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(21672)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(21664)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(21676)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(21256)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (21680);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(21708)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(21664)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(21672)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(21712)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(21676)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(21676)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(21664)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(21664)>>2] = $578;
  $579 = HEAP32[(21668)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(21668)>>2] = $578;
  }
  $581 = HEAP32[(21256)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(21248)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(21248)>>2] = $$748$i;
    }
    HEAP32[(21680)>>2] = $$748$i;
    HEAP32[(21684)>>2] = $$723947$i;
    HEAP32[(21692)>>2] = 0;
    $586 = HEAP32[5426]|0;
    HEAP32[(21268)>>2] = $586;
    HEAP32[(21264)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (21272 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(21256)>>2] = $600;
    HEAP32[(21244)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(21720)>>2]|0;
    HEAP32[(21260)>>2] = $606;
   } else {
    $$024370$i = (21680);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(21244)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(21256)>>2] = $630;
       HEAP32[(21244)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(21720)>>2]|0;
       HEAP32[(21260)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(21248)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(21248)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (21680);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(21244)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(21244)>>2] = $678;
        HEAP32[(21256)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(21252)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(21240)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(21240)>>2] = $684;
         HEAP32[(21252)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[5308]|0;
            $703 = $702 & $701;
            HEAP32[5308] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (21536 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(21236)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(21236)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (21272 + ($762<<2)|0);
         $764 = HEAP32[5308]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[5308] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (21536 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(21236)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(21236)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (21680);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(21256)>>2] = $865;
    HEAP32[(21244)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(21720)>>2]|0;
    HEAP32[(21260)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(21680)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(21680)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(21680)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(21680)+12>>2]|0;
    HEAP32[(21680)>>2] = $$748$i;
    HEAP32[(21684)>>2] = $$723947$i;
    HEAP32[(21692)>>2] = 0;
    HEAP32[(21688)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (21272 + ($887<<2)|0);
      $889 = HEAP32[5308]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[5308] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (21536 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(21236)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(21236)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(21244)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(21244)>>2] = $962;
   $963 = HEAP32[(21256)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(21256)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(21248)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(21252)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(21240)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[5308]|0;
     $29 = $28 & $27;
     HEAP32[5308] = $29;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$86 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (21536 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(21236)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(21236)>>2] = $62;
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$86 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$86 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$86 = $2;
  }
 } while(0);
 $87 = ($86>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(21256)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(21252)>>2]|0;
  if ($95) {
   $97 = HEAP32[(21244)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(21244)>>2] = $98;
   HEAP32[(21256)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(21252)>>2] = 0;
   HEAP32[(21240)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(21240)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(21240)>>2] = $104;
   HEAP32[(21252)>>2] = $86;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($86) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[5308]|0;
     $120 = $119 & $118;
     HEAP32[5308] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (21536 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(21236)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(21236)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($86) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(21252)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(21240)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($86) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (21272 + ($180<<2)|0);
  $182 = HEAP32[5308]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[5308] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (21536 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(21236)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(21236)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(21264)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(21264)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (21688);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(21264)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(21712)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(21256)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(21244)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(21256)>>2] = $34;
  HEAP32[(21244)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(21252)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(21240)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(21240)>>2] = $storemerge1;
  HEAP32[(21252)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[5308]|0;
    $81 = $80 & $79;
    HEAP32[5308] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (21536 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(21236)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(21236)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(21252)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(21240)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[5308]|0;
     $25 = $24 & $23;
     HEAP32[5308] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (21536 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(21236)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(21236)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(21256)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(21252)>>2]|0;
  if ($87) {
   $89 = HEAP32[(21244)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(21244)>>2] = $90;
   HEAP32[(21256)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(21252)>>2] = 0;
   HEAP32[(21240)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(21240)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(21240)>>2] = $96;
   HEAP32[(21252)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[5308]|0;
     $112 = $111 & $110;
     HEAP32[5308] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (21536 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(21236)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(21236)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(21252)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(21240)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (21272 + ($172<<2)|0);
  $174 = HEAP32[5308]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[5308] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (21536 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(21236)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(21236)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21728|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_677()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_677() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2924|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$25 = $17;
   while(1) {
    $26 = ($25|0)<(0);
    if ($26) {
     break;
    }
    $34 = (($$04855) - ($25))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($25>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($25) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$25 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 3;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_1()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_1() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (18786 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (19303 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $79 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $79 = $78;
      }
      $80 = ($79|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$25 = $$pre;$28 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$25 = $21;$28 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$25 = $21;$28 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $25;
    $29 = $28;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($29))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($28)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$100 = 0;$52 = 0;$54 = 0;$98 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $40 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $40 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $41 = ($40|0)==(48);
    if ($41) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $40;$$2144 = 1;$100 = $39;$52 = 0;$54 = 0;$98 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$100 = 0;$52 = 0;$54 = 0;$98 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $53 = ($52|0)<(0);
   $55 = ($54>>>0)<(8);
   $56 = ($52|0)==(0);
   $57 = $56 & $55;
   $58 = $53 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($52|0)<(0);
     $62 = ($54>>>0)<(14);
     $63 = ($52|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($54|0),($52|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $98;$215 = $100;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$100 = $215;$52 = $217;$54 = $216;$98 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$100 = $215;$52 = $217;$54 = $216;$98 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $99 = $97 ? $54 : $98;
   $101 = $97 ? $52 : $100;
   $102 = ($52|0)<(0);
   $103 = ($54>>>0)<(8);
   $104 = ($52|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $54;$109 = $52;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($99|0),($101|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $372;$72 = $374;$74 = $373;$75 = $375;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $366;$72 = 0;$74 = $367;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $72;$377 = $75;$378 = $73;$379 = $76;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $72;$382 = $75;$383 = $77;$384 = $73;$385 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$104 = $92;$106 = $72;$107 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$104 = $378;$106 = $376;$107 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$104 = $384;$106 = $381;$107 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $105 = ($104|0)==($106|0);
   $108 = ($107|0)==($109|0);
   $110 = $105 & $108;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($107|0)>($124|0);
   $126 = ($104>>>0)>($122>>>0);
   $127 = ($107|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($107|0)<($136|0);
   $138 = ($104>>>0)<($134>>>0);
   $139 = ($107|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($104|0);
    $155 = ($104|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($104|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($104|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($104))|0;
      $166 = (3428 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($104, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($104) + -10)|0;
      $175 = (3428 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($104|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $104;
   } else {
    $184 = ($104|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (3428 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $104;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $104;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $286 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (3460 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $287 = ($286|0)==($$$5355|0);
     if (!($287)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $286;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_283($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$100 = $92;$156 = $97;$157 = $87;$158 = $88;$98 = $91;
      while(1) {
       if ($156) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$100 = $111;$156 = $116;$157 = $106;$158 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $122 = $119;$124 = $117;
     }
    } else {
     $122 = $160;$124 = $159;
    }
    $123 = ($122>>>0)<(1048576);
    $125 = ($124>>>0)<(0);
    $126 = ($122|0)==(1048576);
    $127 = $126 & $125;
    $128 = $123 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $124;$131 = $122;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $124;$142 = $122;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_283($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 7]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 7]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $28 = $4;
 } else {
  $28 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 7]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $29 = ($28|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_132()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((21792|0));
 return (21800|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((21792|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[856]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[856]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 7]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___pthread_self_132() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out_101($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint_102($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint_102($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((18795 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_104($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 19259;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$247 = $212;$249 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 19259;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 19259 : (19261);
     $$$ = $238 ? $$ : (19260);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 19259;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 19259;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 19269;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 19259;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (19259 + ($208)|0);
    $$289 = $or$cond283 ? 19259 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$247 = $197;$249 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$247 = $242;$249 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 19259;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out_101($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $248 = ($247|0)!=(0);
   $250 = ($249|0)!=(0);
   $251 = $248 | $250;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad($0,32,$$2261,$312,$$6268);
  _out_101($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$312,$314);
  _pad($0,48,$$$5,$310,0);
  _out_101($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg_104($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $324 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $325 = ($324|0)<(10);
      if ($325) {
       $$3303 = $324;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_101($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_102($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg_104($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (19311 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_680()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_101($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out_101($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_107($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 19276;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (19277) : (19282);
  $$$ = $16 ? $$ : (19279);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_107($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (19311 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad($0,32,$2,$104,$4);
    _out_101($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad($0,48,$2,$104,$105);
    _out_101($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad($0,48,$106,0,0);
    _out_101($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$121 = $$pr;
    while(1) {
     $122 = ($121|0)<(29);
     $123 = $122 ? $121 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$121 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad($0,32,$2,$320,$4);
   _out_101($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out_101($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out_101($0,19327,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out_101($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out_101($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out_101($0,19327,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out_101($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out_101($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 19295 : 19299;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 19303 : 19307;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad($0,32,$2,$32,$33);
   _out_101($0,$$0521,$$0520);
   _out_101($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_107($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___pthread_self_680() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (19329 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 19417;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 19417;
  } else {
   $$01214 = 19417;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 7]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(21221,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 1;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 3;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 2;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 1;
   $38 = HEAP32[(21732)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 7]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $35 = $9;
 } else {
  $35 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 7]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $36 = ($35|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($35|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=3468; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $not$ = ($3|0)!=($2|0);
 $4 = $not$ << 31 >> 31;
 return ($4|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $10 = $6;
   } else {
    $10 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $12 = ($$pr|0)==(0|0);
    $13 = ($10|0)!=(0);
    if ($12) {
     $24 = $13;
    } else {
     $17 = $$pr;$23 = $13;
     label = 7;
    }
   } else {
    $11 = ($10|0)!=(0);
    $17 = $8;$23 = $11;
    label = 7;
   }
   if ((label|0) == 7) {
    $14 = ((($1)) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + -8|0);
    $18 = ($17>>>0)>($16>>>0);
    if ($18) {
     $19 = $0&255;
     $20 = ((($17)) + -1|0);
     HEAP32[$7>>2] = $20;
     HEAP8[$20>>0] = $19;
     $21 = HEAP32[$1>>2]|0;
     $22 = $21 & -17;
     HEAP32[$1>>2] = $22;
     if (!($23)) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    } else {
     $24 = $23;
    }
   }
   if ($24) {
    ___unlockfile($1);
    $$1 = -1;
   } else {
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(21221,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$12 = $4;$22 = $8;$23 = $5;$9 = $7;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $10 = ($9<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $10;
     $13 = ($12<<24>>24)==($9<<24>>24);
     $or$cond21 = $13 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$12 = $16;$22 = $20;$23 = $17;$9 = $19;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1&255;
 $$09 = $2;
 while(1) {
  $4 = (($$09) + -1)|0;
  $5 = ($$09|0)==(0);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = (($0) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==($3<<24>>24);
  if ($8) {
   $$0 = $6;
   break;
  } else {
   $$09 = $4;
  }
 }
 return ($$0|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isprint($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -32)|0;
 $2 = ($1>>>0)<(95);
 $3 = $2&1;
 return ($3|0);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox_724($0,$1,1));
 return (+$2);
}
function _strtox_724($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
    $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $10$1 = tempRet0;
    STACKTOP = __stackBase__;
    return (tempRet0 = $10$1, $10$0) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&3](a1|0,a2|0,a3|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&3](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function b1(p0) {
 p0 = p0|0; abort(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(2);
}
function b3(p0) {
 p0 = p0|0; abort(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(5);return 0;
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(6);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_read,___stdio_seek,___stdio_write,___stdout_write,_sn_write,_lily_value_compare,b0];
var FUNCTION_TABLE_vi = [b1,_lily_deref,_move_unit,_add_catch_entry,_lily_release_jump,_lily_time_Time_clock,_lily_time_Time_now,_lily_time_Time_to_s,_lily_time_Time_since_epoch,_destroy_Time,_lily_sys__getenv,_lily_sys__recursion_limit,_lily_sys__set_recursion_limit,_lily_stdout_print,_handle_rewind,_lily_pop_lex_entry,_lily_builtin_Boolean_to_i,_lily_builtin_Boolean_to_s,_lily_builtin_Byte_to_i,_lily_builtin_ByteString_each_byte,_lily_builtin_ByteString_encode,_lily_builtin_ByteString_size,_lily_builtin_ByteString_slice,_lily_builtin_DivisionByZeroError_new,_lily_builtin_Double_to_i,_lily_builtin_Dynamic_new,_lily_builtin_Exception_new,_lily_builtin_File_close,_lily_builtin_File_each_line
,_lily_builtin_File_open,_lily_builtin_File_print,_lily_builtin_File_read,_lily_builtin_File_read_line,_lily_builtin_File_write,_lily_builtin_Hash_clear,_lily_builtin_Hash_delete,_lily_builtin_Hash_each_pair,_lily_builtin_Hash_get,_lily_builtin_Hash_has_key,_lily_builtin_Hash_keys,_lily_builtin_Hash_map_values,_lily_builtin_Hash_merge,_lily_builtin_Hash_reject,_lily_builtin_Hash_select,_lily_builtin_Hash_size,_lily_builtin_IndexError_new,_lily_builtin_Integer_to_bool,_lily_builtin_Integer_to_byte,_lily_builtin_Integer_to_d,_lily_builtin_Integer_to_s,_lily_builtin_IOError_new,_lily_builtin_KeyError_new,_lily_builtin_List_clear,_lily_builtin_List_count,_lily_builtin_List_delete_at,_lily_builtin_List_each,_lily_builtin_List_each_index,_lily_builtin_List_fold,_lily_builtin_List_insert
,_lily_builtin_List_join,_lily_builtin_List_map,_lily_builtin_List_pop,_lily_builtin_List_push,_lily_builtin_List_reject,_lily_builtin_List_repeat,_lily_builtin_List_select,_lily_builtin_List_size,_lily_builtin_List_shift,_lily_builtin_List_slice,_lily_builtin_List_unshift,_lily_builtin_Option_and,_lily_builtin_Option_and_then,_lily_builtin_Option_is_none,_lily_builtin_Option_is_some,_lily_builtin_Option_map,_lily_builtin_Option_or,_lily_builtin_Option_or_else,_lily_builtin_Option_unwrap,_lily_builtin_Option_unwrap_or,_lily_builtin_Option_unwrap_or_else,_lily_builtin_Result_failure,_lily_builtin_Result_is_failure,_lily_builtin_Result_is_success,_lily_builtin_Result_success,_lily_builtin_RuntimeError_new,_lily_builtin_String_format,_lily_builtin_String_ends_with,_lily_builtin_String_find,_lily_builtin_String_html_encode
,_lily_builtin_String_is_alnum,_lily_builtin_String_is_alpha,_lily_builtin_String_is_digit,_lily_builtin_String_is_space,_lily_builtin_String_lower,_lily_builtin_String_lstrip,_lily_builtin_String_parse_i,_lily_builtin_String_replace,_lily_builtin_String_rstrip,_lily_builtin_String_slice,_lily_builtin_String_split,_lily_builtin_String_starts_with,_lily_builtin_String_strip,_lily_builtin_String_to_bytestring,_lily_builtin_String_trim,_lily_builtin_String_upper,_lily_builtin_ValueError_new,_lily_builtin__print,_lily_builtin__calltrace,_hash_iter_callback,_lily_random_Random_new,_lily_random_Random_between,_destroy_Random,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_keyword_if,_keyword_do,_keyword_var,_keyword_for,_keyword_try,_keyword_case,_keyword_else,_keyword_elif,_keyword_enum,_keyword_while,_keyword_raise,_keyword_match,_keyword_break,_keyword_class,_keyword_public,_keyword_static,_keyword_scoped,_keyword_define,_keyword_return,_keyword_except,_keyword_import,_keyword_forward,_keyword_private,_keyword_protected,_keyword_continue,_vm_setup_before_call,_grow_vm_registers,_prep_registers
,_do_o_interpolation,_lily_value_assign,_do_o_subscript_get,_do_o_property_get,_do_o_subscript_set,_do_o_property_set,_do_o_build_hash,_do_o_build_list_tuple,_do_o_build_variant,_do_o_closure_function,_do_o_exception_raise,_do_o_new_instance,_do_o_closure_new,_lily_emit_eval_optarg_keyed,_lily_emit_eval_optarg,_fix_first_file_name,_parser_loop,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,___stdio_close,_lily_jump_setup,_make_cell_from,_lily_mb_flush,b3,b3,b3];
var FUNCTION_TABLE_viii = [b4,_vm_error,_lily_lexer_load,b4];
var FUNCTION_TABLE_iii = [b5,_strcmp,_fputs,_lily_builtin_loader,_lily_sys_loader,_lily_random_loader,_lily_time_loader,_get_define_arg,_get_nameless_arg,_get_class_arg,_get_variant_arg,_cmp_int,_cmp_str,b5,b5,b5];
var FUNCTION_TABLE_viiii = [b6,_lily_default_import_func,_import_noop,b6];

  return { stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, setThrew: setThrew, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, dynCall_viiii: dynCall_viiii, dynCall_vi: dynCall_vi, _run_parser: _run_parser, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Ashr: _bitshift64Ashr, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, ___divdi3: ___divdi3, getTempRet0: getTempRet0, ___udivmoddi4: ___udivmoddi4, setTempRet0: setTempRet0, _realloc: _realloc, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, ___remdi3: ___remdi3, dynCall_ii: dynCall_ii, _get_parser_error: _get_parser_error, _llvm_bswap_i32: _llvm_bswap_i32, ___muldsi3: ___muldsi3, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, runPostSets: runPostSets, _get_parser: _get_parser, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, _destroy_parser: _destroy_parser, _memset: _memset };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _run_parser = Module["_run_parser"] = asm["_run_parser"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
var _get_parser_error = Module["_get_parser_error"] = asm["_get_parser_error"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _get_parser = Module["_get_parser"] = asm["_get_parser"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _destroy_parser = Module["_destroy_parser"] = asm["_destroy_parser"];
var _memset = Module["_memset"] = asm["_memset"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



